/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/Tools/bookkeepingSystemVersion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve bookkeeping system version
         * @description To check if you already received the update to version 2.0 you can use this endpoint.
         */
        get: operations["bookkeepingSystemVersion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CheckAccount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve check accounts
         * @description Retrieve all check accounts
         */
        get: operations["getCheckAccounts"];
        put?: never;
        /**
         * Create a new check account
         * @deprecated
         * @description Creates a new banking account on which transactions can be created.
         */
        post: operations["createCheckAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CheckAccount/Factory/fileImportAccount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new file import account
         * @description Creates a new banking account for file imports (CSV, MT940).
         */
        post: operations["createFileImportAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CheckAccount/Factory/clearingAccount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new clearing account
         * @description Creates a new clearing account.
         */
        post: operations["createClearingAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CheckAccount/{checkAccountId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find check account by ID
         * @description Retrieve an existing check account
         */
        get: operations["getCheckAccountById"];
        /**
         * Update an existing check account
         * @description Update a check account
         */
        put: operations["updateCheckAccount"];
        post?: never;
        /** Deletes a check account */
        delete: operations["deleteCheckAccount"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CheckAccount/{checkAccountId}/getBalanceAtDate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the balance at a given date
         * @description Get the balance, calculated as the sum of all transactions sevdesk knows, up to and including the given date. Note that this balance does not have to be the actual bank account balance, e.g. if sevdesk did not import old transactions.
         */
        get: operations["getBalanceAtDate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CheckAccountTransaction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve transactions
         * @description Retrieve all transactions depending on the filters defined in the query.
         */
        get: operations["getTransactions"];
        put?: never;
        /**
         * Create a new transaction
         * @description Creates a new transaction on a check account.
         */
        post: operations["createTransaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CheckAccountTransaction/{checkAccountTransactionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find check account transaction by ID
         * @description Retrieve an existing check account transaction
         */
        get: operations["getCheckAccountTransactionById"];
        /**
         * Update an existing check account transaction
         * @description Update a check account transaction
         */
        put: operations["updateCheckAccountTransaction"];
        post?: never;
        /** Deletes a check account transaction */
        delete: operations["deleteCheckAccountTransaction"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CheckAccountTransaction/{checkAccountTransactionId}/enshrine": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Enshrine
         * @description Sets the current date and time as a value for the property `enshrined`.<br>
         *     This operation is only possible if the status is "Linked" (`"status": "200"`) or higher.
         *
         *     Linked invoices, credit notes or vouchers cannot be changed when the transaction is enshrined.
         *
         */
        put: operations["checkAccountTransactionEnshrine"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Contact/Factory/getNextCustomerNumber": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get next free customer number
         * @description Retrieves the next available customer number. Avoids duplicates.
         */
        get: operations["getNextCustomerNumber"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Contact/Factory/findContactsByCustomFieldValue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find contacts by custom field value
         * @description Returns an array of contacts having a certain custom field value set.
         */
        get: operations["findContactsByCustomFieldValue"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Contact/Mapper/checkCustomerNumberAvailability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check if a customer number is available
         * @description Checks if a given customer number is available or already used.
         */
        get: operations["contactCustomerNumberAvailabilityCheck"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Contact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve contacts
         * @description There are a multitude of parameter which can be used to filter.<br>
         *          A few of them are attached but
         *          for a complete list please check out <a href='#tag/Contact/How-to-filter-for-certain-contacts'>this</a> list
         */
        get: operations["getContacts"];
        put?: never;
        /**
         * Create a new contact
         * @description Creates a new contact.<br>
         *          For adding addresses and communication ways, you will need to use the ContactAddress and CommunicationWay endpoints.
         */
        post: operations["createContact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Contact/{contactId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find contact by ID
         * @description Returns a single contact
         */
        get: operations["getContactById"];
        /**
         * Update a existing contact
         * @description Update a contact
         */
        put: operations["updateContact"];
        post?: never;
        /** Deletes a contact */
        delete: operations["deleteContact"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Contact/{contactId}/getTabsItemCount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get number of all items
         * @description Get number of all invoices, orders, etc. of a specified contact
         */
        get: operations["getContactTabsItemCountById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ContactAddress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve contact addresses
         * @description Retrieve all contact addresses
         */
        get: operations["getContactAddresses"];
        put?: never;
        /**
         * Create a new contact address
         * @description Creates a new contact address.
         */
        post: operations["createContactAddress"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ContactAddress/{contactAddressId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find contact address by ID
         * @description Returns a single contact address
         */
        get: operations["contactAddressId"];
        /**
         * update a existing contact address
         * @description update a existing contact address.
         */
        put: operations["updateContactAddress"];
        post?: never;
        /** Deletes a contact address */
        delete: operations["deleteContactAddress"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CommunicationWay": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve communication ways
         * @description Returns all communication ways which have been added up until now. Filters can be added.
         */
        get: operations["getCommunicationWays"];
        put?: never;
        /**
         * Create a new contact communication way
         * @description Creates a new contact communication way.
         */
        post: operations["createCommunicationWay"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CommunicationWay/{communicationWayId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find communication way by ID
         * @description Returns a single communication way
         */
        get: operations["getCommunicationWayById"];
        /**
         * Update a existing communication way
         * @description Update a communication way
         */
        put: operations["UpdateCommunicationWay"];
        post?: never;
        /** Deletes a communication way */
        delete: operations["deleteCommunicationWay"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CommunicationWayKey": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve communication way keys
         * @description Returns all communication way keys.
         */
        get: operations["getCommunicationWayKeys"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/AccountingContact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve accounting contact
         * @description Returns all accounting contact which have been added up until now. Filters can be added.
         */
        get: operations["getAccountingContact"];
        put?: never;
        /**
         * Create a new accounting contact
         * @description Creates a new accounting contact.
         */
        post: operations["createAccountingContact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/AccountingContact/{accountingContactId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find accounting contact by ID
         * @description Returns a single accounting contac
         */
        get: operations["getAccountingContactById"];
        /**
         * Update an existing accounting contact
         * @description Attention, updating an existing AccountingContact can lead to **booking errors**, especially in the **DATEV export**.
         *     Compatibility of sevdesk with DATEV is no longer guaranteed.
         */
        put: operations["updateAccountingContact"];
        post?: never;
        /**
         * Deletes an accounting contact
         * @description Attention, deleting an existing AccountingContact can lead to **booking errors**, especially in the **DATEV export**.
         *     Compatibility of sevdesk with DATEV is no longer guaranteed.
         */
        delete: operations["deleteAccountingContact"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Textparser/fetchDictionaryEntriesByType": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Placeholders
         * @description Retrieve all Placeholders
         */
        get: operations["getPlaceholder"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ContactCustomField": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve contact fields
         * @description Retrieve all contact fields
         */
        get: operations["getContactFields"];
        put?: never;
        /**
         * Create contact field
         * @description Create contact field
         */
        post: operations["createContactField"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ContactCustomField/{contactCustomFieldId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve contact fields
         * @description Retrieve all contact fields
         */
        get: operations["getContactFieldsById"];
        /**
         * Update a contact field
         * @description Update a contact field
         */
        put: operations["updateContactfield"];
        post?: never;
        /** delete a contact field */
        delete: operations["deleteContactCustomFieldId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ContactCustomFieldSetting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve contact field settings
         * @description Retrieve all contact field settings
         */
        get: operations["getContactFieldSettings"];
        put?: never;
        /**
         * Create contact field setting
         * @description Create contact field setting
         */
        post: operations["createContactFieldSetting"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ContactCustomFieldSetting/{contactCustomFieldSettingId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find contact field setting by ID
         * @description Returns a single contact field setting
         */
        get: operations["getContactFieldSettingById"];
        /**
         * Update contact field setting
         * @description Update an existing contact field  setting
         */
        put: operations["updateContactFieldSetting"];
        post?: never;
        /** Deletes a contact field setting */
        delete: operations["deleteContactFieldSetting"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ContactCustomFieldSetting/{contactCustomFieldSettingId}/getReferenceCount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Receive count reference
         * @description Receive count reference
         */
        get: operations["getReferenceCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CreditNote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve CreditNote
         * @description There are a multitude of parameter which can be used to filter.
         */
        get: operations["getCreditNotes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CreditNote/Factory/saveCreditNote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new creditNote
         * @description The list of parameters starts with the credit note array.<br> This array contains all required attributes for a complete credit note.<br> Most of the attributes are covered in the credit note attribute list, there are only two parameters standing out, namely <b>mapAll</b> and <b>objectName</b>.<br> These are just needed for our system and you always need to provide them.<br> The list of parameters then continues with the credit note position array.<br> With this array you have the possibility to add multiple positions at once.<br> In the example it only contains one position, again together with the parameters <b>mapAll</b> and <b>objectName</b>, however, you can add more credit note positions by extending the array.<br> So if you wanted to add another position, you would add the same list of parameters with an incremented array index of "1" instead of "0".<br><br> The list ends with the five parameters creditNotePosDelete, discountSave, discountDelete, takeDefaultAddress and forCashRegister.<br> They only play a minor role if you only want to create a credit note but we will shortly explain what they can do.<br> With creditNotePosDelete you have to option to delete credit note positions as this request can also be used to update credit notes.<br> Both discount parameters are deprecated and have no use for credit notes, however they need to be provided in case you want to use the following two parameters.<br> With takeDefaultAddress you can specify that the first address of the contact you are using for the credit note is taken for the credit note address attribute automatically, so you don't need to provide the address yourself.<br> Finally, the forCashRegister parameter needs to be set to <b>true</b> if your credit note is to be booked on the cash register.<br> If you want to know more about these parameters, for example if you want to use this request to update credit notes, feel free to contact our support.<br> Finally, after covering all parameters, they only important information left, is that the order of the last five attributes always needs to be kept.<br> You will also always need to provide all of them, as otherwise the request won't work properly.
         */
        post: operations["createcreditNote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CreditNote/Factory/createFromInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Creates a new creditNote from an invoice
         * @description Use this endpoint to create a new creditNote from an invoice.
         */
        post: operations["createCreditNoteFromInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CreditNote/Factory/createFromVoucher": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Creates a new creditNote from a voucher
         * @description **Not supported with sevdesk-Update 2.0**
         *
         *     Use this endpoint to create a new creditNote from a voucher.
         *
         */
        post: operations["createCreditNoteFromVoucher"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CreditNote/{creditNoteId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find creditNote by ID
         * @description Returns a single creditNote
         */
        get: operations["getcreditNoteById"];
        /**
         * Update an existing creditNote
         * @description Update a creditNote
         */
        put: operations["updatecreditNote"];
        post?: never;
        /** Deletes an creditNote */
        delete: operations["deletecreditNote"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CreditNote/{creditNoteId}/sendByWithRender": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Send credit note by printing
         * @description Sending a credit note to end-customers is an important part of the bookkeeping process.<br> Depending on the way you want to send the credit note, you need to use different endpoints.<br> Let's start with just printing out the credit note, meaning we only need to render the pdf.
         */
        get: operations["sendCreditNoteByPrinting"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CreditNote/{creditNoteId}/sendBy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Mark credit note as sent
         * @description Marks an credit note as sent by a chosen send type.
         */
        put: operations["creditNoteSendBy"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CreditNote/{creditNoteId}/enshrine": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Enshrine
         * @description Sets the current date and time as a value for the property `enshrined`.<br>
         *     This operation is only possible if the status is "Open" (`"status": "200"`) or higher.
         *
         *     Enshrined credit notes cannot be changed. This operation cannot be undone.
         *
         */
        put: operations["creditNoteEnshrine"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CreditNote/{creditNoteId}/getPdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve pdf document of a credit note
         * @description Retrieves the pdf document of a credit note with additional metadata.
         */
        get: operations["creditNoteGetPdf"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CreditNote/{creditNoteId}/sendViaEmail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send credit note via email
         * @description This endpoint sends the specified credit note to a customer via email.<br>
         *         This will automatically mark the credit note as sent.<br>
         *         Please note, that in production an credit note is not allowed to be changed after this happened!
         */
        post: operations["sendCreditNoteViaEMail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CreditNote/{creditNoteId}/bookAmount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Book a credit note
         * @description Booking the credit note with a transaction is probably the most important part in the bookkeeping process.<br> There are several ways on correctly booking a credit note, all by using the same endpoint.<br> Conveniently, the booking process is exactly the same as the process for invoices and vouchers.<br> For this reason, you can have a look at it in the <a href='#tag/Invoice/How-to-book-an-invoice'>invoice chapter</a> and all you need to do is to change "Invoice" into "CreditNote" in the URL.
         */
        put: operations["bookCreditNote"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CreditNote/{creditNoteId}/resetToOpen": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Reset status to open
         * @description Resets the status "Open" (`"status": "200"`). Linked transactions will be unlinked.<br>
         *     This is not possible if the credit note itself or one of its transactions (CheckAccountTransaction) is already enshrined.
         *
         *     This endpoint cannot be used to increase the status to "Open" (`"status": "200"`).<br>
         *     Use [CreditNote/{creditNoteId}/sendBy](#tag/CreditNote/operation/creditNoteSendBy) / [CreditNote/{creditNoteId}/sendViaEmail](#tag/CreditNote/operation/sendCreditNoteViaEMail) instead.
         *
         */
        put: operations["creditNoteResetToOpen"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CreditNote/{creditNoteId}/resetToDraft": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Reset status to draft
         * @description Resets the status to "Draft" (`"status": "100"`).<br>
         *     This is only possible if the credit note has the status "Open" (`"status": "200"`).<br>
         *     If it has a higher status use [CreditNote/{creditNoteId}/resetToOpen](#tag/CreditNote/operation/creditNoteResetToOpen) first.
         *
         */
        put: operations["creditNoteResetToDraft"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CreditNotePos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve creditNote positions
         * @description Retrieve all creditNote positions depending on the filters defined in the query.
         */
        get: operations["getcreditNotePositions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/SevClient/{SevClientId}/updateExportConfig": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update export config
         * @description Update export config to export datev CSV
         */
        put: operations["updateExportConfig"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Export/datevCSV": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export datev
         * @description Datev export as zip with csv´s. Before you can perform the datev export, you must first set the "accountingYearBegin". To do this, you must use the <a href='#tag/Export/operation/updateExportConfig'>updateExportConfig</a> endpoint.
         */
        get: operations["exportDatev"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Export/invoiceCsv": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export invoice
         * @description Export all invoices as csv
         */
        get: operations["exportInvoice"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Export/invoiceZip": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export Invoice as zip
         * @description Export all invoices as zip
         */
        get: operations["exportInvoiceZip"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Export/creditNoteCsv": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export creditNote
         * @description Export all credit notes as csv
         */
        get: operations["exportCreditNote"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Export/voucherListCsv": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export voucher as zip
         * @description Export all vouchers as zip
         */
        get: operations["exportVoucher"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Export/transactionsCsv": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export transaction
         * @description Export all transactions as csv
         */
        get: operations["exportTransactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Export/voucherZip": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export voucher zip
         * @description export all vouchers as zip
         */
        get: operations["exportVoucherZip"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Export/contactListCsv": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export contact
         * @description Contact export as csv
         */
        get: operations["exportContact"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Part": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve parts
         * @description Retrieve all parts in your sevdesk inventory according to the applied filters.
         */
        get: operations["getParts"];
        put?: never;
        /**
         * Create a new part
         * @description Creates a part in your sevdesk inventory.
         */
        post: operations["createPart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Part/{partId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find part by ID
         * @description Returns a single part
         */
        get: operations["getPartById"];
        /**
         * Update an existing part
         * @description Update a part
         */
        put: operations["updatePart"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Part/{partId}/getStock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get stock of a part
         * @description Returns the current stock amount of the given part.
         */
        get: operations["partGetStock"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve invoices
         * @description There are a multitude of parameter which can be used to filter. A few of them are attached but
         *          for a complete list please check out <a href='#tag/Invoice/How-to-filter-for-certain-invoices'>this</a> list
         */
        get: operations["getInvoices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoice/Factory/saveInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new invoice
         * @description This endpoint offers you the following functionality.
         *          <ul>
         *             <li>Create invoices together with positions and discounts</li>
         *             <li>Delete positions while adding new ones</li>
         *             <li>Delete or add discounts, or both at the same time</li>
         *             <li>Automatically fill the address of the supplied contact into the invoice address</li>
         *          </ul>
         *          To make your own request sample slimmer, you can omit all parameters which are not required and nullable.
         *          However, for a valid and logical bookkeeping document, you will also need some of them to ensure that all the necessary data is in the invoice.<br><br> The list of parameters starts with the invoice array.<br> This array contains all required attributes for a complete invoice.<br> Most of the attributes are covered in the invoice attribute list, there are only two parameters standing out, namely <b>mapAll</b> and <b>objectName</b>.<br> These are just needed for our system and you always need to provide them.<br><br> The list of parameters then continues with the invoice position array.<br> With this array you have the possibility to add multiple positions at once.<br> In the example it only contains one position, again together with the parameters <b>mapAll</b> and <b>objectName</b>, however, you can add more invoice positions by extending the array.<br> So if you wanted to add another position, you would add the same list of parameters with an incremented array index of "1" instead of "0".<br><br> The list ends with the four parameters invoicePosDelete, discountSave, discountDelete and takeDefaultAddress.<br> They only play a minor role if you only want to create an invoice but we will shortly explain what they can do.<br> With invoicePosDelete you have to option to delete invoice positions as this request can also be used to update invoices.<br> With discountSave you can add discounts to your invoice.<br> With discountDelete you can delete discounts from your invoice.<br> With takeDefaultAddress you can specify that the first address of the contact you are using for the invoice is taken for the invoice address attribute automatically, so you don't need to provide the address yourself.<br> If you want to know more about these parameters, for example if you want to use this request to update invoices, feel free to contact our support.<br><br> Finally, after covering all parameters, they only important information left, is that the order of the last four attributes always needs to be kept.<br> You will also always need to provide all of them, as otherwise the request won't work properly.<br><br> <b>Warning:</b> You can not create a regular invoice with the <b>deliveryDate</b> being later than the <b>invoiceDate</b>.<br> To do that you will need to create a so called <b>Abschlagsrechnung</b> by setting the <b>invoiceType</b> parameter to <b>AR</b>.
         */
        post: operations["createInvoiceByFactory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoice/{invoiceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find invoice by ID
         * @description Returns a single invoice
         */
        get: operations["getInvoiceById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoice/{invoiceId}/getPositions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find invoice positions
         * @description Returns all positions of an invoice
         */
        get: operations["getInvoicePositionsById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoice/Factory/createInvoiceFromOrder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create invoice from order
         * @description Create an invoice from an order
         */
        post: operations["createInvoiceFromOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoice/Factory/createInvoiceReminder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create invoice reminder
         * @description Create an reminder from an invoice
         */
        post: operations["createInvoiceReminder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoice/{invoiceId}/getIsPartiallyPaid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check if an invoice is already partially paid
         * @description Returns 'true' if the given invoice is partially paid - 'false' if it is not.
         *         Invoices which are completely paid are regarded as not partially paid.
         */
        get: operations["getIsInvoicePartiallyPaid"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoice/{invoiceId}/cancelInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel an invoice / Create cancellation invoice
         * @description This endpoint will cancel the specified invoice therefor creating a cancellation invoice.<br>
         *          The cancellation invoice will be automatically paid and the source invoices status will change to 'cancelled'.
         */
        post: operations["cancelInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoice/{invoiceId}/render": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Render the pdf document of an invoice
         * @description Using this endpoint you can render the pdf document of an invoice.<br>
         *          Use cases for this are the retrieval of the pdf location or the forceful re-render of a already sent invoice.<br>
         *          Please be aware that changing an invoice after it has been sent to a customer is not an allowed bookkeeping process.
         */
        post: operations["invoiceRender"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoice/{invoiceId}/sendViaEmail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send invoice via email
         * @description This endpoint sends the specified invoice to a customer via email.<br>
         *         This will automatically mark the invoice as sent.<br>
         *         Please note, that in production an invoice is not allowed to be changed after this happened!
         */
        post: operations["sendInvoiceViaEMail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoice/{invoiceId}/getPdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve pdf document of an invoice
         * @description Retrieves the pdf document of an invoice with additional metadata.
         */
        get: operations["invoiceGetPdf"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoice/{invoiceId}/getXml": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve XML of an e-invoice
         * @description Retrieves the XML of an e-invoice
         */
        get: operations["invoiceGetXml"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoice/{invoiceId}/sendBy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Mark invoice as sent
         * @description Marks an invoice as sent by a chosen send type.
         */
        put: operations["invoiceSendBy"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoice/{invoiceId}/enshrine": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Enshrine
         * @description Sets the current date and time as a value for the property `enshrined`.<br>
         *     This operation is only possible if the status is "Open" (`"status": "200"`) or higher.
         *
         *     Enshrined invoices cannot be changed. This operation cannot be undone.
         *
         */
        put: operations["invoiceEnshrine"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoice/{invoiceId}/bookAmount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Book an invoice
         * @description Booking the invoice with a transaction is probably the most important part in the bookkeeping process.<br> There are several ways on correctly booking an invoice, all by using the same endpoint.<br> for more information look <a href='#tag/Invoice/How-to-book-an-invoice'>here</a>.
         */
        put: operations["bookInvoice"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoice/{invoiceId}/resetToOpen": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Reset status to open
         * @description Resets the status "Open" (`"status": "200"`). Linked transactions will be unlinked.<br>
         *     This is not possible if the invoice itself or one of its transactions (CheckAccountTransaction) is already enshrined.
         *
         *     This endpoint cannot be used to increase the status to "Open" (`"status": "200"`).<br>
         *     Use [Invoice/{invoiceId}/sendBy](#tag/Invoice/operation/invoiceSendBy) / [Invoice/{invoiceId}/sendViaEmail](#tag/Invoice/operation/sendInvoiceViaEMail) instead.
         *
         *     This endpoint cannot be used for recurring invoices (`"invoiceType": "WKR"`).
         *     Use [Invoice/Factory/saveInvoice](#tag/Invoice/operation/createInvoiceByFactory) instead.
         *
         */
        put: operations["invoiceResetToOpen"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoice/{invoiceId}/resetToDraft": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Reset status to draft
         * @description Resets the status to "Draft" (`"status": "100"`).<br>
         *     This is only possible if the invoice has the status "Open" (`"status": "200"`).<br>
         *     If it has a higher status use [Invoice/{invoiceId}/resetToOpen](#tag/Invoice/operation/invoiceResetToOpen) first.
         *
         *     This endpoint cannot be used for recurring invoices (`"invoiceType": "WKR"`).<br>
         *     Use [Invoice/Factory/saveInvoice](#tag/Invoice/operation/createInvoiceByFactory) instead.
         *
         */
        put: operations["invoiceResetToDraft"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/InvoicePos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve InvoicePos
         * @description There are a multitude of parameter which can be used to filter.
         */
        get: operations["getInvoicePos"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/DocServer/getLetterpapersWithThumb": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve letterpapers
         * @description Retrieve all letterpapers with Thumb
         */
        get: operations["getLetterpapersWithThumb"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/DocServer/getTemplatesWithThumb": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve templates
         * @description Retrieve all templates
         */
        get: operations["getTemplates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoice/{invoiceId}/changeParameter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update an invoice template
         * @description Update an existing invoice template
         */
        put: operations["updateInvoiceTemplate"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Order/{orderId}/changeParameter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update an order template
         * @description Update an existing order template
         */
        put: operations["updateOrderTemplate"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CreditNote/{creditNoteId}/changeParameter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update an of credit note template
         * @description Update an existing of credit note template
         */
        put: operations["updateCreditNoteTemplate"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve orders
         * @description There are a multitude of parameter which can be used to filter. A few of them are attached but
         *         for a complete list please check out <a href='#tag/Order/How-to-filter-for-certain-orders'>this</a> list
         */
        get: operations["getOrders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Order/Factory/saveOrder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new order
         * @description Creates an order to which positions can be added later.
         */
        post: operations["createOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Order/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find order by ID
         * @description Returns a single order
         */
        get: operations["getOrderById"];
        /**
         * Update an existing order
         * @description Update an order
         */
        put: operations["updateOrder"];
        post?: never;
        /** Deletes an order */
        delete: operations["deleteOrder"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Order/{orderId}/getPositions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find order positions
         * @description Returns all positions of an order
         */
        get: operations["getOrderPositionsById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Order/{orderId}/getDiscounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find order discounts
         * @description Returns all discounts of an order
         */
        get: operations["getDiscounts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Order/{orderId}/getRelatedObjects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find related objects
         * @description Get related objects of a specified order
         */
        get: operations["getRelatedObjects"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Order/{orderId}/sendViaEmail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send order via email
         * @description This endpoint sends the specified order to a customer via email.<br>
         *         This will automatically mark the order as sent.<br>
         *         Please note, that in production an order is not allowed to be changed after this happened!
         */
        post: operations["sendorderViaEMail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Order/Factory/createPackingListFromOrder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create packing list from order
         * @description Create packing list from order
         */
        post: operations["createPackingListFromOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Order/Factory/createContractNoteFromOrder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create contract note from order
         * @description Create contract note from order
         */
        post: operations["createContractNoteFromOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Order/{orderId}/getPdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve pdf document of an order
         * @description Retrieves the pdf document of an order with additional metadata and commit the order.
         */
        get: operations["orderGetPdf"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Order/{orderId}/sendBy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Mark order as sent
         * @description Marks an order as sent by a chosen send type.
         */
        put: operations["orderSendBy"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/OrderPos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve order positions
         * @description Retrieve all order positions depending on the filters defined in the query.
         */
        get: operations["getOrderPositions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/OrderPos/{orderPosId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find order position by ID
         * @description Returns a single order position
         */
        get: operations["getOrderPositionById"];
        /**
         * Update an existing order position
         * @description Update an order position
         */
        put: operations["updateOrderPosition"];
        post?: never;
        /** Deletes an order Position */
        delete: operations["deleteOrderPos"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Voucher/Factory/saveVoucher": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new voucher
         * @description Bundles the creation or updating of voucher and voucher position.<br> The list of parameters starts with the voucher model.<br> This contains all required attributes for a complete voucher.<br> Most of the attributes are covered in the voucher attribute list, there are only two parameters standing out, namely <b>mapAll</b> and <b>objectName</b>.<br> These are just needed for our system and you always need to provide them.<br><br> The list of parameters then continues with the voucher position array.<br> With this array you have the possibility to add multiple positions at once.<br> In the example it only contains one position, again together with the parameters <b>mapAll</b> and <b>objectName</b>, however, you can add more voucher positions by extending the array.<br> So if you wanted to add another position, you would add the same list of parameters with an incremented array index of \"1\" instead of \"0\".<br><br> The list ends with the two parameters voucherPosDelete and filename.<br> We will shortly explain what they can do.<br> With voucherPosDelete you can delete voucher positions as this request can also be used to update draft vouchers.<br> With filename you can attach a file to the voucher.<br> For most of our customers this is a really important step, as they need to digitize their receipts.<br> Finally, after covering all parameters, the only important information left, is that the order of the last two attributes always needs to be kept. <br><br> The only valid status values for this endpoint are 50 (draft) and 100 (open). You can only update draft vouchers. If you have to, you can downgrade the status by calling resetToOpen (from paid) and resetToDraft (from open).
         */
        post: operations["voucherFactorySaveVoucher"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Voucher/Factory/uploadTempFile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload voucher file
         * @description To attach a document to a voucher, you will need to upload it first for later use.<br> To do this, you can use this request.<br> When you successfully uploaded the file, you will get a sevdesk internal filename in the response.<br> The filename will be a hash generated from your uploaded file. You will need it in the next request!<br> After you got the just mentioned filename, you can enter it as a value for the filename parameter of the saveVoucher request.<br> If you provided all necessary parameters and kept all of them in the right order, the file will be attached to your voucher.
         */
        post: operations["voucherUploadFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Voucher": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve vouchers
         * @description There are a multitude of parameter which can be used to filter. A few of them are attached but
         *         for a complete list please check out <a href='#tag/Voucher/How-to-filter-for-certain-vouchers'>this</a> list
         */
        get: operations["getVouchers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Voucher/{voucherId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find voucher by ID
         * @description Returns a single voucher
         */
        get: operations["getVoucherById"];
        /**
         * Update an existing voucher
         * @description Update a draft voucher using this method if you want to change simple values like the description. Complex changes like adding a position should use /Voucher/Factory/saveVoucher.<br> You can not change the status using this endpoint.
         */
        put: operations["updateVoucher"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Voucher/{voucherId}/enshrine": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Enshrine
         * @description Sets the current date and time as a value for the property `enshrined`.<br>
         *     This operation is only possible if the status is "Open" (`"status": "100"`) or higher.
         *
         *     Enshrined vouchers cannot be changed. This operation cannot be undone.
         *
         */
        put: operations["voucherEnshrine"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Voucher/{voucherId}/bookAmount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Book a voucher
         * @description Booking the voucher with a transaction is probably the most important part in the bookkeeping process.<br> There are several ways on correctly booking a voucher, all by using the same endpoint.<br> Conveniently, the booking process is exactly the same as the process for invoices.<br> For this reason, you can have a look at it <a href='#tag/Voucher/How-to-filter-for-certain-vouchers'>here</a> and all you need to to is to change "Invoice" into "Voucher" in the URL.
         */
        put: operations["bookVoucher"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Voucher/{voucherId}/resetToOpen": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Reset status to open
         * @description Resets the status to "Open" (`"status": "100"`). Linked payments will be unlinked. Created asset depreciation will be reset.<br>
         *     This is not possible if the voucher is already enshrined!
         *
         *     This endpoint can not be used to increase the status from "Draft" to "Open".<br>
         *     You can only change the status from higher to lower ("Open" to "Draft").<br>
         *     To change to higher status use [Voucher/{voucherId}/bookAmount](#tag/Voucher/operation/bookVoucher).
         *     To change to lower status use [Voucher/{voucherId}/resetToDraft](#tag/Voucher/operation/voucherResetToDraft).
         *
         */
        put: operations["voucherResetToOpen"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Voucher/{voucherId}/resetToDraft": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Reset status to draft
         * @description Resets the status "Draft" (`"status": "50"`). Linked payments will be unlinked. Created asset depreciation will be reset.<br>
         *     This is not possible if the voucher is already enshrined!
         *
         *     You can only change the status from higher to lower ("Open" to "Draft").<br>
         *     To change to higher status use [/Voucher/Factory/saveVoucher](#tag/Voucher/operation/voucherFactorySaveVoucher).
         *
         */
        put: operations["voucherResetToDraft"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/VoucherPos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve voucher positions
         * @description Retrieve all voucher positions depending on the filters defined in the query.
         */
        get: operations["getVoucherPositions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ReceiptGuidance/forAllAccounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all account guides
         * @description You can use this endpoint to help you decide which accounts you can use when creating a voucher
         */
        get: operations["forAllAccounts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ReceiptGuidance/forAccountNumber": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get guidance by account number
         * @description You can use this endpoint to get additional information about the account that you may want to use.
         */
        get: operations["forAccountNumber"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ReceiptGuidance/forTaxRule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get guidance by Tax Rule
         * @description You can use this endpoint to get additional information about the tax rule (for example, USTPFL_UMS_EINN) that you may want to use.
         */
        get: operations["forTaxRule"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ReceiptGuidance/forRevenue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get guidance for revenue accounts
         * @description Provides all possible combinations for revenue accounts to be used with revenue receipts/vouchers.
         */
        get: operations["forRevenue"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ReceiptGuidance/forExpense": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get guidance for expense accounts
         * @description Provides all possible combinations for expense accounts to be used with expense receipts/vouchers.
         */
        get: operations["forExpense"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Report/invoicelist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export invoice list
         * @description Export invoice list
         */
        get: operations["reportInvoice"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Report/orderlist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export order list
         * @description Export order list
         */
        get: operations["reportOrder"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Report/contactlist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export contact list
         * @description Export contact list
         */
        get: operations["reportContact"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Report/voucherlist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export voucher list
         * @description Export voucher list
         */
        get: operations["reportVoucher"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Tag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve tags
         * @description Retrieve all tags
         */
        get: operations["getTags"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Tag/{tagId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find tag by ID
         * @description Returns a single tag
         */
        get: operations["getTagById"];
        /**
         * Update tag
         * @description Update an existing tag
         */
        put: operations["updateTag"];
        post?: never;
        /** Deletes a tag */
        delete: operations["deleteTag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Tag/Factory/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new tag
         * @description Create a new tag
         */
        post: operations["createTag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/TagRelation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve tag relations
         * @description Retrieve all tag relations
         */
        get: operations["getTagRelations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * CheckAccount model
         * @description CheckAccount model. Responsible for the payment accounts.
         */
        Model_CheckAccountResponse: {
            /**
             * @description The check account id
             * @example 2
             */
            readonly id?: string;
            /**
             * @description The check account object name
             * @example CheckAccount
             */
            readonly objectName?: string;
            /**
             * Format: date-time
             * @description Date of check account creation
             * @example 2024-06-28T14:42:58+02:00
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last check account update
             * @example 2024-06-28T14:42:58+02:00
             */
            readonly update?: string;
            /** @description Client to which check account belongs. Will be filled automatically */
            readonly sevClient?: {
                /**
                 * @description Unique identifier of the client
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'SevClient'
                 * @example SevClient
                 */
                objectName: string;
            };
            /**
             * @description Name of the check account
             * @example Iron Bank
             */
            name?: string;
            /**
             * @description The IBAN of the account
             * @example DE02100500000054540402
             */
            iban?: string | null;
            /**
             * @description The type of the check account. Account with a CSV or MT940 import are regarded as online.<br>
             *          Apart from that, created check accounts over the API need to be offline, as online accounts with an active connection
             *          to a bank application can not be managed over the API.
             * @example online
             * @enum {string}
             */
            type?: "online" | "offline";
            /**
             * @description Import type, for accounts that are type "online" but not connected to a data provider. Transactions can be imported by this method on the check account.
             * @example CSV
             * @enum {string|null}
             */
            importType?: "CSV" | "MT940" | null;
            /**
             * @description The currency of the check account.
             * @example EUR
             */
            currency?: string;
            /**
             * @description Defines if this check account is the default account.
             * @default 0
             */
            defaultAccount: string;
            /**
             * @description Status of the check account. 0 <-> Archived - 100 <-> Active
             * @default 100
             * @example 100
             * @enum {string}
             */
            status: "0" | "100";
            /**
             * @description Bank server of check account, only set if the account is connected to a data provider
             * @example FINAPI
             */
            bankServer?: string | null;
            /**
             * @description Defines if transactions on this account are automatically mapped to invoice and vouchers when imported if possible.
             * @default 1
             */
            autoMapTransactions: string;
            /**
             * @description The booking account used for this bank account, e.g. 1800 in SKR04 and 1200 in SKR03. Must be unique among all your CheckAccounts. Ignore to use a sensible default.
             * @example 1800
             */
            accountingNumber?: string;
        };
        /**
         * CheckAccount model
         * @description CheckAccount model. Responsible for the payment accounts.
         */
        Model_CheckAccount: {
            /** @description The check account id */
            readonly id?: number;
            /** @description The check account object name */
            readonly objectName?: string;
            /**
             * Format: date-time
             * @description Date of check account creation
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last check account update
             */
            readonly update?: string;
            /** @description Client to which check account belongs. Will be filled automatically */
            readonly sevClient?: {
                /** @description Unique identifier of the client */
                id: number;
                /** @description Model name, which is 'SevClient' */
                objectName: string;
            };
            /**
             * @description Name of the check account
             * @example Iron Bank
             */
            name: string;
            /**
             * @description The type of the check account. Account with a CSV or MT940 import are regarded as online.<br>
             *          Apart from that, created check accounts over the API need to be offline, as online accounts with an active connection
             *          to a bank application can not be managed over the API.
             * @example online
             * @enum {string}
             */
            type: "online" | "offline";
            /**
             * @description Import type. Transactions can be imported by this method on the check account.
             * @example CSV
             * @enum {string|null}
             */
            importType?: "CSV" | "MT940" | null;
            /**
             * @description The currency of the check account.
             * @example EUR
             */
            currency: string;
            /**
             * @description Defines if this check account is the default account.
             * @default 0
             * @enum {integer}
             */
            defaultAccount: 0 | 1;
            /**
             * @description Status of the check account. 0 <-> Archived - 100 <-> Active
             * @default 100
             * @enum {integer}
             */
            status: 0 | 100;
            /** @description Bank server of check account */
            readonly bankServer?: string;
            /**
             * @description Defines if transactions on this account are automatically mapped to invoice and vouchers when imported if possible.
             * @default 1
             */
            autoMapTransactions: number;
            /** @description The booking account used for this bank account, e.g. 1800 in SKR04 and 1200 in SKR03. Must be unique among all your CheckAccounts. Ignore to use a sensible default. */
            accountingNumber?: string;
        };
        /** Data to create a file import account */
        createFileImportAccount: {
            /**
             * @description Name of the check account
             * @example Iron Bank
             */
            name?: string;
            /**
             * @description Import type. Transactions can be imported by this method on the check account.
             * @example CSV
             * @enum {string}
             */
            importType?: "CSV" | "MT940";
            /**
             * @description The booking account used for this bank account, e.g. 1800 in SKR04 and 1200 in SKR03. Must be unique among all your CheckAccounts. Ignore to use a sensible default.
             * @example 1800
             */
            accountingNumber?: number | null;
            /**
             * @description IBAN of the bank account, without spaces
             * @example DE02100500000054540402
             */
            iban?: string | null;
        };
        /**
         * CheckAccount model
         * @description CheckAccount model. Showing the properties relevant to file import accounts.
         */
        createFileImportAccountResponse: {
            /**
             * @description The check account id
             * @example 2
             */
            id?: string;
            /**
             * @description The check account object name, always 'CheckAccount'
             * @example CheckAccount
             */
            objectName?: string;
            /**
             * Format: date-time
             * @description Date of check account creation
             * @example 2024-06-28T14:42:58+02:00
             */
            create?: string;
            /**
             * Format: date-time
             * @description Date of last check account update
             * @example 2024-06-28T14:42:58+02:00
             */
            update?: string;
            /** @description Client to which check account belongs. Will be filled automatically */
            sevClient?: {
                /**
                 * @description Unique identifier of the client
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'SevClient'
                 * @example SevClient
                 */
                objectName: string;
            };
            /**
             * @description Name of the check account
             * @example Iron Bank
             */
            name?: string;
            /**
             * @description The IBAN of the account
             * @example DE02100500000054540402
             */
            iban?: string | null;
            /**
             * @description The type of the check account. Account with a CSV or MT940 import are regarded as online.
             * @example online
             * @enum {string}
             */
            type?: "online" | "offline";
            /**
             * @description Import type, for accounts that are type "online" but not connected to a data provider. Transactions can be imported by this method on the check account.
             * @example CSV
             * @enum {string}
             */
            importType?: "CSV" | "MT940";
            /**
             * @description The currency of the check account.
             * @example EUR
             */
            currency?: string;
            /**
             * @description Defines if this check account is the default account.
             * @default 0
             * @enum {string}
             */
            defaultAccount: "0" | "1";
            /**
             * @description Status of the check account. 0 <-> Archived - 100 <-> Active
             * @default 100
             * @example 100
             * @enum {string}
             */
            status: "0" | "100";
            /**
             * @description Defines if transactions on this account are automatically mapped to invoice and vouchers when imported if possible.
             * @default 1
             * @enum {string}
             */
            autoMapTransactions: "0" | "1";
            /**
             * @description The booking account used for this bank account, e.g. 1800 in SKR04 and 1200 in SKR03. Must be unique among all your CheckAccounts. Ignore to use a sensible default.
             * @example 1800
             */
            accountingNumber?: string;
        };
        /** Data to create a clearing account */
        createClearingAccount: {
            /**
             * @description Name of the check account
             * @example Coupons
             */
            name?: string;
            /** @description The booking account used for this clearing account, e.g. 3320 in SKR04 and 1723 in SKR03. Must be unique among all your CheckAccounts. Ask your tax consultant what to choose. */
            accountingNumber?: number | null;
        };
        /**
         * CheckAccount model
         * @description CheckAccount model. Showing the properties relevant to clearing accounts.
         */
        createClearingAccountResponse: {
            /**
             * @description The check account id
             * @example 2
             */
            id?: string;
            /**
             * @description The check account object name, always 'CheckAccount'
             * @example CheckAccount
             */
            objectName?: string;
            /**
             * Format: date-time
             * @description Date of check account creation
             * @example 2024-06-28T14:42:58+02:00
             */
            create?: string;
            /**
             * Format: date-time
             * @description Date of last check account update
             * @example 2024-06-28T14:42:58+02:00
             */
            update?: string;
            /** @description Client to which check account belongs. Will be filled automatically */
            sevClient?: {
                /**
                 * @description Unique identifier of the client
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'SevClient'
                 * @example SevClient
                 */
                objectName: string;
            };
            /**
             * @description Name of the check account
             * @example Coupons
             */
            name?: string;
            /**
             * @description The type of the check account. Clearing accounts are regarded as offline.
             * @example offline
             * @enum {string}
             */
            type?: "online" | "offline";
            /**
             * @description The currency of the check account.
             * @example EUR
             */
            currency?: string;
            /**
             * @description Defines if this check account is the default account.
             * @default 0
             * @enum {string}
             */
            defaultAccount: "0" | "1";
            /**
             * @description Status of the check account. 0 <-> Archived - 100 <-> Active
             * @default 100
             * @example 100
             * @enum {string}
             */
            status: "0" | "100";
            /**
             * @description The booking account used for this clearing account.
             * @example 3320
             */
            accountingNumber?: string;
        };
        /**
         * CheckAccount model
         * @description CheckAccount model. Responsible for the payment accounts.
         */
        Model_CheckAccountUpdate: {
            /**
             * @description Name of the check account
             * @example Iron Bank
             */
            name?: string;
            /**
             * @description The type of the check account. Account with a CSV or MT940 import are regarded as online.<br>
             *          Apart from that, created check accounts over the API need to be offline, as online accounts with an active connection
             *          to a bank application can not be managed over the API.
             * @example online
             * @enum {string}
             */
            type?: "online" | "offline";
            /**
             * @description Import type. Transactions can be imported by this method on the check account.
             * @example CSV
             * @enum {string|null}
             */
            importType?: "CSV" | "MT940" | null;
            /**
             * @description The currency of the check account.
             * @example EUR
             */
            currency?: string;
            /**
             * @description Defines if this check account is the default account.
             * @default 0
             * @enum {integer}
             */
            defaultAccount: 0 | 1;
            /**
             * @description Status of the check account. 0 <-> Archived - 100 <-> Active
             * @default 100
             * @enum {integer}
             */
            status: 0 | 100;
            /**
             * @description Defines if transactions on this account are automatically mapped to invoice and vouchers when imported if possible.
             * @default 1
             */
            autoMapTransactions: number;
            /** @description The booking account used for this bank account, e.g. 1800 in SKR04 and 1200 in SKR03. Must be unique among all your CheckAccounts. Ignore to use a sensible default. */
            accountingNumber?: string;
        };
        /**
         * CheckAccountTransaction model
         * @description CheckAccountTransaction model. Responsible for the transactions on payment accounts.
         */
        Model_CheckAccountTransactionResponse: {
            /**
             * @description The check account transaction id
             * @example 0
             */
            readonly id?: string;
            /**
             * @description The check account transaction object name
             * @example CheckAccountTransaction
             */
            readonly objectName?: string;
            /**
             * Format: date-time
             * @description Date of check account transaction creation
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last check account transaction update
             */
            readonly update?: string;
            /** @description Client to which check account transaction belongs. Will be filled automatically */
            readonly sevClient?: {
                /**
                 * @description Unique identifier of the client
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'SevClient'
                 * @example SevClient
                 */
                objectName: string;
            };
            /**
             * Format: date-time
             * @description Date the check account transaction was imported
             * @example 2024-05-10T00:00:00+02:00
             */
            valueDate?: string;
            /**
             * Format: date-time
             * @description Date the check account transaction was booked
             * @example 2024-05-10T00:00:00+02:00
             */
            entryDate?: string | null;
            /**
             * @description The purpose of the transaction
             * @example salary
             */
            paymtPurpose?: string | null;
            /**
             * @description Amount of the transaction
             * @example -100.32
             */
            amount?: string;
            /**
             * @description Name of the other party
             * @example Cercei Lannister
             */
            payeePayerName?: string | null;
            /** @description IBAN or account number of the other party */
            payeePayerAcctNo?: string | null;
            /** @description BIC or bank code of the other party */
            payeePayerBankCode?: string | null;
            /** @description The check account to which the transaction belongs */
            readonly checkAccount?: {
                /**
                 * @description Unique identifier of the check account
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'CheckAccount'
                 * @example CheckAccount
                 */
                objectName: string;
            };
            /**
             * @description Status of the check account transaction.<br>
             *          100 <-> Created<br>
             *          200 <-> Linked<br>
             *          300 <-> Private<br>
             *          400 <-> Booked
             * @enum {string}
             */
            readonly status?: "100" | "200" | "300" | "400";
            /** @description The check account transaction serving as the source of the rebooking */
            readonly sourceTransaction?: {
                /**
                 * @description Unique identifier of the check account transaction
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'CheckAccountTransaction'
                 * @example CheckAccountTransaction
                 */
                objectName: string;
            };
            /** @description The check account transaction serving as the target of the rebooking */
            readonly targetTransaction?: {
                /**
                 * @description Unique identifier of the check account transaction
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'CheckAccountTransaction'
                 * @default CheckAccountTransaction
                 */
                objectName: string;
            };
            /**
             * Format: date-time
             * @description Can only be set via [CheckAccountTransaction/{checkAccountTransactionId}/enshrine](#tag/CheckAccountTransaction/operation/checkAccountTransactionEnshrine)
             *
             */
            readonly enshrined?: string;
        };
        /**
         * CheckAccountTransaction model
         * @description CheckAccountTransaction model. Responsible for the transactions on payment accounts.
         */
        Model_CheckAccountTransaction: {
            /** @description The check account transaction id */
            readonly id?: number;
            /** @description The check account transaction object name */
            readonly objectName?: string;
            /**
             * Format: date-time
             * @description Date of check account transaction creation
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last check account transaction update
             */
            readonly update?: string;
            /** @description Client to which check account transaction belongs. Will be filled automatically */
            readonly sevClient?: {
                /** @description Unique identifier of the client */
                id: number;
                /** @description Model name, which is 'SevClient' */
                objectName: string;
            };
            /**
             * Format: date-time
             * @description Date the check account transaction was booked
             * @example 2024-05-10T00:00:00+02:00
             */
            valueDate: string;
            /**
             * Format: date-time
             * @description Date the check account transaction was imported
             * @example 2024-05-10T00:00:00+02:00
             */
            entryDate?: string | null;
            /**
             * @description The purpose of the transaction
             * @example salary
             */
            paymtPurpose?: string | null;
            /**
             * Format: float
             * @description Amount of the transaction
             * @example 100.1
             */
            amount: number;
            /**
             * @description Name of the other party
             * @example Cercei Lannister
             */
            payeePayerName: string | null;
            /** @description IBAN or account number of the other party */
            payeePayerAcctNo?: string | null;
            /** @description BIC or bank code of the other party */
            payeePayerBankCode?: string | null;
            /** @description The check account to which the transaction belongs */
            checkAccount: {
                /** @description Unique identifier of the check account */
                id: number;
                /**
                 * @description Model name, which is 'CheckAccount'
                 * @default CheckAccount
                 */
                objectName: string;
            };
            /**
             * @description Status of the check account transaction.<br>
             *          100 <-> Created<br>
             *          200 <-> Linked<br>
             *          300 <-> Private<br>
             *          400 <-> Booked
             * @enum {integer}
             */
            status: 100 | 200 | 300 | 400;
            /** @description The check account transaction serving as the source of the rebooking */
            sourceTransaction?: {
                /** @description Unique identifier of the check account transaction */
                id: number;
                /**
                 * @description Model name, which is 'CheckAccountTransaction'
                 * @default CheckAccountTransaction
                 */
                objectName: string;
            } | null;
            /** @description The check account transaction serving as the target of the rebooking */
            targetTransaction?: {
                /** @description Unique identifier of the check account transaction */
                id: number;
                /**
                 * @description Model name, which is 'CheckAccountTransaction'
                 * @default CheckAccountTransaction
                 */
                objectName: string;
            } | null;
        };
        /**
         * CheckAccountTransaction model
         * @description CheckAccountTransaction model. Responsible for the transactions on payment accounts.
         */
        Model_CheckAccountTransactionUpdate: {
            /**
             * Format: date-time
             * @description Date the check account transaction was booked
             * @example 2024-05-10T00:00:00+02:00
             */
            valueDate?: string;
            /**
             * Format: date-time
             * @description Date the check account transaction was imported
             * @example 2024-05-10T00:00:00+02:00
             */
            entryDate?: string | null;
            /**
             * @description the purpose of the transaction
             * @example salary
             */
            paymtPurpose?: string;
            /**
             * Format: float
             * @description Amount of the transaction
             * @example 100
             */
            amount?: number | null;
            /**
             * @description Name of the payee/payer
             * @example Cercei Lannister
             */
            payeePayerName?: string | null;
            /** @description The check account to which the transaction belongs */
            checkAccount?: {
                /** @description Unique identifier of the check account */
                id: number;
                /**
                 * @description Model name, which is 'CheckAccount'
                 * @default CheckAccount
                 */
                objectName: string;
            };
            /**
             * @description Status of the check account transaction.<br>
             *          100 <-> Created<br>
             *          200 <-> Linked<br>
             *          300 <-> Private<br>
             *          400 <-> Booked
             * @enum {integer}
             */
            status?: 100 | 200 | 300 | 400;
            /** @description The check account transaction serving as the source of the rebooking */
            sourceTransaction?: {
                /** @description Unique identifier of the check account transaction */
                id: number;
                /**
                 * @description Model name, which is 'CheckAccountTransaction'
                 * @default CheckAccountTransaction
                 */
                objectName: string;
            } | null;
            /** @description The check account transaction serving as the target of the rebooking */
            targetTransaction?: {
                /** @description Unique identifier of the check account transaction */
                id: number;
                /**
                 * @description Model name, which is 'CheckAccountTransaction'
                 * @default CheckAccountTransaction
                 */
                objectName: string;
            } | null;
        };
        validationError: {
            error?: {
                message?: string;
                /** @description An identifier of this exact problem that can be given to the support team. */
                exceptionUUID?: string;
            };
        };
        /**
         * Contact model
         * @description Contact model
         */
        Model_ContactResponse: {
            /**
             * @description The contact id
             * @example 0
             */
            readonly id?: string;
            /**
             * @description The contact object name
             * @example Contact
             */
            readonly objectName?: string;
            /**
             * Format: date-time
             * @description Date of contact creation
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last contact update
             */
            readonly update?: string;
            /**
             * @description The organization name.<br>
             *     Be aware that the type of contact will depend on this attribute.<br>
             *     If it holds a value, the contact will be regarded as an organization.
             * @example string
             */
            readonly name?: string;
            /**
             * @description Defines the status of the contact. 100 <-> Lead - 500 <-> Pending - 1000 <-> Active.
             * @example 100
             */
            readonly status?: string;
            /**
             * @description The customer number
             * @example Customer-1337
             */
            readonly customerNumber?: string;
            /** @description The parent contact to which this contact belongs. Must be an organization. */
            readonly parent?: {
                /**
                 * @description Unique identifier of the parent contact
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'Contact'
                 * @example Contact
                 */
                objectName: string;
            };
            /**
             * @description The <b>first</b> name of the contact.<br>
             *     Yeah... not quite right in literally every way. We know.<br>
             *     Not to be used for organizations.
             * @example John
             */
            readonly surename?: string;
            /**
             * @description The last name of the contact.<br>
             *     Not to be used for organizations.
             * @example Snow
             */
            readonly familyname?: string;
            /**
             * @description A non-academic title for the contact.
             *     Not to be used for organizations.
             * @example Commander
             */
            readonly titel?: string;
            /** @description Category of the contact.<br> For more information,
             *          see <a href='https://my.sevdesk.de/apiOverview/index.html#/doc-contacts#types'>here</a>. */
            readonly category?: {
                /**
                 * @description Unique identifier of the category
                 * @example 3
                 */
                id: string;
                /**
                 * @description Model name, which is 'Category'
                 * @example Category
                 */
                objectName: string;
            };
            /**
             * @description A description for the contact.
             * @example Rightful king of the seven kingdoms
             */
            readonly description?: string;
            /** @description A academic title for the contact.
             *     Not to be used for organizations. */
            readonly academicTitle?: string;
            /** @description Gender of the contact.<br>
             *     Not to be used for organizations. */
            readonly gender?: string;
            /** @description Client to which contact belongs. Will be filled automatically */
            readonly sevClient?: {
                /**
                 * @description Unique identifier of the client
                 * @example 0
                 */
                id: number;
                /**
                 * @description Model name, which is 'SevClient'
                 * @example SevClient
                 */
                objectName: string;
            };
            /**
             * @description Second name of the contact.<br>
             *     Not to be used for organizations.
             * @example Targaryen
             */
            readonly name2?: string;
            /**
             * Format: date
             * @description Birthday of the contact.<br>
             *     Not to be used for organizations.
             */
            readonly birthday?: string;
            /** @description Vat number of the contact. */
            readonly vatNumber?: string;
            /** @description Bank account number (IBAN) of the contact. */
            readonly bankAccount?: string;
            /** @description Bank number of the bank used by the contact. */
            readonly bankNumber?: string;
            /**
             * @description Absolute time in days which the contact has to pay his invoices and subsequently get a cashback.
             * @example string
             */
            readonly defaultCashbackTime?: string;
            /**
             * Format: float
             * @description Percentage of the invoice sum the contact gets back if he paid invoices in time.
             * @example string
             */
            readonly defaultCashbackPercent?: string;
            /**
             * @description The payment goal in days which is set for every invoice of the contact.
             * @example string
             */
            readonly defaultTimeToPay?: string;
            /** @description The tax number of the contact. */
            readonly taxNumber?: string;
            /**
             * @description The tax office of the contact (only for greek customers).
             * @example string
             */
            readonly taxOffice?: string;
            /**
             * @description Defines if the contact is freed from paying vat.
             * @example false
             */
            readonly exemptVat?: string;
            /**
             * Format: float
             * @description The default discount the contact gets for every invoice.<br>
             *     Depending on defaultDiscountPercentage attribute, in percent or absolute value.
             * @example string
             */
            readonly defaultDiscountAmount?: string;
            /**
             * @description Defines if the discount is a percentage (true) or an absolute value (false).
             * @example false
             */
            readonly defaultDiscountPercentage?: string;
            /**
             * @description Buyer reference of the contact.
             * @example string
             */
            readonly buyerReference?: string;
            /**
             * @description Defines whether the contact is a government agency (true) or not (false).
             * @example false
             */
            readonly governmentAgency?: string;
            /**
             * @deprecated
             * @description Additional information stored for the contact.
             * @example string
             */
            readonly additionalInformation?: string;
        };
        /**
         * Contact model
         * @description Contact model
         */
        Model_Contact: {
            /** @description The organization name.<br>
             *     Be aware that the type of contact will depend on this attribute.<br>
             *     If it holds a value, the contact will be regarded as an organization. */
            name?: string | null;
            /**
             * @description Defines the status of the contact. 100 <-> Lead - 500 <-> Pending - 1000 <-> Active.
             * @default 100
             */
            status: number;
            /**
             * @description The customer number
             * @example Customer-1337
             */
            customerNumber?: string | null;
            /** @description The parent contact to which this contact belongs. Must be an organization. */
            parent?: {
                /** @description Unique identifier of the parent contact */
                id: number;
                /**
                 * @description Model name, which is 'Contact'
                 * @example Contact
                 */
                objectName: string;
            } | null;
            /**
             * @description The <b>first</b> name of the contact.<br>
             *     Yeah... not quite right in literally every way. We know.<br>
             *     Not to be used for organizations.
             * @example John
             */
            surename?: string | null;
            /**
             * @description The last name of the contact.<br>
             *     Not to be used for organizations.
             * @example Snow
             */
            familyname?: string | null;
            /**
             * @description A non-academic title for the contact.
             *     Not to be used for organizations.
             * @example Commander
             */
            titel?: string | null;
            /** @description Category of the contact.<br> For more information,
             *          see <a href='https://my.sevdesk.de/apiOverview/index.html#/doc-contacts#types'>here</a>. */
            category: {
                /**
                 * @description Unique identifier of the category
                 * @example 3
                 */
                id: number;
                /**
                 * @description Model name, which is 'Category'
                 * @example Category
                 */
                objectName: string;
            };
            /**
             * @description A description for the contact.
             * @example Rightful king of the seven kingdoms
             */
            description?: string | null;
            /** @description A academic title for the contact.
             *     Not to be used for organizations. */
            academicTitle?: string | null;
            /** @description Gender of the contact.<br>
             *     Not to be used for organizations. */
            gender?: string | null;
            /**
             * @description Second name of the contact.<br>
             *     Not to be used for organizations.
             * @example Targaryen
             */
            name2?: string | null;
            /**
             * Format: date
             * @description Birthday of the contact.<br>
             *     Not to be used for organizations.
             */
            birthday?: string | null;
            /** @description Vat number of the contact. */
            vatNumber?: string | null;
            /** @description Bank account number (IBAN) of the contact. */
            bankAccount?: string | null;
            /** @description Bank number of the bank used by the contact. */
            bankNumber?: string | null;
            /** @description Absolute time in days which the contact has to pay his invoices and subsequently get a cashback. */
            defaultCashbackTime?: number | null;
            /**
             * Format: float
             * @description Percentage of the invoice sum the contact gets back if he paid invoices in time.
             */
            defaultCashbackPercent?: number | null;
            /** @description The payment goal in days which is set for every invoice of the contact. */
            defaultTimeToPay?: number | null;
            /** @description The tax number of the contact. */
            taxNumber?: string | null;
            /** @description The tax office of the contact (only for greek customers). */
            taxOffice?: string | null;
            /** @description Defines if the contact is freed from paying vat. */
            exemptVat?: boolean | null;
            /**
             * Format: float
             * @description The default discount the contact gets for every invoice.<br>
             *     Depending on defaultDiscountPercentage attribute, in percent or absolute value.
             */
            defaultDiscountAmount?: number | null;
            /** @description Defines if the discount is a percentage (true) or an absolute value (false). */
            defaultDiscountPercentage?: boolean | null;
            /** @description Buyer reference of the contact. */
            buyerReference?: string | null;
            /** @description Defines whether the contact is a government agency (true) or not (false). */
            governmentAgency?: boolean | null;
        };
        /**
         * Contact model
         * @description Contact model
         */
        Model_ContactUpdate: {
            /** @description The organization name.<br>
             *     Be aware that the type of contact will depend on this attribute.<br>
             *     If it holds a value, the contact will be regarded as an organization. */
            name?: string | null;
            /**
             * @description Defines the status of the contact. 100 <-> Lead - 500 <-> Pending - 1000 <-> Active.
             * @default 100
             */
            status: number;
            /**
             * @description The customer number
             * @example Customer-1337
             */
            customerNumber?: string | null;
            /** @description The parent contact to which this contact belongs. Must be an organization. */
            parent?: {
                /** @description Unique identifier of the parent contact */
                id: number;
                /** @description Model name, which is 'Contact' */
                objectName: string;
            } | null;
            /**
             * @description The <b>first</b> name of the contact.<br>
             *     Yeah... not quite right in literally every way. We know.<br>
             *     Not to be used for organizations.
             * @example John
             */
            surename?: string | null;
            /**
             * @description The last name of the contact.<br>
             *     Not to be used for organizations.
             * @example Snow
             */
            familyname?: string | null;
            /**
             * @description A non-academic title for the contact.
             *     Not to be used for organizations.
             * @example Commander
             */
            titel?: string | null;
            /** @description Category of the contact.<br> For more information,
             *          see <a href='https://my.sevdesk.de/apiOverview/index.html#/doc-contacts#types'>here</a>. */
            category?: {
                /**
                 * @description Unique identifier of the category
                 * @example 3
                 */
                id: number;
                /**
                 * @description Model name, which is 'Category'
                 * @example Category
                 */
                objectName: string;
            } | null;
            /**
             * @description A description for the contact.
             * @example Rightful king of the seven kingdoms
             */
            description?: string | null;
            /** @description A academic title for the contact.
             *     Not to be used for organizations. */
            academicTitle?: string | null;
            /** @description Gender of the contact.<br>
             *     Not to be used for organizations. */
            gender?: string | null;
            /**
             * @description Second name of the contact.<br>
             *     Not to be used for organizations.
             * @example Targaryen
             */
            name2?: string | null;
            /**
             * Format: date
             * @description Birthday of the contact.<br>
             *     Not to be used for organizations.
             */
            birthday?: string | null;
            /** @description Vat number of the contact. */
            vatNumber?: string | null;
            /** @description Bank account number (IBAN) of the contact. */
            bankAccount?: string | null;
            /** @description Bank number of the bank used by the contact. */
            bankNumber?: string | null;
            /** @description Absolute time in days which the contact has to pay his invoices and subsequently get a cashback. */
            defaultCashbackTime?: number | null;
            /**
             * Format: float
             * @description Percentage of the invoice sum the contact gets back if he paid invoices in time.
             */
            defaultCashbackPercent?: number | null;
            /** @description The payment goal in days which is set for every invoice of the contact. */
            defaultTimeToPay?: number | null;
            /** @description The tax number of the contact. */
            taxNumber?: string | null;
            /** @description The tax office of the contact (only for greek customers). */
            taxOffice?: string | null;
            /** @description Defines if the contact is freed from paying vat. */
            exemptVat?: boolean | null;
            /**
             * Format: float
             * @description The default discount the contact gets for every invoice.<br>
             *     Depending on defaultDiscountPercentage attribute, in percent or absolute value.
             */
            defaultDiscountAmount?: number | null;
            /** @description Defines if the discount is a percentage (true) or an absolute value (false). */
            defaultDiscountPercentage?: boolean | null;
            /** @description Buyer reference of the contact. */
            buyerReference?: string | null;
            /** @description Defines whether the contact is a government agency (true) or not (false). */
            governmentAgency?: boolean | null;
        };
        /**
         * Contact address
         * @description ContactAddress model
         */
        Model_ContactAddressResponse: {
            /** @description The contact address id */
            readonly id?: number;
            /**
             * @description The contact address object name
             * @example ContactAddress
             */
            readonly objectName?: string;
            /**
             * Format: date-time
             * @description Date of contact address creation
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last contact address update
             */
            readonly update?: string;
            /** @description The contact to which this contact address belongs. */
            contact: {
                /** @description Unique identifier of the contact */
                id: number;
                /**
                 * @description Model name, which is 'Contact'
                 * @example Contact
                 */
                objectName: string;
            };
            /**
             * @description Street name
             * @example South road 15
             */
            street?: string | null;
            /**
             * @description Zib code
             * @example 12345
             */
            zip?: string | null;
            /**
             * @description City name
             * @example The North
             */
            city?: string | null;
            /** @description Country of the contact address.<br>
             *         For all countries, send a GET to /StaticCountry */
            country: {
                /** @description Unique identifier of the country */
                id: number;
                /**
                 * @description Model name, which is 'StaticCountry'
                 * @example StaticCountry
                 */
                objectName: string;
            };
            /** @description Category of the contact address.<br>
             *          For all categories, send a GET to /Category?objectType=ContactAddress. */
            category?: {
                /** @description Unique identifier of the category */
                id: number;
                /** @description Model name, which is 'Category' */
                objectName: string;
            } | null;
            /**
             * @description Name in address
             * @example John Snow
             */
            name?: string | null;
            /** @description Client to which contact address belongs. Will be filled automatically */
            readonly sevClient?: {
                /** @description Unique identifier of the client */
                id: number;
                /** @description Model name, which is 'SevClient' */
                objectName: string;
            };
            /**
             * @description Second name in address
             * @example Targaryen
             */
            name2?: string;
            /** @description Third name in address */
            name3?: string | null;
            /** @description Fourth name in address */
            name4?: string | null;
        };
        /**
         * Contact address
         * @description ContactAddress model
         */
        Model_ContactAddress: {
            /** @description The contact address id */
            readonly id?: number;
            /** @description The contact address object name */
            readonly objectName?: string;
            /**
             * Format: date-time
             * @description Date of contact address creation
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last contact address update
             */
            readonly update?: string;
            /** @description The contact to which this contact address belongs. */
            contact: {
                /** @description Unique identifier of the contact */
                id: number;
                /**
                 * @description Model name, which is 'Contact'
                 * @example Contact
                 */
                objectName: string;
            };
            /**
             * @description Street name
             * @example South road 15
             */
            street?: string | null;
            /**
             * @description Zib code
             * @example 12345
             */
            zip?: string | null;
            /**
             * @description City name
             * @example The North
             */
            city?: string | null;
            /** @description Country of the contact address.<br>
             *         For all countries, send a GET to /StaticCountry */
            country: {
                /** @description Unique identifier of the country */
                id: number;
                /**
                 * @description Model name, which is 'StaticCountry'
                 * @example StaticCountry
                 */
                objectName: string;
            };
            /** @description Category of the contact address.<br>
             *          For all categories, send a GET to /Category?objectType=ContactAddress. */
            category: {
                /** @description Unique identifier of the category */
                id: number;
                /** @description Model name, which is 'Category' */
                objectName: string;
            } | null;
            /**
             * @description Name in address
             * @example John Snow
             */
            name?: string | null;
            /** @description Client to which contact address belongs. Will be filled automatically */
            readonly sevClient?: {
                /** @description Unique identifier of the client */
                id: number;
                /** @description Model name, which is 'SevClient' */
                objectName: string;
            };
            /**
             * @description Second name in address
             * @example Targaryen
             */
            name2?: string;
            /** @description Third name in address */
            name3?: string | null;
            /** @description Fourth name in address */
            name4?: string | null;
        };
        /**
         * Contact address
         * @description ContactAddress model
         */
        Model_ContactAddressUpdate: {
            /** @description The contact to which this contact address belongs. */
            contact?: {
                /** @description Unique identifier of the contact */
                id: number;
                /**
                 * @description Model name, which is 'Contact'
                 * @example Contact
                 */
                objectName: string;
            } | null;
            /**
             * @description Street name
             * @example South road 15
             */
            street?: string | null;
            /**
             * @description Zib code
             * @example 12345
             */
            zip?: string | null;
            /**
             * @description City name
             * @example The North
             */
            city?: string | null;
            /** @description Country of the contact address.<br>
             *         For all countries, send a GET to /StaticCountry */
            country?: {
                /** @description Unique identifier of the country */
                id: number;
                /**
                 * @description Model name, which is 'StaticCountry'
                 * @example StaticCountry
                 */
                objectName: string;
            } | null;
            /** @description Category of the contact address.<br>
             *          For all categories, send a GET to /Category?objectType=ContactAddress. */
            category?: {
                /** @description Unique identifier of the category */
                id: number;
                /** @description Model name, which is 'Category' */
                objectName: string;
            } | null;
            /**
             * @description Name in address
             * @example John Snow
             */
            name?: string | null;
            /**
             * @description Second name in address
             * @example Targaryen
             */
            name2?: string;
            /** @description Third name in address */
            name3?: string | null;
            /** @description Fourth name in address */
            name4?: string | null;
        };
        /**
         * CommunicationWay model
         * @description Contact communication way model
         */
        Model_CommunicationWayResponse: {
            /**
             * @description The communication way id
             * @example 0
             */
            readonly id?: string;
            /**
             * @description The communication way object name
             * @example CommunicationWay
             */
            readonly objectName?: string;
            /**
             * Format: date-time
             * @description Date of communication way creation
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last communication way update
             */
            readonly update?: string;
            /** @description The contact to which this communication way belongs. */
            readonly contact?: {
                /**
                 * @description Unique identifier of the contact
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'Contact'
                 * @example Contact
                 */
                objectName: string;
            };
            /**
             * @description Type of the communication way
             * @example EMAIL
             * @enum {string}
             */
            readonly type?: "EMAIL" | "PHONE" | "WEB" | "MOBILE";
            /** @description The value of the communication way.<br>
             *          For example the phone number, e-mail address or website. */
            readonly value?: string;
            /** @description The key of the communication way.<br>
             *     Similar to the category of addresses.<br>
             *     For all communication way keys please send a GET to /CommunicationWayKey. */
            readonly key?: {
                /**
                 * @description Unique identifier of the key
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'CommunicationWayKey'
                 * @example CommunicationWayKey
                 */
                objectName: string;
            };
            /**
             * @description Defines whether the communication way is the main communication way for the contact.
             * @example 0
             */
            readonly main?: string;
            /** @description Client to which communication way key belongs. Will be filled automatically */
            readonly sevClient?: {
                /**
                 * @description Unique identifier of the client
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'SevClient'
                 * @example SevClient
                 */
                objectName: string;
            };
        };
        /**
         * CommunicationWay model
         * @description Contact communication way model
         */
        Model_CommunicationWay: {
            /** @description The communication way id */
            readonly id?: number;
            /** @description The communication way object name */
            readonly objectName?: string;
            /**
             * Format: date-time
             * @description Date of communication way creation
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last communication way update
             */
            readonly update?: string;
            /** @description The contact to which this communication way belongs. */
            contact?: {
                /** @description Unique identifier of the contact */
                id: number;
                /**
                 * @description Model name, which is 'Contact'
                 * @example Contact
                 */
                objectName: string;
            };
            /**
             * @description Type of the communication way
             * @example EMAIL
             * @enum {string}
             */
            type: "EMAIL" | "PHONE" | "WEB" | "MOBILE";
            /** @description The value of the communication way.<br>
             *          For example the phone number, e-mail address or website. */
            value: string;
            /** @description The key of the communication way.<br>
             *     Similar to the category of addresses.<br>
             *     For all communication way keys please send a GET to /CommunicationWayKey. */
            key: {
                /** @description Unique identifier of the key */
                id: number;
                /**
                 * @description Model name, which is 'CommunicationWayKey'
                 * @example CommunicationWayKey
                 */
                objectName: string;
            };
            /**
             * @description Defines whether the communication way is the main communication way for the contact.
             * @example 0
             */
            main?: boolean | null;
            /** @description Client to which communication way key belongs. Will be filled automatically */
            readonly sevClient?: {
                /** @description Unique identifier of the client */
                id: number;
                /** @description Model name, which is 'SevClient' */
                objectName: string;
            };
        };
        /**
         * CommunicationWay model
         * @description Contact communication way model
         */
        Model_CommunicationWayUpdate: {
            /** @description The contact to which this communication way belongs. */
            contact?: {
                /** @description Unique identifier of the contact */
                id: number;
                /**
                 * @description Model name, which is 'Contact'
                 * @example Contact
                 */
                objectName: string;
            } | null;
            /**
             * @description Type of the communication way
             * @example EMAIL
             * @enum {string}
             */
            type?: "EMAIL" | "PHONE" | "WEB" | "MOBILE";
            /** @description The value of the communication way.<br>
             *          For example the phone number, e-mail address or website. */
            value?: string;
            /** @description The key of the communication way.<br>
             *     Similar to the category of addresses.<br>
             *     For all communication way keys please send a GET to /CommunicationWayKey. */
            key?: {
                /** @description Unique identifier of the key */
                id: number;
                /**
                 * @description Model name, which is 'CommunicationWayKey'
                 * @example CommunicationWayKey
                 */
                objectName: string;
            } | null;
            /**
             * @description Defines whether the communication way is the main communication way for the contact.
             * @example 0
             */
            main?: boolean | null;
        };
        /**
         * AccountingContact model
         * @description Accounting contact model
         */
        Model_AccountingContactResponse: {
            /**
             * @description The accounting contact id
             * @example 0
             */
            readonly id?: string;
            /**
             * @description The accounting contact object name
             * @example AccountingContact
             */
            readonly objectName?: string;
            /**
             * Format: date-time
             * @description Date of accounting contact creation
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last accounting contact update
             */
            readonly update?: string;
            /** @description The contact to which this accounting contact belongs. */
            readonly contact?: {
                /**
                 * @description Unique identifier of the contact
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'Contact'
                 * @example Contact
                 */
                objectName: string;
            };
            /** @description Client to which accounting contact belongs. Will be filled automatically */
            readonly sevClient?: {
                /**
                 * @description Unique identifier of the client
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'SevClient'
                 * @example SevClient
                 */
                objectName: string;
            };
            /**
             * @description Debitor number of the accounting contact.
             * @example 0
             */
            readonly debitorNumber?: string;
            /**
             * @description Creditor number of the accounting contact.
             * @example 0
             */
            readonly creditorNumber?: string;
        };
        /**
         * AccountingContact model
         * @description Accounting contact model
         */
        Model_AccountingContact: {
            /** @description The contact to which this accounting contact belongs. */
            contact: {
                /** @description Unique identifier of the contact */
                id: number;
                /**
                 * @description Model name, which is 'Contact'
                 * @example Contact
                 */
                objectName: string;
            };
            /** @description Debitor number of the accounting contact. */
            debitorNumber?: number | null;
            /** @description Creditor number of the accounting contact. */
            creditorNumber?: number | null;
        };
        /**
         * AccountingContact model
         * @description Accounting contact model
         */
        Model_AccountingContactUpdate: {
            /** @description The contact to which this accounting contact belongs. */
            contact?: {
                /** @description Unique identifier of the contact */
                id: number;
                /**
                 * @description Model name, which is 'Contact'
                 * @example Contact
                 */
                objectName: string;
            } | null;
            /** @description Debitor number of the accounting contact. */
            debitorNumber?: number | null;
            /** @description Creditor number of the accounting contact. */
            creditorNumber?: number | null;
        };
        /**
         * Textparser fetchDictionaryEntriesByType model
         * @description Textparser fetchDictionaryEntriesByType model
         */
        Model_Textparser_fetchDictionaryEntriesByType_response: {
            /** @example Contact */
            key?: string;
            value?: {
                /** @example BANK_NUMBER */
                key?: string;
                /** @example [%BIC%] */
                value?: string;
            }[];
        };
        /**
         * contact fields model
         * @description contact fields model
         */
        Model_ContactCustomFieldSettingResponse: {
            /**
             * @description Id of the contact field
             * @example 1
             */
            readonly id?: string;
            /**
             * @description Internal object name which is 'ContactCustomFieldSetting'.
             * @example ContactCustomFieldSetting
             */
            readonly objectName?: string;
            /**
             * Format: date-time
             * @description Date of contact field creation
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of contact field updated
             */
            readonly update?: string;
            /** @description Client to which invoice belongs. Will be filled automatically */
            readonly sevClient?: {
                /**
                 * @description Unique identifier of the client
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'SevClient'
                 * @example SevClient
                 */
                objectName: string;
            };
            /** @description name of the contact fields */
            readonly name?: string;
            /** @description Unique identifier for the contact field */
            readonly identifier?: string;
            /** @description The description of the contact field */
            readonly description?: string;
        };
        /**
         * contact fields model
         * @description contact fields model
         */
        Model_ContactCustomFieldResponse: {
            /**
             * @description id of the contact field
             * @example 0
             */
            id?: string;
            /**
             * @description Internal object name which is 'ContactCustomField'.
             * @example ContactCustomField
             */
            objectName?: string;
            /**
             * Format: date-time
             * @description Date of contact field creation
             */
            create?: string;
            /**
             * Format: date-time
             * @description Date of contact field update
             */
            update?: string;
            /** @description Client to which contact field belongs. Will be filled automatically */
            sevClient?: {
                /**
                 * @description Unique identifier of the client
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'SevClient'
                 * @example SevClient
                 */
                objectName: string;
            };
            /** @description name of the contact */
            contact?: {
                /**
                 * @description Unique identifier of contact
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'Contact'
                 * @example Contact
                 */
                objectName: string;
            };
            /** @description the contact custom field setting */
            contactCustomFieldSetting?: components["schemas"]["Model_ContactCustomFieldSettingResponse"];
            /** @description The value of the contact field */
            value?: string;
        };
        /**
         * Contact fields model
         * @description Contact fields model
         */
        Model_ContactCustomField: {
            /** @description name of the contact */
            contact: {
                /** @description Unique identifier of contact */
                id: number;
                /**
                 * @description Model name, which is 'Contact'
                 * @example Contact
                 */
                objectName: string;
            };
            /** @description name of the contact custom field setting */
            contactCustomFieldSetting: {
                /** @description Unique identifier of contact custom field setting */
                id: number;
                /**
                 * @description Model name, which is 'contactCustomFieldSetting'
                 * @example contactCustomFieldSetting
                 */
                objectName: string;
            };
            /** @description The value of the contact field */
            value: string;
            /**
             * @description Internal object name which is 'ContactCustomField'.
             * @example ContactCustomField
             */
            objectName: string;
        };
        /**
         * contact fields model
         * @description contact fields model
         */
        Model_ContactCustomFieldUpdate: {
            /** @description name of the contact */
            contact?: {
                /** @description Unique identifier of contact */
                id: number;
                /**
                 * @description Model name, which is 'Contact'
                 * @example Contact
                 */
                objectName: string;
            };
            /** @description name of the contact custom field setting */
            contactCustomFieldSetting?: {
                /** @description Unique identifier of contact custom field setting */
                id: number;
                /**
                 * @description Model name, which is 'contactCustomFieldSetting'
                 * @example contactCustomFieldSetting
                 */
                objectName: string;
            };
            /** @description The value of the contact field */
            value?: string;
            /**
             * @description Internal object name which is 'ContactCustomField'.
             * @example ContactCustomField
             */
            objectName?: string;
        };
        /**
         * contact field settings model
         * @description contact field settings model
         */
        Model_ContactCustomFieldSetting: {
            /** @description name of the contact fields */
            name: string;
            /** @description The description of the contact field */
            description?: string;
            /**
             * @description Internal object name which is 'ContactCustomFieldSetting'.
             * @example ContactCustomFieldSetting
             */
            objectName?: string;
        };
        /**
         * contact fields model
         * @description contact fields model
         */
        Model_ContactCustomFieldSettingUpdate: {
            /** @description name of the contact fields */
            name?: string;
            /** @description The description of the contact field */
            description?: string;
            /**
             * @description Internal object name which is 'ContactCustomFieldSetting'.
             * @example ContactCustomFieldSetting
             */
            objectName?: string;
        };
        /**
         * creditNote model
         * @description creditNote model
         */
        Model_creditNoteResponse: {
            /**
             * @description The creditNote id
             * @example 1
             */
            readonly id?: string;
            /**
             * @description The creditNote object name
             * @example CreditNote
             */
            readonly objectName?: string;
            /**
             * Format: date-time
             * @description Date of creditNote creation
             * @example 2023-04-18T15:45:38+02:00
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last creditNote update
             * @example 2023-04-18T15:45:38+02:00
             */
            readonly update?: string;
            /**
             * @description The creditNote number
             * @example GU-1000
             */
            creditNoteNumber?: string | null;
            /** @description The contact used in the creditNote */
            contact?: {
                /**
                 * @description Unique identifier of the contact
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'Contact'
                 * @example Contact
                 */
                objectName: string;
            } | null;
            /**
             * Format: date-time
             * @description The credit note date
             * @example 2023-04-18T15:45:38+02:00
             */
            creditNoteDate?: string;
            /**
             * @description Please have a look in
             *         <a href='#tag/CreditNote/Status-of-credit-notes'>status of credit note</a>
             *         to see what the different status codes mean
             * @example 100
             * @enum {string}
             */
            status?: "100" | "200" | "750" | "1000";
            /**
             * @description Normally consist of prefix plus the creditNote number
             * @example My GU-1000
             */
            header?: string | null;
            /** @description Certain html tags can be used here to format your text */
            headText?: string | null;
            /** @description Certain html tags can be used here to format your text */
            footText?: string | null;
            /** @description Can be omitted as complete address is defined in address attribute */
            addressCountry?: {
                /**
                 * @description Unique identifier of the country
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'StaticCountry'
                 * @example StaticCountry
                 */
                objectName: string;
            } | null;
            /** @description Will be filled automatically by our system and can't be changed */
            readonly createUser?: {
                /**
                 * @description Unique identifier of the user
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'SevUser'
                 * @example SevUser
                 */
                objectName: string;
            };
            /** @description Client to which creditNote belongs. Will be filled automatically */
            readonly sevClient?: {
                /**
                 * @description Unique identifier of the client
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'SevClient'
                 * @example SevClient
                 */
                objectName: string;
            };
            /**
             * Format: date-time
             * @description Timestamp. This can also be a date range if you also use the attribute deliveryDateUntil
             * @example 2023-04-18T15:45:38+02:00
             */
            deliveryDate?: string;
            /**
             * @description Defines if the client uses the small settlement scheme.
             *         If yes, the creditNote must not contain any vat
             * @example 0
             */
            smallSettlement?: boolean | null;
            /** @description The user who acts as a contact person for the creditNote */
            contactPerson?: {
                /**
                 * @description Unique identifier of the user
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'SevUser'
                 * @example SevUser
                 */
                objectName: string;
            } | null;
            /**
             * @description This is not used anymore. Use the taxRate of the individual positions instead.
             * @example 0
             */
            taxRate?: string | null;
            /** @description **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).** */
            taxRule?: {
                /**
                 * @description **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
                 *
                 *     Defines the vat-regulation.
                 *     For "Regelbesteuerung" it can be one of:
                 *       - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
                 *       - `2` - Ausfuhren - allowedTaxRates: 0.0
                 *       - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
                 *       - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
                 *       - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
                 *
                 *     For small business owner ("Kleinunternehmer") it can be:
                 *       - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
                 * @enum {string}
                 */
                id: "1" | "2" | "3" | "4" | "5" | "11";
                /**
                 * @description Name of the object. Must always be TaxRule`
                 * @enum {string}
                 */
                objectName: "TaxRule";
            };
            /** @description **Use this in sevdesk-Update 1.0 (instead of taxRule).**
             *
             *     Tax set of the creditNote. Needs to be added if you chose the tax type custom */
            taxSet?: {
                /**
                 * @description Unique identifier of the object
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'TaxSet'
                 * @example TaxSet
                 */
                objectName: string;
            } | null;
            /**
             * @description A common tax text would be 'Umsatzsteuer 19%'
             * @example Umsatzsteuer 19%
             */
            taxText?: string | null;
            /**
             * @description **Use this in sevdesk-Update 1.0 (instead of taxRule).**
             *
             *     Tax type of the creditNote.
             *     There are four tax types:
             *     1. default - Umsatzsteuer ausweisen
             *     2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
             *     3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
             *     4. custom - Using custom tax set
             *     5. ss - Not subject to VAT according to §19 1 UStG
             *     Tax rates are heavily connected to the tax type used.
             * @example default
             */
            taxType?: string | null;
            /**
             * Format: date-time
             * @description The date the creditNote was sent to the customer
             * @example 2023-04-18T15:45:38+02:00
             */
            sendDate?: string | null;
            /** @description Complete address of the recipient including name, street, city, zip and country.<br>
             *          Line breaks can be used and will be displayed on the invoice pdf. */
            address?: string | null;
            /**
             * @description Currency used in the creditNote. Needs to be currency code according to ISO-4217
             * @example EUR
             */
            currency?: string | null;
            /**
             * @description Net sum of the creditNote
             * @example 0
             */
            readonly sumNet?: string;
            /**
             * @description Tax sum of the creditNote
             * @example 0
             */
            readonly sumTax?: string;
            /**
             * @description Gross sum of the creditNote
             * @example 0
             */
            readonly sumGross?: string;
            /**
             * @description Sum of all discounts in the creditNote
             * @example 0
             */
            readonly sumDiscounts?: string;
            /**
             * @description Net sum of the creditNote in the foreign currency
             * @example 0
             */
            readonly sumNetForeignCurrency?: string;
            /**
             * @description Tax sum of the creditNote in the foreign currency
             * @example 0
             */
            readonly sumTaxForeignCurrency?: string;
            /**
             * @description Gross sum of the creditNote in the foreign currency
             * @example 0
             */
            readonly sumGrossForeignCurrency?: string;
            /**
             * @description Discounts sum of the creditNote in the foreign currency
             * @example 0
             */
            readonly sumDiscountsForeignCurrency?: string;
            /** @description Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer' */
            customerInternalNote?: string | null;
            /**
             * @description If true, the net amount of each position will be shown on the creditNote. Otherwise gross amount
             * @example 1
             */
            showNet?: boolean;
            /**
             * @description Type which was used to send the creditNote. IMPORTANT: Please refer to the creditNote section of the
             *          *     API-Overview to understand how this attribute can be used before using it!
             * @enum {string|null}
             */
            sendType?: "VPR" | "VPDF" | "VM" | "VP" | null;
        };
        /**
         * creditNote model
         * @description creditNote model
         */
        Model_creditNote: {
            /** @description The creditNote id. <span style='color:red'>Required</span> if you want to create/update an credit note position for an existing credit note" */
            id?: number;
            /**
             * @description The creditNote object name
             * @example CreditNote
             */
            objectName: string;
            mapAll: boolean;
            /**
             * Format: date-time
             * @description Date of creditNote creation
             * @example 2023-04-18T15:45:38+02:00
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last creditNote update
             * @example 2023-04-18T15:45:38+02:00
             */
            readonly update?: string;
            /**
             * @description The creditNote number
             * @example GU-1000
             */
            creditNoteNumber: string;
            /** @description The contact used in the creditNote */
            contact: {
                /** @description Unique identifier of the contact */
                id: number;
                /**
                 * @description Model name, which is 'Contact'
                 * @example Contact
                 */
                objectName: string;
            };
            /**
             * Format: date-time
             * @description Needs to be provided as timestamp or dd.mm.yyyy
             * @example 22.02.2022
             */
            creditNoteDate: string;
            /**
             * @description Please have a look in
             *         <a href='#tag/CreditNote/Status-of-credit-notes'>status of credit note</a>
             *         to see what the different status codes mean
             * @example 100
             * @enum {string}
             */
            status: "100" | "200" | "300" | "500" | "750" | "1000";
            /**
             * @description Normally consist of prefix plus the creditNote number
             * @example My GU-1000
             */
            header: string;
            /** @description Certain html tags can be used here to format your text */
            headText?: string | null;
            /** @description Certain html tags can be used here to format your text */
            footText?: string | null;
            /** @description Can be omitted as complete address is defined in address attribute */
            addressCountry: {
                /**
                 * @description Unique identifier of the country
                 * @example 1
                 */
                id: number;
                /**
                 * @description Model name, which is 'StaticCountry'
                 * @example StaticCountry
                 */
                objectName: string;
            } | null;
            /** @description Will be filled automatically by our system and can't be changed */
            readonly createUser?: {
                /** @description Unique identifier of the user */
                id: number;
                /**
                 * @description Model name, which is 'SevUser'
                 * @example SevUser
                 */
                objectName: string;
            };
            /** @description Client to which creditNote belongs. Will be filled automatically */
            readonly sevClient?: {
                /** @description Unique identifier of the client */
                id: number;
                /**
                 * @description Model name, which is 'SevClient'
                 * @example SevClient
                 */
                objectName: string;
            };
            /**
             * @description Defines if the client uses the small settlement scheme.
             *         If yes, the creditNote must not contain any vat
             * @example 0
             */
            smallSettlement?: boolean | null;
            /** @description The user who acts as a contact person for the creditNote */
            contactPerson: {
                /** @description Unique identifier of the user */
                id: number;
                /**
                 * @description Model name, which is 'SevUser'
                 * @example SevUser
                 */
                objectName: string;
            };
            /** @description **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).** */
            taxRule: {
                /**
                 * @description **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
                 *
                 *     Defines the vat-regulation.
                 *     For "Regelbesteuerung" it can be one of:
                 *       - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
                 *       - `2` - Ausfuhren - allowedTaxRates: 0.0
                 *       - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
                 *       - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
                 *       - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
                 *
                 *     For small business owner ("Kleinunternehmer") it can be:
                 *       - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
                 * @enum {string}
                 */
                id: "1" | "2" | "3" | "4" | "5" | "11";
                /**
                 * @description Name of the object. Must always be TaxRule`
                 * @enum {string}
                 */
                objectName: "TaxRule";
            };
            /**
             * Format: float
             * @description This is not used anymore. Use the taxRate of the individual positions instead.
             * @example 0
             */
            taxRate: number;
            /** @description **Use this in sevdesk-Update 1.0 (instead of taxRule).**
             *
             *     Tax set of the creditNote. Needs to be added if you chose the tax type custom */
            taxSet?: {
                /** @description Unique identifier of the object */
                id: number;
                /**
                 * @description Model name, which is 'TaxSet'
                 * @example TaxSet
                 */
                objectName: string;
            } | null;
            /**
             * @description A common tax text would be 'Umsatzsteuer 19%'
             * @example Umsatzsteuer 19%
             */
            taxText: string;
            /**
             * @description **Use this in sevdesk-Update 1.0 (instead of taxRule).**
             *
             *     Tax type of the creditNote.
             *     There are four tax types:
             *     1. default - Umsatzsteuer ausweisen
             *     2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
             *     3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
             *     4. custom - Using custom tax set
             *     5. ss - Not subject to VAT according to §19 1 UStG
             *     Tax rates are heavily connected to the tax type used.
             * @example default
             */
            taxType: string;
            /**
             * Format: date-time
             * @description The date the creditNote was sent to the customer
             * @example 01.01.2020
             */
            sendDate?: string | null;
            /** @description Complete address of the recipient including name, street, city, zip and country.<br>
             *          Line breaks can be used and will be displayed on the invoice pdf. */
            address?: string | null;
            /**
             * @description Defines the booking category, for more information see the section [Credit note booking categories](#tag/CreditNote/Credit-note-booking-categories)
             *
             *     The booking category of the credit note.
             *
             *     **Must be <code>UNDERACHIEVEMENT</code> in sevdesk-Update 2.0.**
             * @example PROVISION
             * @enum {string}
             */
            bookingCategory: "PROVISION" | "ROYALTY_ASSIGNED" | "ROYALTY_UNASSIGNED" | "UNDERACHIEVEMENT" | "ACCOUNTING_TYPE";
            /**
             * @description Currency used in the creditNote. Needs to be currency code according to ISO-4217
             * @example EUR
             */
            currency: string;
            /**
             * Format: float
             * @description Net sum of the creditNote
             */
            readonly sumNet?: number;
            /**
             * Format: float
             * @description Tax sum of the creditNote
             */
            readonly sumTax?: number;
            /**
             * Format: float
             * @description Gross sum of the creditNote
             */
            readonly sumGross?: number;
            /**
             * Format: float
             * @description Sum of all discounts in the creditNote
             */
            readonly sumDiscounts?: number;
            /**
             * Format: float
             * @description Net sum of the creditNote in the foreign currency
             */
            readonly sumNetForeignCurrency?: number;
            /**
             * Format: float
             * @description Tax sum of the creditNote in the foreign currency
             */
            readonly sumTaxForeignCurrency?: number;
            /**
             * Format: float
             * @description Gross sum of the creditNote in the foreign currency
             */
            readonly sumGrossForeignCurrency?: number;
            /**
             * Format: float
             * @description Discounts sum of the creditNote in the foreign currency
             */
            readonly sumDiscountsForeignCurrency?: number;
            /** @description Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer' */
            customerInternalNote?: string | null;
            /**
             * @description If true, the net amount of each position will be shown on the creditNote. Otherwise gross amount
             * @example 1
             */
            showNet?: boolean;
            /**
             * @description Type which was used to send the creditNote. IMPORTANT: Please refer to the creditNote section of the
             *          *     API-Overview to understand how this attribute can be used before using it!
             * @enum {string|null}
             */
            sendType?: "VPR" | "VPDF" | "VM" | "VP" | null;
        };
        /**
         * creditNote position model
         * @description creditNote position model
         */
        Model_creditNotePos: {
            /** @description The creditNote position id. */
            readonly id?: number | null;
            /**
             * @description The creditNote position object name
             * @example CreditNotePos
             */
            objectName: string;
            mapAll: boolean;
            /**
             * @description Date of creditNote position creation
             * @example 2023-04-18T15:45:38+02:00
             */
            readonly create?: string;
            /**
             * @description Date of last creditNote position update
             * @example 2023-04-18T15:45:38+02:00
             */
            readonly update?: string;
            /** @description The creditNote to which the position belongs.  <span style='color:red'>Required</span> if you want to create/update an credit note position for an existing credit note" */
            creditNote?: {
                /** @description Unique identifier of the creditNote */
                id: number;
                /**
                 * @description Model name, which is 'creditNote'
                 * @example creditNote
                 */
                objectName: string;
            };
            /** @description Part from your inventory which is used in the position. */
            part?: {
                /** @description Unique identifier of the part */
                id: number;
                /**
                 * @description Model name, which is 'Part'
                 * @example Part
                 */
                objectName: string;
            };
            /**
             * Format: float
             * @description Quantity of the article/part
             * @example 1
             */
            quantity: number;
            /**
             * Format: float
             * @description Price of the article/part. Is either gross or net, depending on the sevdesk account setting.
             * @example 100
             */
            price?: number | null;
            /**
             * Format: float
             * @description Net price of the part
             */
            readonly priceNet?: number | null;
            /**
             * Format: float
             * @description Tax on the price of the part
             * @example 19
             */
            priceTax?: number | null;
            /**
             * Format: float
             * @description Gross price of the part
             * @example 119
             */
            priceGross?: number | null;
            /**
             * @description Name of the article/part.
             * @example Dragonglass
             */
            name?: string | null;
            /** @description The unit in which the positions part is measured */
            unity: {
                /** @description Unique identifier of the unit */
                id: number;
                /**
                 * @description Model name, which is 'Unity'
                 * @example Unity
                 */
                objectName: string;
            };
            /** @description Client to which creditNote position belongs. Will be filled automatically */
            readonly sevClient?: {
                /** @description Unique identifier of the client */
                id: number;
                /**
                 * @description Model name, which is 'SevClient'
                 * @example SevClient
                 */
                objectName: string;
            };
            /**
             * @description Position number of your position. Can be used to creditNote multiple positions.
             * @example 1
             */
            positionNumber?: number | null;
            /** @description A text describing your position. */
            text?: string | null;
            /**
             * Format: float
             * @description An optional discount of the position.
             */
            discount?: number | null;
            /** @description Defines if the position is optional. */
            optional?: boolean | null;
            /**
             * Format: float
             * @description Tax rate of the position.
             * @example 19
             */
            taxRate: number;
            /**
             * Format: float
             * @description Discount sum of the position
             */
            readonly sumDiscount?: number | null;
        };
        saveCreditNote: {
            creditNote: components["schemas"]["Model_creditNote"];
            creditNotePosSave?: components["schemas"]["Model_creditNotePos"][];
            /** @default null */
            creditNotePosDelete: {
                /** @description Id of credit note position */
                id: number;
                /** @description Object name of credit note position */
                objectName: string;
            };
            /** @default null */
            discountSave: {
                /**
                 * @description Defines if this is a discount or a surcharge
                 * @example true
                 */
                discount: boolean;
                /** @description A text for your discount */
                text: string;
                /** @description Defines if this is a percentage or an absolute discount */
                percentage: boolean;
                /** @description Value of the discount */
                value: number;
                /**
                 * @description Object name of the discount
                 * @example Discounts
                 */
                objectName: string;
                /**
                 * @description Internal param
                 * @example true
                 */
                mapAll: boolean;
            };
            /** @default null */
            discountDelete: {
                /** @description ID of discount to delete */
                id: number;
                /**
                 * @description Object name of discount
                 * @example Discounts
                 */
                objectName: string;
            };
        };
        /**
         * creditNote position model
         * @description creditNote position model
         */
        Model_creditNotePosResponse: {
            /**
             * @description The creditNote position id
             * @example 1
             */
            readonly id?: string;
            /**
             * @description The creditNote position object name
             * @example CreditNotePos
             */
            readonly objectName?: string;
            /**
             * @description Date of creditNote position creation
             * @example 2023-04-18T15:45:38+02:00
             */
            readonly create?: string;
            /**
             * @description Date of last creditNote position update
             * @example 2023-04-18T15:45:38+02:00
             */
            readonly update?: string;
            /** @description The creditNote to which the position belongs. */
            creditNote: {
                /**
                 * @description Unique identifier of the creditNote
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'creditNote'
                 * @example creditNote
                 */
                objectName: string;
            };
            /** @description Part from your inventory which is used in the position. */
            part?: {
                /**
                 * @description Unique identifier of the part
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'Part'
                 * @example Part
                 */
                objectName: string;
            };
            /**
             * @description Quantity of the article/part
             * @example 1
             */
            quantity: string;
            /**
             * @description Price of the article/part. Is either gross or net, depending on the sevdesk account setting.
             * @example 100
             */
            price?: string | null;
            /**
             * @description Net price of the part
             * @example 100
             */
            readonly priceNet?: string | null;
            /**
             * @description Tax on the price of the part
             * @example 19
             */
            priceTax?: string | null;
            /**
             * @description Gross price of the part
             * @example 119
             */
            priceGross?: string | null;
            /**
             * @description Name of the article/part.
             * @example Dragonglass
             */
            name?: string | null;
            /** @description The unit in which the positions part is measured */
            unity: {
                /**
                 * @description Unique identifier of the unit
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'Unity'
                 * @example Unity
                 */
                objectName: string;
            };
            /** @description Client to which creditNote position belongs. Will be filled automatically */
            readonly sevClient?: {
                /**
                 * @description Unique identifier of the client
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'SevClient'
                 * @example SevClient
                 */
                objectName: string;
            };
            /**
             * @description Position number of your position. Can be used to creditNote multiple positions.
             * @example 1
             */
            positionNumber?: string | null;
            /** @description A text describing your position. */
            text?: string | null;
            /**
             * @description An optional discount of the position.
             * @example 0
             */
            discount?: string | null;
            /** @description Defines if the position is optional. */
            optional?: boolean | null;
            /**
             * @description Tax rate of the position.
             * @example 19
             */
            taxRate: string;
            /**
             * @description Discount sum of the position
             * @example 0
             */
            readonly sumDiscount?: string | null;
        };
        saveCreditNoteResponse: {
            creditNote?: components["schemas"]["Model_creditNoteResponse"];
            creditNotePos?: components["schemas"]["Model_creditNotePosResponse"][];
        };
        Model_discountsResponse: {
            /**
             * @description The id of the discount
             * @example 1234
             */
            id?: number;
            /**
             * @description Model name, which is 'Discounts'
             * @example Discounts
             */
            objectName?: string;
            /**
             * @description Date of discount creation
             * @example 2023-03-15T13:46:33+01:00
             */
            create?: string;
            /**
             * @description Date of last discount update
             * @example 2023-03-15T13:46:33+01:00
             */
            update?: string;
            /**
             * @description Client to which the discount belongs
             * @example 1234
             */
            sevClient?: string;
            /**
             * @description Indicates that this is a discount or a surcharge (0 = surcharge, 1 = discount)
             * @example 1
             */
            discount?: string;
            /**
             * @description A text describing your position.
             * @example Info about the discount
             */
            text?: string;
            /**
             * @description Defines if this is a percentage or an absolute discount
             * @example 1
             */
            percentage?: string;
            /**
             * @description Value of the discount
             * @example 5
             */
            value?: string;
            /**
             * @description Defines is the Discount net or gross (0 = net, 1 = gross)
             * @example 0
             */
            isNet?: string;
        };
        /**
         * creditNote model
         * @description creditNote model
         */
        Model_creditNoteUpdate: {
            /** @description The creditNote id */
            readonly id?: number;
            /** @description The creditNote object name */
            readonly objectName?: string;
            /**
             * Format: date-time
             * @description Date of creditNote creation
             * @example 2023-04-18T15:45:38+02:00
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last creditNote update
             * @example 2023-04-18T15:45:38+02:00
             */
            readonly update?: string;
            /**
             * @description The creditNote number
             * @example GU-1000
             */
            creditNoteNumber?: string | null;
            /** @description The contact used in the creditNote */
            contact?: {
                /** @description Unique identifier of the contact */
                id: number;
                /**
                 * @description Model name, which is 'Contact'
                 * @example Contact
                 */
                objectName: string;
            } | null;
            /**
             * Format: date-time
             * @description Needs to be provided as timestamp or dd.mm.yyyy
             * @example 01.01.2020
             */
            creditNoteDate?: string;
            /**
             * @description Please have a look in
             *         <a href='#tag/CreditNote/Status-of-credit-notes'>status of credit note</a>
             *         to see what the different status codes mean
             * @example 100
             * @enum {string}
             */
            status?: "100" | "200" | "750" | "1000";
            /**
             * @description Normally consist of prefix plus the creditNote number
             * @example My GU-1000
             */
            header?: string | null;
            /** @description Certain html tags can be used here to format your text */
            headText?: string | null;
            /** @description Certain html tags can be used here to format your text */
            footText?: string | null;
            /** @description Can be omitted as complete address is defined in address attribute */
            addressCountry?: {
                /**
                 * @description Unique identifier of the country
                 * @example 1
                 */
                id: number;
                /**
                 * @description Model name, which is 'StaticCountry'
                 * @example StaticCountry
                 */
                objectName: string;
            } | null;
            /** @description Will be filled automatically by our system and can't be changed */
            readonly createUser?: {
                /** @description Unique identifier of the user */
                id: number;
                /**
                 * @description Model name, which is 'SevUser'
                 * @example SevUser
                 */
                objectName: string;
            };
            /** @description Client to which creditNote belongs. Will be filled automatically */
            readonly sevClient?: {
                /** @description Unique identifier of the client */
                id: number;
                /**
                 * @description Model name, which is 'SevClient'
                 * @example SevClient
                 */
                objectName: string;
            };
            /**
             * Format: date-time
             * @description Timestamp. This can also be a date range if you also use the attribute deliveryDateUntil
             * @example 2023-04-18T15:45:38+02:00
             */
            deliveryDate?: string;
            /**
             * @description Defines if the client uses the small settlement scheme.
             *         If yes, the creditNote must not contain any vat
             * @example 0
             */
            smallSettlement?: boolean | null;
            /** @description The user who acts as a contact person for the creditNote */
            contactPerson?: {
                /** @description Unique identifier of the user */
                id: number;
                /**
                 * @description Model name, which is 'SevUser'
                 * @example SevUser
                 */
                objectName: string;
            } | null;
            /**
             * Format: float
             * @description This is not used anymore. Use the taxRate of the individual positions instead.
             * @example 0
             */
            taxRate?: number | null;
            /** @description **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).** */
            taxRule?: {
                /**
                 * @description **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
                 *
                 *     Defines the vat-regulation.
                 *     For "Regelbesteuerung" it can be one of:
                 *       - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
                 *       - `2` - Ausfuhren - allowedTaxRates: 0.0
                 *       - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
                 *       - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
                 *       - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
                 *
                 *     For small business owner ("Kleinunternehmer") it can be:
                 *       - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
                 * @enum {string}
                 */
                id: "1" | "2" | "3" | "4" | "5" | "11";
                /**
                 * @description Name of the object. Must always be TaxRule`
                 * @enum {string}
                 */
                objectName: "TaxRule";
            };
            /** @description **Use this in sevdesk-Update 1.0 (instead of taxRule).**
             *
             *     Tax set of the creditNote. Needs to be added if you chose the tax type custom */
            taxSet?: {
                /** @description Unique identifier of the object */
                id: number;
                /**
                 * @description Model name, which is 'TaxSet'
                 * @example TaxSet
                 */
                objectName: string;
            } | null;
            /**
             * @description A common tax text would be 'Umsatzsteuer 19%'
             * @example Umsatzsteuer 19%
             */
            taxText?: string | null;
            /**
             * @description **Use this in sevdesk-Update 1.0 (instead of taxRule).**
             *
             *     Tax type of the creditNote.
             *     There are four tax types:
             *     1. default - Umsatzsteuer ausweisen
             *     2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
             *     3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
             *     4. custom - Using custom tax set
             *     5. ss - Not subject to VAT according to §19 1 UStG
             *     Tax rates are heavily connected to the tax type used.
             * @example default
             */
            taxType?: string | null;
            /**
             * Format: date-time
             * @description The date the creditNote was sent to the customer
             * @example 01.01.2020
             */
            sendDate?: string | null;
            /** @description Complete address of the recipient including name, street, city, zip and country.<br>
             *          Line breaks can be used and will be displayed on the invoice pdf. */
            address?: string | null;
            /**
             * @description Currency used in the creditNote. Needs to be currency code according to ISO-4217
             * @example EUR
             */
            currency?: string | null;
            /**
             * Format: float
             * @description Net sum of the creditNote
             */
            readonly sumNet?: number;
            /**
             * Format: float
             * @description Tax sum of the creditNote
             */
            readonly sumTax?: number;
            /**
             * Format: float
             * @description Gross sum of the creditNote
             */
            readonly sumGross?: number;
            /**
             * Format: float
             * @description Sum of all discounts in the creditNote
             */
            readonly sumDiscounts?: number;
            /**
             * Format: float
             * @description Net sum of the creditNote in the foreign currency
             */
            readonly sumNetForeignCurrency?: number;
            /**
             * Format: float
             * @description Tax sum of the creditNote in the foreign currency
             */
            readonly sumTaxForeignCurrency?: number;
            /**
             * Format: float
             * @description Gross sum of the creditNote in the foreign currency
             */
            readonly sumGrossForeignCurrency?: number;
            /**
             * Format: float
             * @description Discounts sum of the creditNote in the foreign currency
             */
            readonly sumDiscountsForeignCurrency?: number;
            /** @description Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer' */
            customerInternalNote?: string | null;
            /**
             * @description If true, the net amount of each position will be shown on the creditNote. Otherwise gross amount
             * @example 1
             */
            showNet?: boolean;
            /**
             * @description Type which was used to send the creditNote. IMPORTANT: Please refer to the creditNote section of the
             *          *     API-Overview to understand how this attribute can be used before using it!
             * @enum {string|null}
             */
            sendType?: "VPR" | "VPDF" | "VM" | "VP" | null;
        };
        Model_CreditNote_sendByWithRender: {
            thumbs?: unknown[];
            /** @example 2 */
            pages?: number;
            /** @example d4605b19248ad176443b7cb382679b1f */
            docId?: string;
            parameters?: {
                /** @example language */
                key?: string;
                /** @example Sprache */
                name?: string;
                values?: {
                    /** @example deutsch */
                    name?: string;
                    /** @example SEVDOC_LANG_DE_DE */
                    translationCade?: string;
                    /** @example de_DE */
                    value?: string;
                }[];
                /** @example true */
                visible?: boolean;
                /** @example de_DE */
                value?: string;
            }[];
        };
        Model_creditNote_mailResponse: {
            /** @example 1 */
            id?: number;
            /** @example Email */
            objectName?: string;
            /** @default null */
            additionalInformation: string;
            /**
             * Format: date-time
             * @description Date of email creation
             * @example 2023-04-18T15:45:38+02:00
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last email update
             * @example 2023-04-18T15:45:38+02:00
             */
            readonly update?: string;
            object?: components["schemas"]["Model_creditNoteResponse"];
            /** @example example@mail.com */
            from?: string;
            /** @example example2@mail.com */
            to?: string;
            /** @example subject */
            subject?: string;
            /** @example example */
            text?: string;
            /** @description Client to which creditNote belongs. Will be filled automatically */
            sevClient?: {
                /**
                 * @description Unique identifier of the client
                 * @example 1
                 */
                id: number;
                /**
                 * @description Model name, which is 'SevClient'
                 * @example SevClient
                 */
                objectName: string;
            };
        };
        /**
         * Part model
         * @description Part model
         */
        Model_Part: {
            /** @description The part id */
            readonly id?: number;
            /** @description The part object name */
            readonly objectName?: string;
            /**
             * Format: date-time
             * @description Date of part creation
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last part update
             */
            readonly update?: string;
            /**
             * @description Name of the part
             * @example Dragonglass
             */
            name: string;
            /**
             * @description The part number
             * @example Part-1000
             */
            partNumber: string;
            /** @description A text describing the part */
            text?: string | null;
            /** @description Category of the part.<br>
             *         For all categories, send a GET to /Category?objectType=Part */
            category?: {
                /** @description Unique identifier of the category */
                id: number;
                /**
                 * @description Model name, which is 'Category'
                 * @example Category
                 */
                objectName: string;
            } | null;
            /**
             * Format: float
             * @description The stock of the part
             * @example 10000
             */
            stock: number;
            /**
             * @description Defines if the stock should be enabled
             * @example 1
             */
            stockEnabled?: boolean;
            /** @description The unit in which the part is measured */
            unity: {
                /**
                 * @description Unique identifier of the unit
                 * @example 1
                 */
                id: number;
                /**
                 * @description Model name, which is 'Unity'
                 * @example Unity
                 */
                objectName: string;
            };
            /**
             * Format: float
             * @description Net price for which the part is sold. we will change this parameter so that the gross price is calculated automatically, until then the priceGross parameter must be used.
             * @example 100
             */
            price?: number | null;
            /**
             * Format: float
             * @description Net price for which the part is sold
             * @example 100
             */
            priceNet?: number | null;
            /**
             * Format: float
             * @description Gross price for which the part is sold
             * @example 119
             */
            priceGross?: number | null;
            /** @description Client to which part belongs. Will be filled automatically */
            readonly sevClient?: {
                /** @description Unique identifier of the client */
                id: number;
                /** @description Model name, which is 'SevClient' */
                objectName: string;
            };
            /**
             * Format: float
             * @description Purchase price of the part
             * @example 50
             */
            pricePurchase?: number | null;
            /**
             * Format: float
             * @description Tax rate of the part
             * @example 19
             */
            taxRate: number;
            /**
             * @description Status of the part. 50 <-> Inactive - 100 <-> Active
             * @example 100
             * @enum {integer|null}
             */
            status?: 50 | 100 | null;
            /** @description An internal comment for the part.<br>
             *          Does not appear on invoices and orders. */
            internalComment?: string | null;
        };
        /**
         * Part model
         * @description Part model
         */
        Model_PartUpdate: {
            /** @description The part id */
            readonly id?: number | null;
            /** @description The part object name */
            readonly objectName?: string | null;
            /**
             * Format: date-time
             * @description Date of part creation
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last part update
             */
            readonly update?: string;
            /**
             * @description Name of the part
             * @example Dragonglass
             */
            name?: string;
            /**
             * @description The part number
             * @example Part-1000
             */
            partNumber?: string;
            /** @description A text describing the part */
            text?: string | null;
            /** @description Category of the part.<br>
             *         For all categories, send a GET to /Category?objectType=Part */
            category?: {
                /** @description Unique identifier of the category */
                id: number;
                /**
                 * @description Model name, which is 'Category'
                 * @example Category
                 */
                objectName: string;
            } | null;
            /**
             * Format: float
             * @description The stock of the part
             * @example 10000
             */
            stock?: number;
            /**
             * @description Defines if the stock should be enabled
             * @example 1
             */
            stockEnabled?: boolean | null;
            /** @description The unit in which the part is measured */
            unity?: {
                /**
                 * @description Unique identifier of the unit
                 * @example 1
                 */
                id: number;
                /**
                 * @description Model name, which is 'Unity'
                 * @example Unity
                 */
                objectName: string;
            };
            /**
             * Format: float
             * @description Net price for which the part is sold. we will change this parameter so that the gross price is calculated automatically, until then the priceGross parameter must be used.
             * @example 100
             */
            price?: number | null;
            /**
             * Format: float
             * @description Net price for which the part is sold
             * @example 100
             */
            priceNet?: number | null;
            /**
             * Format: float
             * @description Gross price for which the part is sold
             * @example 119
             */
            priceGross?: number | null;
            /** @description Client to which part belongs. Will be filled automatically */
            readonly sevClient?: {
                /** @description Unique identifier of the client */
                id: number;
                /** @description Model name, which is 'SevClient' */
                objectName: string;
            };
            /**
             * Format: float
             * @description Purchase price of the part
             * @example 50
             */
            pricePurchase?: number | null;
            /**
             * Format: float
             * @description Tax rate of the part
             * @example 19
             */
            taxRate?: number;
            /**
             * @description Status of the part. 50 <-> Inactive - 100 <-> Active
             * @example 100
             * @enum {integer|null}
             */
            status?: 50 | 100 | null;
            /** @description An internal comment for the part.<br>
             *          Does not appear on invoices and orders. */
            internalComment?: string | null;
        };
        /**
         * Invoice model
         * @description Invoice model
         */
        Model_InvoiceResponse: {
            /**
             * @description The invoice id
             * @example 1
             */
            readonly id?: string;
            /**
             * @description The invoice object name
             * @example Invoice
             */
            readonly objectName?: string;
            /**
             * @description The invoice number
             * @example RE-1000
             */
            readonly invoiceNumber?: string;
            /** @description The contact used in the invoice */
            readonly contact?: {
                /**
                 * @description Unique identifier of the contact
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'Contact'
                 * @example Contact
                 */
                objectName: string;
            };
            /**
             * Format: date-time
             * @description Date of invoice creation
             * @example 2024-04-08T00:00:00+02:00
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last invoice update
             * @example 2024-04-08T00:00:00+02:00
             */
            readonly update?: string;
            /** @description Client to which invoice belongs. Will be filled automatically */
            readonly sevClient?: {
                /**
                 * @description Unique identifier of the client
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'SevClient'
                 * @example SevClient
                 */
                objectName: string;
            };
            /**
             * @description The invoice date.
             * @example 2024-04-08T00:00:00+02:00
             */
            readonly invoiceDate?: string;
            /**
             * @description Normally consist of prefix plus the invoice number
             * @example My RE-1000
             */
            readonly header?: string;
            /**
             * @description Certain html tags can be used here to format your text
             * @example header information
             */
            readonly headText?: string;
            /**
             * @description Certain html tags can be used here to format your text
             * @example footer information
             */
            readonly footText?: string;
            /**
             * @description The time the customer has to pay the invoice in days
             * @example 10
             */
            readonly timeToPay?: string;
            /**
             * @description If a value other than zero is used for the discount attribute,
             *         you need to specify the amount of days for which the discount is granted.
             * @example 0
             */
            readonly discountTime?: string;
            /**
             * @description If you want to give a discount, define the percentage here. Otherwise provide zero as value
             * @example 0
             */
            readonly discount?: string;
            /** @description Can be omitted as complete address is defined in address attribute */
            readonly addressCountry?: {
                /**
                 * @description Unique identifier of the country
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'StaticCountry'
                 * @example StaticCountry
                 */
                objectName: string;
            };
            /**
             * Format: date-time
             * @description Needs to be timestamp or dd.mm.yyyy
             * @example 2024-04-08T00:00:00+02:00
             */
            readonly payDate?: string;
            /** @description Will be filled automatically by our system and can't be changed */
            readonly createUser?: {
                /**
                 * @description Unique identifier of the user
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'SevUser'
                 * @example SevUser
                 */
                objectName: string;
            };
            /**
             * Format: date-time
             * @description Timestamp. This can also be a date range if you also use the attribute deliveryDateUntil
             * @example 2024-04-08T00:00:00+02:00
             */
            readonly deliveryDate?: string;
            /**
             * @description Please have a look in our
             *          <a href='#tag/Invoice/Types-and-status-of-invoices'>Types and status of invoices</a>
             *          to see what the different status codes mean
             * @example 100
             * @enum {string}
             */
            readonly status?: "50" | "100" | "200" | "750" | "1000";
            /**
             * @description Defines if the client uses the small settlement scheme.
             *         If yes, the invoice must not contain any vat
             * @example 0
             */
            readonly smallSettlement?: boolean;
            /** @description The user who acts as a contact person for the invoice */
            readonly contactPerson?: {
                /**
                 * @description Unique identifier of the user
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'SevUser'
                 * @example SevUser
                 */
                objectName: string;
            };
            /**
             * @description This is not used anymore. Use the taxRate of the individual positions instead.
             * @example 0
             */
            readonly taxRate?: string;
            /** @description **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).** */
            taxRule?: {
                /**
                 * @description **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
                 *
                 *     Defines the vat-regulation.
                 *     For "Regelbesteuerung" it can be one of:
                 *       - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
                 *       - `2` - Ausfuhren - allowedTaxRates: 0.0
                 *       - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
                 *       - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
                 *       - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
                 *
                 *     For small business owner ("Kleinunternehmer") it can be:
                 *       - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
                 * @enum {string}
                 */
                id: "1" | "2" | "3" | "4" | "5" | "11";
                /**
                 * @description Name of the object. Must always be TaxRule`
                 * @enum {string}
                 */
                objectName: "TaxRule";
            };
            /**
             * @description A common tax text would be 'Umsatzsteuer 19%'
             * @example Umsatzsteuer 19%
             */
            readonly taxText?: string;
            /**
             * @description Defines how many reminders have already been sent for the invoice.
             *         Starts with 1 (Payment reminder) and should be incremented by one every time another reminder is sent.
             * @example 0
             */
            readonly dunningLevel?: string;
            /**
             * @description **Use this in sevdesk-Update 1.0 (instead of taxRule).**
             *
             *     Tax type of the invoice.
             *     There are four tax types:
             *     1. default - Umsatzsteuer ausweisen
             *     2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
             *     3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
             *     4. custom - Using custom tax set
             *     5. ss - Not subject to VAT according to §19 1 UStG
             *     Tax rates are heavily connected to the tax type used.
             * @example default
             * @enum {string}
             */
            readonly taxType?: "default" | "eu" | "noteu" | "custom";
            /** @description Payment method used for the invoice */
            readonly paymentMethod?: {
                /**
                 * @description Unique identifier of the payment method
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'PaymentMethod'
                 * @example PaymentMethod
                 */
                objectName: string;
            };
            /** @description Cost centre for the invoice */
            readonly costCentre?: {
                /**
                 * @description Unique identifier of the cost centre
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'CostCentre'
                 * @example CostCentre
                 */
                objectName: string;
            };
            /**
             * Format: date-time
             * @description The date the invoice was sent to the customer
             * @example 2024-04-08T00:00:00+02:00
             */
            readonly sendDate?: string;
            /** @description Origin of the invoice. Could f.e. be an order */
            readonly origin?: {
                /**
                 * @description Unique identifier of the object
                 * @example 1
                 */
                id: string;
                /** @description Model name. Could f.e. be 'Order'' */
                objectName: string;
            };
            /**
             * @description Type of the invoice. For more information on the different types, check
             *          <a href='#tag/Invoice/Types-and-status-of-invoices'>this</a> section
             *
             * @example RE
             * @enum {string}
             */
            readonly invoiceType?: "RE" | "WKR" | "SR" | "MA" | "TR" | "ER";
            /**
             * @description The interval in which recurring invoices are due as ISO-8601 duration.<br>
             *          Necessary attribute for all recurring invoices.
             * @example 2022-03-14
             */
            readonly accountIntervall?: string;
            /**
             * @description Timestamp when the next invoice will be generated by this recurring invoice.
             * @example 1647259198
             */
            readonly accountNextInvoice?: string;
            /**
             * @description Total reminder amount
             * @example 0
             */
            readonly reminderTotal?: string;
            /**
             * @description Debit of the reminder
             * @example 0
             */
            readonly reminderDebit?: string;
            /**
             * Format: date-time
             * @description Deadline of the reminder as timestamp
             * @example 01.01.2020
             */
            readonly reminderDeadline?: string;
            /**
             * @description The additional reminder charge
             * @example 0
             */
            readonly reminderCharge?: string;
            /** @description **Use this in sevdesk-Update 1.0 (instead of taxRule).**
             *
             *     Tax set of the invoice. Needs to be added if you chose the tax type custom */
            readonly taxSet?: {
                /**
                 * @description Unique identifier of the object
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'TaxSet'
                 * @example TaxSet
                 */
                objectName: string;
            };
            /**
             * @description Complete address of the recipient including name, street, city, zip and country.
             *          * Line breaks can be used and will be displayed on the invoice pdf.
             * @example name
             *     street
             *     postCode city
             */
            readonly address?: string;
            /**
             * @description Currency used in the invoice. Needs to be currency code according to ISO-4217
             * @example EUR
             */
            readonly currency?: string;
            /**
             * @description Net sum of the invoice
             * @example 100
             */
            readonly sumNet?: string;
            /**
             * @description Tax sum of the invoice
             * @example 19
             */
            readonly sumTax?: string;
            /**
             * @description Gross sum of the invoice
             * @example 119
             */
            readonly sumGross?: string;
            /**
             * @description Sum of all discounts in the invoice
             * @example 0
             */
            readonly sumDiscounts?: string;
            /**
             * @description Net sum of the invoice in the foreign currency
             * @example 0
             */
            readonly sumNetForeignCurrency?: string;
            /**
             * @description Tax sum of the invoice in the foreign currency
             * @example 0
             */
            readonly sumTaxForeignCurrency?: string;
            /**
             * @description Gross sum of the invoice in the foreign currency
             * @example 0
             */
            readonly sumGrossForeignCurrency?: string;
            /**
             * @description Discounts sum of the invoice in the foreign currency
             * @example 0
             */
            readonly sumDiscountsForeignCurrency?: string;
            /**
             * @description Net accounting sum of the invoice. Is usually the same as sumNet
             * @example 0
             */
            readonly sumNetAccounting?: string;
            /**
             * @description Tax accounting sum of the invoice. Is usually the same as sumTax
             * @example 0
             */
            readonly sumTaxAccounting?: string;
            /**
             * @description Gross accounting sum of the invoice. Is usually the same as sumGross
             * @example 0
             */
            readonly sumGrossAccounting?: string;
            /**
             * Format: float
             * @description Amount which has already been paid for this invoice by the customer
             * @example 0
             */
            readonly paidAmount?: number;
            /** @description Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer' */
            readonly customerInternalNote?: string;
            /**
             * @description If true, the net amount of each position will be shown on the invoice. Otherwise gross amount
             * @example 1
             */
            readonly showNet?: boolean;
            /**
             * Format: date-time
             * @description Enshrined invoices cannot be changed. Can only be set via [Invoice/{invoiceId}/enshrine](#tag/Invoice/operation/invoiceEnshrine). This operation cannot be undone.
             * @example 2024-04-08T00:00:00+02:00
             */
            readonly enshrined?: string;
            /**
             * @description Type which was used to send the invoice. IMPORTANT: Please refer to the invoice section of the
             *          *     API-Overview to understand how this attribute can be used before using it!
             * @enum {string}
             */
            readonly sendType?: "VPR" | "VPDF" | "VM" | "VP";
            /**
             * @description If the delivery date should be a time range, another timestamp can be provided in this attribute
             *          * to define a range from timestamp used in deliveryDate attribute to the timestamp used here.
             * @example 2024-04-08T00:00:00+02:00
             */
            readonly deliveryDateUntil?: string;
            /** @description Internal attribute */
            readonly datevConnectOnline?: Record<string, never>;
            /**
             * @description Internal attribute
             * @example 0
             */
            readonly sendPaymentReceivedNotificationDate?: string;
        };
        /**
         * Invoice model
         * @description Invoice model
         */
        Model_Invoice: {
            /**
             * @description The invoice id. <span style='color:red'>Required</span> if you want to create or update an invoice position for an existing invoice
             * @example null
             */
            id?: number | null;
            /**
             * @description The invoice object name.
             * @example Invoice
             */
            objectName?: string;
            /**
             * @description The invoice number
             * @example RE-1000
             */
            invoiceNumber?: string | null;
            /** @description The contact used in the invoice */
            contact: {
                /** @description Unique identifier of the contact */
                id: number;
                /**
                 * @description Model name, which is 'Contact'
                 * @example Contact
                 */
                objectName: string;
            };
            /** @description The user who acts as a contact person for the invoice */
            contactPerson: {
                /** @description Unique identifier of the user */
                id: number;
                /**
                 * @description Model name, which is 'SevUser'
                 * @example SevUser
                 */
                objectName: string;
            };
            /**
             * Format: date-time
             * @description Date of invoice creation
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last invoice update
             */
            readonly update?: string;
            /** @description Client to which invoice belongs. Will be filled automatically */
            readonly sevClient?: {
                /** @description Unique identifier of the client */
                id: number;
                /**
                 * @description Model name, which is 'SevClient'
                 * @example SevClient
                 */
                objectName: string;
            };
            /**
             * @description Needs to be provided as timestamp or dd.mm.yyyy
             *
             *     **Requirements:**
             *     * For final invoices (invoiceType = 'ER'), the invoiceDate must be later than or equal to the invoiceDate of related advance (invoiceType = 'AR') / partial (invoiceType = 'TR') invoices.</li>
             * @example 01.01.2022
             */
            invoiceDate: string;
            /**
             * @description Normally consist of prefix plus the invoice number
             * @example Invoice RE-1000
             */
            header?: string | null;
            /**
             * @description Certain html tags can be used here to format your text
             * @example header information
             */
            headText?: string | null;
            /**
             * @description Certain html tags can be used here to format your text
             * @example footer information
             */
            footText?: string | null;
            /**
             * @description The time the customer has to pay the invoice in days
             * @example 20
             */
            timeToPay?: number | null;
            /**
             * @description If you want to give a discount, define the percentage here. Otherwise provide zero as value
             * @example 0
             */
            discount: number;
            /**
             * @description Complete address of the recipient including name, street, city, zip and country.
             *          * Line breaks can be used and will be displayed on the invoice pdf.
             * @example name
             *     street
             *     postCode city
             */
            address?: string | null;
            /** @description Can be omitted as complete address is defined in address attribute */
            addressCountry: {
                /**
                 * @description Unique identifier of the country
                 * @example 1
                 */
                id: number;
                /**
                 * @description Model name, which is 'StaticCountry'
                 * @example StaticCountry
                 */
                objectName: string;
            };
            /**
             * Format: date-time
             * @description Needs to be timestamp or dd.mm.yyyy
             */
            payDate?: string | null;
            /** @description Will be filled automatically by our system and can't be changed */
            readonly createUser?: {
                /** @description Unique identifier of the user */
                id: number;
                /**
                 * @description Model name, which is 'SevUser'
                 * @example SevUser
                 */
                objectName: string;
            };
            /**
             * Format: date-time
             * @description Timestamp. This can also be a date range if you also use the attribute deliveryDateUntil
             * @example 01.01.2022
             */
            deliveryDate?: string | null;
            /**
             * @description If the delivery date should be a time range, another timestamp can be provided in this attribute
             *          * to define a range from timestamp used in deliveryDate attribute to the timestamp used here.
             * @example null
             */
            deliveryDateUntil?: number | null;
            /**
             * @description Please have a look in our
             *          <a href='#tag/Invoice/Types-and-status-of-invoices'>Types and status of invoices</a>
             *          to see what the different status codes mean
             * @example 100
             * @enum {string}
             */
            status: "50" | "100" | "200" | "750" | "1000";
            /**
             * @description Defines if the client uses the small settlement scheme.
             *         If yes, the invoice must not contain any vat
             * @example 0
             */
            smallSettlement?: boolean | null;
            /**
             * Format: float
             * @description This is not used anymore. Use the taxRate of the individual positions instead.
             * @example 0
             */
            taxRate: number;
            /** @description **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).** */
            taxRule: {
                /**
                 * @description **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
                 *
                 *     Defines the vat-regulation.
                 *     For "Regelbesteuerung" it can be one of:
                 *       - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
                 *       - `2` - Ausfuhren - allowedTaxRates: 0.0
                 *       - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
                 *       - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
                 *       - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
                 *
                 *     For small business owner ("Kleinunternehmer") it can be:
                 *       - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
                 * @enum {string}
                 */
                id: "1" | "2" | "3" | "4" | "5" | "11";
                /**
                 * @description Name of the object. Must always be TaxRule`
                 * @enum {string}
                 */
                objectName: "TaxRule";
            };
            /**
             * @description A common tax text would be 'Umsatzsteuer 19%'
             * @example Umsatzsteuer 19%
             */
            taxText: string;
            /**
             * @description **Use this in sevdesk-Update 1.0 (instead of taxRule).**
             *
             *     Tax type of the invoice.
             *     There are four tax types:
             *     1. default - Umsatzsteuer ausweisen
             *     2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
             *     3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
             *     4. custom - Using custom tax set
             *     5. ss - Not subject to VAT according to §19 1 UStG
             *     Tax rates are heavily connected to the tax type used.
             * @example default
             * @enum {string}
             */
            taxType: "default" | "eu" | "noteu" | "custom";
            /**
             * @description **Use this in sevdesk-Update 1.0 (instead of taxRule).**
             *
             *     Tax set of the invoice. Needs to be added if you chose the tax type custom
             * @example null
             */
            taxSet?: {
                /**
                 * @description Unique identifier of the object
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'TaxSet'
                 * @example TaxSet
                 */
                objectName: string;
            } | null;
            /** @description Defines how many reminders have already been sent for the invoice.
             *         Starts with 1 (Payment reminder) and should be incremented by one every time another reminder is sent. */
            readonly dunningLevel?: number | null;
            /** @description Payment method used for the invoice */
            paymentMethod?: {
                /**
                 * @description Unique identifier of the payment method
                 * @example 21919
                 */
                id: number;
                /**
                 * @description Model name, which is 'PaymentMethod'
                 * @example PaymentMethod
                 */
                objectName: string;
            };
            /**
             * Format: date-time
             * @description The date the invoice was sent to the customer
             * @example 01.01.2020
             */
            sendDate?: string | null;
            /**
             * @description Type of the invoice. For more information on the different types, check
             *          <a href='#tag/Invoice/Types-and-status-of-invoices'>this</a> section
             *
             * @example RE
             * @enum {string}
             */
            invoiceType: "RE" | "WKR" | "SR" | "MA" | "TR" | "ER";
            /** @description The interval in which recurring invoices are due as ISO-8601 duration.<br>
             *          Necessary attribute for all recurring invoices. */
            readonly accountIntervall?: string | null;
            /** @description Timestamp when the next invoice will be generated by this recurring invoice. */
            readonly accountNextInvoice?: number | null;
            /**
             * @description Currency used in the invoice. Needs to be currency code according to ISO-4217
             * @example EUR
             */
            currency: string;
            /**
             * Format: float
             * @description Net sum of the invoice
             */
            readonly sumNet?: number;
            /**
             * Format: float
             * @description Tax sum of the invoice
             */
            readonly sumTax?: number;
            /**
             * Format: float
             * @description Gross sum of the invoice
             */
            readonly sumGross?: number;
            /**
             * Format: float
             * @description Sum of all discounts in the invoice
             */
            readonly sumDiscounts?: number;
            /**
             * Format: float
             * @description Net sum of the invoice in the foreign currency
             */
            readonly sumNetForeignCurrency?: number;
            /**
             * Format: float
             * @description Tax sum of the invoice in the foreign currency
             */
            readonly sumTaxForeignCurrency?: number;
            /**
             * Format: float
             * @description Gross sum of the invoice in the foreign currency
             */
            readonly sumGrossForeignCurrency?: number;
            /**
             * Format: float
             * @description Discounts sum of the invoice in the foreign currency
             */
            readonly sumDiscountsForeignCurrency?: number;
            /**
             * Format: float
             * @description Net accounting sum of the invoice. Is usually the same as sumNet
             */
            readonly sumNetAccounting?: number;
            /**
             * Format: float
             * @description Tax accounting sum of the invoice. Is usually the same as sumTax
             */
            readonly sumTaxAccounting?: number;
            /**
             * Format: float
             * @description Gross accounting sum of the invoice. Is usually the same as sumGross
             */
            readonly sumGrossAccounting?: number;
            /**
             * Format: float
             * @description Amount which has already been paid for this invoice by the customer
             */
            readonly paidAmount?: number | null;
            /**
             * @description If true, the net amount of each position will be shown on the invoice. Otherwise gross amount
             * @example 1
             */
            showNet?: boolean;
            /**
             * Format: date-time
             * @description Enshrined invoices cannot be changed. Can only be set via [Invoice/{invoiceId}/enshrine](#tag/Invoice/operation/invoiceEnshrine). This operation cannot be undone.
             * @example 2024-04-08T00:00:00+02:00
             */
            readonly enshrined?: string;
            /**
             * @description Type which was used to send the invoice.
             * @enum {string|null}
             */
            sendType?: "VPR" | "VPDF" | "VM" | "VP" | null;
            /**
             * @description Origin of the invoice. Could f.e. be an order
             * @example null
             */
            origin?: {
                /**
                 * @description Unique identifier of the object
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which could be 'Order'
                 * @example Order
                 */
                objectName: string;
            } | null;
            /**
             * @description Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'
             * @example null
             */
            customerInternalNote?: string | null;
            /**
             * @description If true, the invoice will be created as e-invoice. This is only possible if the account has system version 2.0
             *
             *     To create a valid e-invoice some extra data are required
             *     - sevClient
             *         - addressStreet
             *         - addressZip
             *         - addressCity
             *         - bankIban
             *         - bankBic
             *         - contactEmail
             *         - contactPhone
             *         - taxNumber
             *         - vatNumber
             *     - contact
             *         - buyerReference
             *         - email
             *     - invoice
             *         - paymentMethod
             *         - addressStreet
             *         - addressZip
             *         - addressCity
             *         - addressCountry
             *         - contact
             * @example false
             */
            propertyIsEInvoice?: boolean | null;
            mapAll: boolean;
        };
        /**
         * Invoice position model
         * @description Invoice position model
         */
        Model_InvoicePos: {
            /**
             * @description The invoice position id. <span style='color:red'>Required</span> if you want to update an invoice position for an existing invoice
             * @example null
             */
            id?: number;
            /**
             * @description The invoice position object name
             * @example InvoicePos
             */
            objectName: string;
            mapAll: boolean;
            /**
             * Format: date-time
             * @description Date of invoice position creation
             * @example 01.01.2020
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last invoice position update
             * @example 01.01.2020
             */
            readonly update?: string;
            /** @description The invoice to which the position belongs. */
            readonly invoice?: {
                /** @description Unique identifier of the invoice */
                id: number;
                /**
                 * @description Model name, which is 'Invoice'
                 * @example Invoice
                 */
                objectName: string;
            };
            /** @description Part from your inventory which is used in the position. */
            part?: {
                /** @description Unique identifier of the part */
                id: number;
                /**
                 * @description Model name, which is 'Part'
                 * @example Part
                 */
                objectName: string;
            };
            /**
             * Format: float
             * @description Quantity of the article/part
             * @example 1
             */
            quantity: number;
            /**
             * Format: float
             * @description Price of the article/part. Is either gross or net, depending on the sevdesk account setting.
             * @example 100
             */
            price?: number | null;
            /**
             * @description Name of the article/part.
             * @example Dragonglass
             */
            name?: string | null;
            /** @description The unit in which the positions part is measured */
            unity: {
                /**
                 * @description Unique identifier of the unit
                 * @example 1
                 */
                id: number;
                /**
                 * @description Model name, which is 'Unity'
                 * @example Unity
                 */
                objectName: string;
            };
            /** @description Client to which invoice position belongs. Will be filled automatically */
            readonly sevClient?: {
                /** @description Unique identifier of the client */
                id: number;
                /**
                 * @description Model name, which is 'SevClient'
                 * @example SevClient
                 */
                objectName: string;
            };
            /** @description Position number of your position. Can be used to order multiple positions. */
            positionNumber?: number | null;
            /** @description A text describing your position. */
            text?: string | null;
            /**
             * Format: float
             * @description An optional discount of the position.
             */
            discount?: number | null;
            /**
             * Format: float
             * @description Tax rate of the position.
             * @example 19
             */
            taxRate: number;
            /**
             * Format: float
             * @description Discount sum of the position
             */
            readonly sumDiscount?: number | null;
            /**
             * Format: float
             * @description Net accounting sum of the position
             */
            readonly sumNetAccounting?: number | null;
            /**
             * Format: float
             * @description Tax accounting sum of the position
             */
            readonly sumTaxAccounting?: number | null;
            /**
             * Format: float
             * @description Gross accounting sum of the position
             */
            readonly sumGrossAccounting?: number | null;
            /**
             * Format: float
             * @description Net price of the part
             */
            readonly priceNet?: number | null;
            /**
             * Format: float
             * @description Gross price of the part
             * @example 100
             */
            priceGross?: number | null;
            /**
             * Format: float
             * @description Tax on the price of the part
             */
            priceTax?: number | null;
        };
        saveInvoice: {
            invoice: components["schemas"]["Model_Invoice"];
            invoicePosSave?: components["schemas"]["Model_InvoicePos"][];
            /** @default null */
            invoicePosDelete: {
                /** @description Id of invoice position */
                id: number;
                /** @description Object name of invoice position */
                objectName: string;
            };
            /**
             * Format: binary
             * @description Filename of a previously upload file which should be attached.
             */
            filename?: string;
            discountSave?: {
                /**
                 * @description Defines if this is a discount or a surcharge
                 * @example true
                 */
                discount?: boolean;
                /** @description A text for your discount */
                text?: string;
                /** @description Defines if this is a percentage or an absolute discount */
                percentage?: boolean;
                /** @description Value of the discount */
                value?: number;
                /**
                 * @description Object name of the discount
                 * @example Discounts
                 */
                objectName?: string;
                /**
                 * @description Internal param
                 * @example true
                 */
                mapAll?: boolean;
            }[];
            /** @example null */
            discountDelete?: {
                /** @description ID of discount to delete */
                id?: number;
                /**
                 * @description Object name of discount
                 * @example Discounts
                 */
                objectName?: string;
            };
        };
        /**
         * Invoice position model
         * @description Invoice position model
         */
        Model_InvoicePosResponse: {
            /** @description The invoice position id */
            readonly id?: string;
            /**
             * @description The invoice position object name
             * @example InvoicePos
             */
            readonly objectName?: string;
            /**
             * Format: date-time
             * @description Date of invoice position creation
             * @example 01.01.2020
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last invoice position update
             * @example 01.01.2020
             */
            readonly update?: string;
            /** @description The invoice to which the position belongs. */
            readonly invoice?: {
                /**
                 * @description Unique identifier of the invoice
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'Invoice'
                 * @example Invoice
                 */
                objectName: string;
            };
            /** @description Part from your inventory which is used in the position. */
            readonly part?: {
                /**
                 * @description Unique identifier of the part
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'Part'
                 * @example Part
                 */
                objectName: string;
            };
            /**
             * @description Quantity of the article/part
             * @example true
             */
            readonly quantity?: boolean;
            /**
             * @description Price of the article/part. Is either gross or net, depending on the sevdesk account setting.
             * @example 100
             */
            readonly price?: string;
            /**
             * @description Name of the article/part.
             * @example Dragonglass
             */
            readonly name?: string;
            /** @description The unit in which the positions part is measured */
            readonly unity?: {
                /**
                 * @description Unique identifier of the unit
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'Unity'
                 * @example Unity
                 */
                objectName: string;
            };
            /** @description Client to which invoice position belongs. Will be filled automatically */
            readonly sevClient?: {
                /**
                 * @description Unique identifier of the client
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'SevClient'
                 * @example SevClient
                 */
                objectName: string;
            };
            /**
             * @description Position number of your position. Can be used to order multiple positions.
             * @example 0
             */
            readonly positionNumber?: string;
            /** @description A text describing your position. */
            readonly text?: string;
            /**
             * @description An optional discount of the position.
             * @example 0
             */
            readonly discount?: string;
            /**
             * @description Tax rate of the position.
             * @example 19
             */
            readonly taxRate?: string;
            /**
             * @description Discount sum of the position
             * @example 0
             */
            readonly sumDiscount?: string;
            /**
             * @description Net accounting sum of the position
             * @example 0
             */
            readonly sumNetAccounting?: string;
            /**
             * @description Tax accounting sum of the position
             * @example 0
             */
            readonly sumTaxAccounting?: string;
            /**
             * @description Gross accounting sum of the position
             * @example 0
             */
            readonly sumGrossAccounting?: string;
            /**
             * @description Net price of the part
             * @example 0
             */
            readonly priceNet?: string;
            /**
             * @description Gross price of the part
             * @example 100
             */
            readonly priceGross?: string;
            /**
             * @description Tax on the price of the part
             * @example 0
             */
            readonly priceTax?: string;
        };
        saveInvoiceResponse: {
            invoice?: components["schemas"]["Model_InvoiceResponse"];
            invoicePos?: components["schemas"]["Model_InvoicePosResponse"][];
            /**
             * Format: binary
             * @description Filename of a previously upload file which should be attached.
             */
            filename?: string;
        };
        /**
         * Create Invoice
         * @description Invoice model
         */
        Model_CreateInvoiceFromOrder: {
            /** @description select the order for which you want to create the invoice */
            order: {
                /** @description Unique identifier of the order */
                id: number;
                /**
                 * @description Model name, which is 'Order'
                 * @example Order
                 */
                objectName: string;
            };
            /**
             * @description defines the type of amount
             * @enum {string|null}
             */
            type?: "percentage" | "net" | "gross" | null;
            /**
             * @description Amount which has already been paid for this Invoice
             * @example 100
             */
            amount?: number | null;
            /**
             * @description defines the type of the invoice
             *     1. RE - Schlussrechnung
             *     2. TR - Teilrechnung
             *     3. AR - Abschlagsrechnung
             * @enum {string|null}
             */
            partialType?: "RE" | "TR" | "AR" | null;
        };
        /**
         * Email model
         * @description Email model
         */
        Model_Email: {
            /** @description The email id */
            readonly id?: number;
            /** @description The email object name */
            readonly objectName?: string;
            /**
             * Format: date-time
             * @description Date of mail creation
             * @example 01.01.2020
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last mail update
             * @example 01.01.2020
             */
            readonly update?: string;
            object?: components["schemas"]["Model_InvoiceResponse"];
            /** @description The sender of the email */
            from: string;
            /** @description The recipient of the email */
            to: string;
            /** @description The subject of the email */
            subject: string;
            /** @description The text of the email */
            text?: string | null;
            /** @description Client to which mail belongs. Will be filled automatically */
            readonly sevClient?: {
                /** @description Unique identifier of the client */
                id: number;
                /** @description Model name, which is 'SevClient' */
                objectName: string;
            };
            /** @description A list of mail addresses which are in the cc */
            cc?: string | null;
            /** @description A list of mail addresses which are in the bcc */
            bcc?: string | null;
            /**
             * Format: date-time
             * @description Date the mail arrived
             * @example 01.01.2020
             */
            arrived?: string | null;
        };
        /**
         * Layout model
         * @description Layout model
         */
        Model_ChangeLayout: {
            /**
             * @description the type to be changed
             * @example template
             * @enum {string}
             */
            key: "language" | "template" | "letterpaper" | "payPal";
            /**
             * @description the id/value of the template/letterpaper/language/payPal.
             * @example 573ef2706bd2d50366786471
             */
            value: string;
        };
        /**
         * Layout model
         * @description Layout model
         */
        Model_ChangeLayoutResponse: {
            /** @example 1 */
            result?: string;
            metadaten?: {
                /**
                 * @description the number of pages in the document
                 * @example 1
                 */
                pages?: number;
                /** @description the id of the document */
                readonly docId?: string;
                /** @description the pdf file */
                thumbs?: {
                    /** @example language */
                    key?: string;
                    /** @example Sprache */
                    name?: string;
                    values?: {
                        /** @example deutsch */
                        name?: string;
                        /** @example de_DE */
                        value?: string;
                        /** @example SEVDOC_LANG_DE_DE */
                        translationCode?: string;
                    }[];
                }[];
            };
        };
        /**
         * Order model
         * @description Order model
         */
        Model_OrderResponse: {
            /**
             * @description The order id
             * @example 0
             */
            readonly id?: string;
            /**
             * @description The order object name
             * @example Order
             */
            readonly objectName?: string;
            /**
             * Format: date-time
             * @description Date of order creation
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last order update
             */
            readonly update?: string;
            /**
             * @description The order number
             * @example Offer-1000
             */
            orderNumber?: string;
            /** @description The contact used in the order */
            contact?: {
                /**
                 * @description Unique identifier of the contact
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'Contact'
                 * @example Contact
                 */
                objectName: string;
            };
            /**
             * Format: date-time
             * @description Needs to be provided as timestamp or dd.mm.yyyy
             * @example 01.01.2020
             */
            orderDate?: string;
            /**
             * @description Please have a look in
             *         <a href='#tag/Order/Types-and-status-of-orders'>status of orders</a>
             *         to see what the different status codes mean
             * @example 100
             * @enum {string}
             */
            status?: "100" | "200" | "300" | "500" | "750" | "1000";
            /**
             * @description Normally consist of prefix plus the order number
             * @example My Offer-1000
             */
            header?: string;
            /** @description Certain html tags can be used here to format your text */
            headText?: string | null;
            /** @description Certain html tags can be used here to format your text */
            footText?: string | null;
            /** @description Can be omitted as complete address is defined in address attribute */
            addressCountry?: {
                /** @description Unique identifier of the country */
                id: string;
                /** @description Model name, which is 'StaticCountry' */
                objectName: string;
            } | null;
            /** @description Will be filled automatically by our system and can't be changed */
            readonly createUser?: {
                /**
                 * @description Unique identifier of the user
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'SevUser'
                 * @example SevUser
                 */
                objectName: string;
            };
            /** @description Client to which order belongs. Will be filled automatically */
            readonly sevClient?: {
                /**
                 * @description Unique identifier of the client
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'SevClient'
                 * @example SevClient
                 */
                objectName: string;
            };
            /** @description Delivery terms of the order */
            deliveryTerms?: string | null;
            /** @description Payment terms of the order */
            paymentTerms?: string | null;
            /** @description Object from which the order was created. For example an offer. */
            origin?: {
                /**
                 * @description Unique identifier of the object
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name of the object. Could be 'Order'.
                 * @example Order
                 */
                objectName: string;
            } | null;
            /**
             * @description Version of the order.<br>
             *         Can be used if you have multiple drafts for the same order.<br>
             *         Should start with 0
             * @example 0
             */
            version?: string;
            /**
             * @description Defines if the client uses the small settlement scheme.
             *         If yes, the order must not contain any vat
             * @example 0
             */
            smallSettlement?: boolean;
            /** @description The user who acts as a contact person for the order */
            contactPerson?: {
                /**
                 * @description Unique identifier of the user
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'SevUser'
                 * @example SevUser
                 */
                objectName: string;
            };
            /**
             * @description This is not used anymore. Use the taxRate of the individual positions instead.
             * @example 0
             */
            taxRate?: string;
            /** @description **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).** */
            taxRule?: {
                /**
                 * @description **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
                 *
                 *     Defines the vat-regulation.
                 *     For "Regelbesteuerung" it can be one of:
                 *       - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
                 *       - `2` - Ausfuhren - allowedTaxRates: 0.0
                 *       - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
                 *       - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
                 *       - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
                 *
                 *     For small business owner ("Kleinunternehmer") it can be:
                 *       - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
                 * @enum {string}
                 */
                id: "1" | "2" | "3" | "4" | "5" | "11";
                /**
                 * @description Name of the object. Must always be TaxRule`
                 * @enum {string}
                 */
                objectName: "TaxRule";
            };
            /** @description **Use this in sevdesk-Update 1.0 (instead of taxRule).**
             *
             *     Tax set of the order. Needs to be added if you chose the tax type custom */
            taxSet?: {
                /**
                 * @description Unique identifier of the object
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'TaxSet'
                 * @example TaxSet
                 */
                objectName: string;
            } | null;
            /**
             * @description A common tax text would be 'Umsatzsteuer 19%'
             * @example Umsatzsteuer 19%
             */
            taxText?: string;
            /**
             * @description **Use this in sevdesk-Update 1.0 (instead of taxRule).**
             *
             *     Tax type of the order.
             *     There are four tax types:
             *     1. default - Umsatzsteuer ausweisen
             *     2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
             *     3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
             *     4. custom - Using custom tax set
             *     5. ss - Not subject to VAT according to §19 1 UStG
             *     Tax rates are heavily connected to the tax type used.
             * @example default
             */
            taxType?: string;
            /**
             * @description Type of the order. For more information on the different types, check
             *         <a href='#tag/Order/Types-and-status-of-orders'>this</a>
             *
             * @example AN
             * @enum {string}
             */
            orderType?: "AN" | "AB" | "LI";
            /**
             * Format: date-time
             * @description The date the order was sent to the customer
             */
            sendDate?: string | null;
            /** @description Complete address of the recipient including name, street, city, zip and country.<br>
             *          Line breaks can be used and will be displayed on the invoice pdf. */
            address?: string | null;
            /**
             * @description Currency used in the order. Needs to be currency code according to ISO-4217
             * @example EUR
             */
            currency?: string;
            /** @description Net sum of the order */
            readonly sumNet?: string;
            /** @description Tax sum of the order */
            readonly sumTax?: string;
            /** @description Gross sum of the order */
            readonly sumGross?: string;
            /** @description Sum of all discounts in the order */
            readonly sumDiscounts?: string;
            /** @description Net sum of the order in the foreign currency */
            readonly sumNetForeignCurrency?: string;
            /** @description Tax sum of the order in the foreign currency */
            readonly sumTaxForeignCurrency?: string;
            /** @description Gross sum of the order in the foreign currency */
            readonly sumGrossForeignCurrency?: string;
            /** @description Discounts sum of the order in the foreign currency */
            readonly sumDiscountsForeignCurrency?: string;
            /** @description Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer' */
            customerInternalNote?: string | null;
            /**
             * @description If true, the net amount of each position will be shown on the order. Otherwise gross amount
             * @example 1
             */
            showNet?: boolean;
            /**
             * @description Type which was used to send the order. IMPORTANT: Please refer to the order section of the
             *          *     API-Overview to understand how this attribute can be used before using it!
             * @enum {string|null}
             */
            sendType?: "VPR" | "VPDF" | "VM" | "VP" | null;
        };
        /**
         * Order model
         * @description Order model
         */
        Model_Order: {
            /** @description The order id */
            readonly id?: number;
            /** @description The order object name */
            objectName?: string;
            mapAll: boolean;
            /**
             * Format: date-time
             * @description Date of order creation
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last order update
             */
            readonly update?: string;
            /**
             * @description The order number
             * @example Offer-1000
             */
            orderNumber: string;
            /** @description The contact used in the order */
            contact: {
                /** @description Unique identifier of the contact */
                id: number;
                /**
                 * @description Model name, which is 'Contact'
                 * @example Contact
                 */
                objectName: string;
            };
            /**
             * Format: date-time
             * @description Needs to be provided as timestamp or dd.mm.yyyy
             * @example 01.01.2020
             */
            orderDate: string;
            /**
             * @description Please have a look in
             *         <a href='#tag/Order/Types-and-status-of-orders'>status of orders</a>
             *         to see what the different status codes mean
             * @example 100
             * @enum {integer}
             */
            status: 100 | 200 | 300 | 500 | 750 | 1000;
            /**
             * @description Normally consist of prefix plus the order number
             * @example My Offer-1000
             */
            header: string;
            /**
             * @description Certain html tags can be used here to format your text
             * @default null
             * @example header information
             */
            headText: string | null;
            /**
             * @description Certain html tags can be used here to format your text
             * @default null
             * @example footer information
             */
            footText: string | null;
            /** @description Can be omitted as complete address is defined in address attribute */
            addressCountry: {
                /** @description Unique identifier of the country */
                id: number;
                /**
                 * @description Model name, which is 'StaticCountry'
                 * @example StaticCountry
                 */
                objectName: string;
            };
            /**
             * @description Delivery terms of the order
             * @default null
             * @example delivery terms
             */
            deliveryTerms: string | null;
            /**
             * @description Payment terms of the order
             * @default null
             * @example payment terms
             */
            paymentTerms: string | null;
            /**
             * @description Version of the order.<br>
             *         Can be used if you have multiple drafts for the same order.<br>
             *         Should start with 0
             * @example 0
             */
            version: number;
            /**
             * @description Defines if the client uses the small settlement scheme.
             *         If yes, the order must not contain any vat
             * @example 0
             */
            smallSettlement?: boolean;
            /** @description The user who acts as a contact person for the order */
            contactPerson: {
                /**
                 * @description Unique identifier of the user
                 * @example 0
                 */
                id: number;
                /**
                 * @description Model name, which is 'SevUser'
                 * @example SevUser
                 */
                objectName: string;
            };
            /**
             * @description This is not used anymore. Use the taxRate of the individual positions instead.
             * @example 0
             */
            taxRate: number;
            /** @description **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).** */
            taxRule: {
                /**
                 * @description **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
                 *
                 *     Defines the vat-regulation.
                 *     For "Regelbesteuerung" it can be one of:
                 *       - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
                 *       - `2` - Ausfuhren - allowedTaxRates: 0.0
                 *       - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
                 *       - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
                 *       - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
                 *
                 *     For small business owner ("Kleinunternehmer") it can be:
                 *       - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
                 * @enum {string}
                 */
                id: "1" | "2" | "3" | "4" | "5" | "11";
                /**
                 * @description Name of the object. Must always be TaxRule`
                 * @enum {string}
                 */
                objectName: "TaxRule";
            };
            /** @description **Use this in sevdesk-Update 1.0 (instead of taxRule).**
             *
             *     Tax set of the order. Needs to be added if you chose the tax type custom */
            taxSet?: {
                /** @description Unique identifier of the object */
                id: number;
                /**
                 * @description Model name, which is 'TaxSet'
                 * @example TaxSet
                 */
                objectName: string;
            } | null;
            /**
             * @description A common tax text would be 'Umsatzsteuer 19%'
             * @example Umsatzsteuer 19%
             */
            taxText: string;
            /**
             * @description **Use this in sevdesk-Update 1.0 (instead of taxRule).**
             *
             *     Tax type of the order.
             *     There are four tax types:
             *     1. default - Umsatzsteuer ausweisen
             *     2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
             *     3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
             *     4. custom - Using custom tax set
             *     5. ss - Not subject to VAT according to §19 1 UStG
             *     Tax rates are heavily connected to the tax type used.
             * @example default
             */
            taxType: string;
            /**
             * @description Type of the order. For more information on the different types, check
             *         <a href='#tag/Order/Types-and-status-of-orders'>this</a>
             *
             * @example AN
             * @enum {string}
             */
            orderType?: "AN" | "AB" | "LI";
            /**
             * Format: date-time
             * @description The date the order was sent to the customer
             * @example 26.07.2022
             */
            sendDate?: string | null;
            /**
             * @description Complete address of the recipient including name, street, city, zip and country.<br>
             *          Line breaks can be used and will be displayed on the invoice pdf.
             * @default null
             * @example name\nstreet\npostCode city
             */
            address: string | null;
            /**
             * @description Currency used in the order. Needs to be currency code according to ISO-4217
             * @example EUR
             */
            currency: string;
            /**
             * @description Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'
             * @default null
             * @example customer internal note
             */
            customerInternalNote: string | null;
            /**
             * @description If true, the net amount of each position will be shown on the order. Otherwise gross amount
             * @example 1
             */
            showNet?: boolean;
            /**
             * @description Type which was used to send the order. IMPORTANT: Please refer to the order section of the
             *          *     API-Overview to understand how this attribute can be used before using it!
             * @default null
             * @example VPR
             * @enum {string|null}
             */
            sendType: "VPR" | "VPDF" | "VM" | "VP" | null;
            /** @description Object from which the order was created. For example an offer. */
            origin?: {
                /** @description Unique identifier of the object */
                id: number;
                /** @description Model name of the object. Could be 'Order'. */
                objectName: string;
            } | null;
        };
        /**
         * Order position model
         * @description Order position model
         */
        Model_OrderPos: {
            /** @description The order position id */
            readonly id?: number;
            /** @description The order position object name */
            readonly objectName?: string;
            /** @description Date of order position creation */
            readonly create?: string;
            /** @description Date of last order position update */
            readonly update?: string;
            /** @description The order to which the position belongs. */
            order?: {
                /** @description Unique identifier of the order */
                id: number;
                /**
                 * @description Model name, which is 'Order'
                 * @example Order
                 */
                objectName: string;
            };
            /** @description Part from your inventory which is used in the position. */
            part?: {
                /** @description Unique identifier of the part */
                id: number;
                /**
                 * @description Model name, which is 'Part'
                 * @example Part
                 */
                objectName: string;
            };
            /**
             * @description Quantity of the article/part
             * @example 1
             */
            quantity: number;
            /**
             * @description Price of the article/part. Is either gross or net, depending on the sevdesk account setting.
             * @example 100
             */
            price?: number | null;
            /** @description Net price of the part */
            readonly priceNet?: number | null;
            /** @description Tax on the price of the part */
            priceTax?: number | null;
            /** @description Gross price of the part */
            priceGross?: number | null;
            /**
             * @description Name of the article/part.
             * @example Dragonglass
             */
            name?: string | null;
            /** @description The unit in which the positions part is measured */
            unity: {
                /** @description Unique identifier of the unit */
                id: number;
                /**
                 * @description Model name, which is 'Unity'
                 * @example Unity
                 */
                objectName: string;
            };
            /** @description Client to which order position belongs. Will be filled automatically */
            readonly sevClient?: {
                /** @description Unique identifier of the client */
                id: number;
                /** @description Model name, which is 'SevClient' */
                objectName: string;
            };
            /**
             * @description Position number of your position. Can be used to order multiple positions.
             * @example 1
             */
            positionNumber?: number | null;
            /** @description A text describing your position. */
            text?: string | null;
            /** @description An optional discount of the position. */
            discount?: number | null;
            /** @description Defines if the position is optional. */
            optional?: boolean | null;
            /**
             * @description Tax rate of the position.
             * @example 19
             */
            taxRate: number;
            /** @description Discount sum of the position */
            readonly sumDiscount?: number | null;
        };
        saveOrder: {
            order: components["schemas"]["Model_Order"];
            orderPosSave?: components["schemas"]["Model_OrderPos"][];
            /** @default null */
            orderPosDelete: {
                /** @description Id of order position */
                id: number;
                /** @description Object name of order position */
                objectName: string;
            };
        };
        /**
         * Order position model
         * @description Order position model
         */
        Model_OrderPosResponse: {
            /**
             * @description The order position id
             * @example 0
             */
            readonly id?: string;
            /**
             * @description The order position object name
             * @example OrderPos
             */
            readonly objectName?: string;
            /**
             * Format: date-time
             * @description Date of order position creation
             * @example 01.01.2020
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last order position update
             * @example 01.01.2020
             */
            readonly update?: string;
            /** @description The order to which the position belongs. */
            order?: {
                /**
                 * @description Unique identifier of the order
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'Order'
                 * @example Order
                 */
                objectName: string;
            };
            /** @description Part from your inventory which is used in the position. */
            part?: {
                /**
                 * @description Unique identifier of the part
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'Part'
                 * @example Part
                 */
                objectName: string;
            };
            /**
             * @description Quantity of the article/part
             * @example 1
             */
            quantity?: string;
            /**
             * @description Price of the article/part. Is either gross or net, depending on the sevdesk account setting.
             * @example 100
             */
            price?: string | null;
            /**
             * @description Net price of the part
             * @example 100
             */
            readonly priceNet?: string | null;
            /**
             * @description Tax on the price of the part
             * @example 19
             */
            priceTax?: string | null;
            /**
             * @description Gross price of the part
             * @example 119
             */
            priceGross?: string | null;
            /**
             * @description Name of the article/part.
             * @example Dragonglass
             */
            name?: string | null;
            /** @description The unit in which the positions part is measured */
            unity?: {
                /**
                 * @description Unique identifier of the unit
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'Unity'
                 * @example Unity
                 */
                objectName: string;
            };
            /** @description Client to which order position belongs. Will be filled automatically */
            readonly sevClient?: {
                /**
                 * @description Unique identifier of the client
                 * @example 0
                 */
                id: string;
                /** @description Model name, which is 'SevClient' */
                objectName: string;
            };
            /**
             * @description Position number of your position. Can be used to order multiple positions.
             * @example 1
             */
            positionNumber?: string | null;
            /** @description A text describing your position. */
            text?: string | null;
            /** @description An optional discount of the position. */
            discount?: string | null;
            /** @description Defines if the position is optional. */
            optional?: boolean | null;
            /**
             * @description Tax rate of the position.
             * @example 19
             */
            taxRate?: string;
            /** @description Discount sum of the position */
            readonly sumDiscount?: string | null;
        };
        saveOrderResponse: {
            order?: components["schemas"]["Model_OrderResponse"];
            orderPos?: components["schemas"]["Model_OrderPosResponse"][];
        };
        /**
         * Order model
         * @description Order model
         */
        Model_OrderUpdate: {
            /** @description The order id */
            readonly id?: number;
            /** @description The order object name */
            readonly objectName?: string;
            /**
             * Format: date-time
             * @description Date of order creation
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last order update
             */
            readonly update?: string;
            /**
             * @description The order number
             * @example Offer-1000
             */
            orderNumber?: string;
            /** @description The contact used in the order */
            contact?: {
                /** @description Unique identifier of the contact */
                id: number;
                /**
                 * @description Model name, which is 'Contact'
                 * @example Contact
                 */
                objectName: string;
            } | null;
            /**
             * Format: date-time
             * @description Needs to be provided as timestamp or dd.mm.yyyy
             * @example 01.01.2020
             */
            orderDate?: string | null;
            /**
             * @description Please have a look in
             *         <a href='#tag/Order/Types-and-status-of-orders'>status of orders</a>
             *         to see what the different status codes mean
             * @example 100
             * @enum {integer|null}
             */
            status?: 100 | 200 | 300 | 500 | 750 | 1000 | null;
            /**
             * @description Normally consist of prefix plus the order number
             * @example My Offer-1000
             */
            header?: string | null;
            /** @description Certain html tags can be used here to format your text */
            headText?: string | null;
            /** @description Certain html tags can be used here to format your text */
            footText?: string | null;
            /** @description Can be omitted as complete address is defined in address attribute */
            addressCountry?: {
                /** @description Unique identifier of the country */
                id: number;
                /** @description Model name, which is 'StaticCountry' */
                objectName: string;
            } | null;
            /** @description Will be filled automatically by our system and can't be changed */
            readonly createUser?: {
                /** @description Unique identifier of the user */
                id: number;
                /** @description Model name, which is 'SevUser' */
                objectName: string;
            };
            /** @description Client to which order belongs. Will be filled automatically */
            readonly sevClient?: {
                /** @description Unique identifier of the client */
                id: number;
                /** @description Model name, which is 'SevClient' */
                objectName: string;
            };
            /** @description Delivery terms of the order */
            deliveryTerms?: string | null;
            /** @description Payment terms of the order */
            paymentTerms?: string | null;
            /** @description Object from which the order was created. For example an offer. */
            origin?: {
                /** @description Unique identifier of the object */
                id: number;
                /** @description Model name of the object. Could be 'Order'. */
                objectName: string;
            } | null;
            /**
             * @description Version of the order.<br>
             *         Can be used if you have multiple drafts for the same order.<br>
             *         Should start with 0
             * @example 0
             */
            version?: number | null;
            /**
             * @description Defines if the client uses the small settlement scheme.
             *         If yes, the order must not contain any vat
             * @example 0
             */
            smallSettlement?: boolean | null;
            /** @description The user who acts as a contact person for the order */
            contactPerson?: {
                /** @description Unique identifier of the user */
                id: number;
                /**
                 * @description Model name, which is 'SevUser'
                 * @example SevUser
                 */
                objectName: string;
            };
            /**
             * @description This is not used anymore. Use the taxRate of the individual positions instead.
             * @example 0
             */
            taxRate?: number | null;
            /** @description **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).** */
            taxRule?: {
                /**
                 * @description **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
                 *
                 *     Defines the vat-regulation.
                 *     For "Regelbesteuerung" it can be one of:
                 *       - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
                 *       - `2` - Ausfuhren - allowedTaxRates: 0.0
                 *       - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
                 *       - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
                 *       - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
                 *
                 *     For small business owner ("Kleinunternehmer") it can be:
                 *       - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
                 * @enum {string}
                 */
                id: "1" | "2" | "3" | "4" | "5" | "11";
                /**
                 * @description Name of the object. Must always be TaxRule`
                 * @enum {string}
                 */
                objectName: "TaxRule";
            };
            /** @description **Use this in sevdesk-Update 1.0 (instead of taxRule).**
             *
             *     Tax set of the order. Needs to be added if you chose the tax type custom */
            taxSet?: {
                /** @description Unique identifier of the object */
                id: number;
                /** @description Model name, which is 'TaxSet' */
                objectName: string;
            } | null;
            /**
             * @description A common tax text would be 'Umsatzsteuer 19%'
             * @example Umsatzsteuer 19%
             */
            taxText?: string | null;
            /**
             * @description **Use this in sevdesk-Update 1.0 (instead of taxRule).**
             *
             *     Tax type of the order.
             *     There are four tax types:
             *     1. default - Umsatzsteuer ausweisen
             *     2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
             *     3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
             *     4. custom - Using custom tax set
             *     5. ss - Not subject to VAT according to §19 1 UStG
             *     Tax rates are heavily connected to the tax type used.
             * @example default
             */
            taxType?: string | null;
            /**
             * @description Type of the order. For more information on the different types, check
             *         <a href='#tag/Order/Types-and-status-of-orders'>this</a>
             *
             * @example AN
             * @enum {string|null}
             */
            orderType?: "AN" | "AB" | "LI" | null;
            /**
             * Format: date-time
             * @description The date the order was sent to the customer
             */
            sendDate?: string | null;
            /** @description Complete address of the recipient including name, street, city, zip and country.<br>
             *          Line breaks can be used and will be displayed on the invoice pdf. */
            address?: string | null;
            /**
             * @description Currency used in the order. Needs to be currency code according to ISO-4217
             * @example EUR
             */
            currency?: string | null;
            /** @description Net sum of the order */
            readonly sumNet?: number;
            /** @description Tax sum of the order */
            readonly sumTax?: number;
            /** @description Gross sum of the order */
            readonly sumGross?: number;
            /** @description Sum of all discounts in the order */
            readonly sumDiscounts?: number;
            /** @description Net sum of the order in the foreign currency */
            readonly sumNetForeignCurrency?: number;
            /** @description Tax sum of the order in the foreign currency */
            readonly sumTaxForeignCurrency?: number;
            /** @description Gross sum of the order in the foreign currency */
            readonly sumGrossForeignCurrency?: number;
            /** @description Discounts sum of the order in the foreign currency */
            readonly sumDiscountsForeignCurrency?: number;
            /** @description Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer' */
            customerInternalNote?: string | null;
            /**
             * @description If true, the net amount of each position will be shown on the order. Otherwise gross amount
             * @example 1
             */
            showNet?: boolean | null;
            /**
             * @description Type which was used to send the order. IMPORTANT: Please refer to the order section of the
             *          *     API-Overview to understand how this attribute can be used before using it!
             * @enum {string|null}
             */
            sendType?: "VPR" | "VPDF" | "VM" | "VP" | null;
        };
        /**
         * Discounts
         * @description Discount model
         */
        Model_Discount: {
            /**
             * @description the id of the discount
             * @example 0
             */
            readonly id?: string;
            /**
             * @description Model name, which is 'Discounts'
             * @example Discounts
             */
            readonly objectName?: string;
            /**
             * Format: date-time
             * @description Date of discount creation
             * @example 01.01.2020
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last discount update
             * @example 01.01.2020
             */
            readonly update?: string;
            /** @description The order used for the discount */
            readonly object?: {
                /**
                 * @description Unique identifier of the order
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'Order'
                 * @example Order
                 */
                objectName: string;
            };
            /**
             * @description Client to which invoice belongs. Will be filled automatically
             * @example 0
             */
            readonly sevClient?: string;
            /** @description A text describing your position. */
            readonly text?: string;
            /**
             * @description Defines if this is a percentage or an absolute discount
             * @example 1
             */
            percentage?: string;
            /**
             * @description Value of the discount
             * @example 10
             */
            value?: string;
            /**
             * @description Defines is the Discount net or gross
             *     0 - gross
             *     1 - net
             * @example 1
             */
            isNet?: string;
        };
        /**
         * Email model
         * @description Email model
         */
        Model_EmailOrder: {
            /** @description The email id */
            readonly id?: number;
            /** @description The email object name */
            readonly objectName?: string;
            /**
             * Format: date-time
             * @description Date of mail creation
             * @example 01.01.2020
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last mail update
             * @example 01.01.2020
             */
            readonly update?: string;
            object?: components["schemas"]["Model_OrderResponse"];
            /** @description The sender of the email */
            from: string;
            /** @description The recipient of the email */
            to: string;
            /** @description The subject of the email */
            subject: string;
            /** @description The text of the email */
            text?: string | null;
            /** @description Client to which mail belongs. Will be filled automatically */
            readonly sevClient?: {
                /** @description Unique identifier of the client */
                id: number;
                /** @description Model name, which is 'SevClient' */
                objectName: string;
            };
            /** @description A list of mail addresses which are in the cc */
            cc?: string | null;
            /** @description A list of mail addresses which are in the bcc */
            bcc?: string | null;
            /**
             * Format: date-time
             * @description Date the mail arrived
             * @example 01.01.2020
             */
            arrived?: string | null;
        };
        /**
         * Create packing list
         * @description order model
         */
        Model_CreatePackingListFromOrder: {
            /** @description Unique identifier of the order */
            id: number;
            /**
             * @description Model name, which is 'Order'
             * @example Order
             */
            objectName: string;
        };
        /**
         * Order position model
         * @description Order position model
         */
        Model_OrderPosUpdate: {
            /** @description The order position id */
            readonly id?: number;
            /**
             * @description The order position object name
             * @example OrderPos
             */
            readonly objectName?: string;
            /**
             * Format: date-time
             * @description Date of order position creation
             * @example 01.01.2020
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last order position update
             * @example 01.01.2020
             */
            readonly update?: string;
            /** @description The order to which the position belongs. */
            order?: {
                /** @description Unique identifier of the order */
                id: number;
                /**
                 * @description Model name, which is 'Order'
                 * @example Order
                 */
                objectName: string;
            };
            /** @description Part from your inventory which is used in the position. */
            part?: {
                /** @description Unique identifier of the part */
                id: number;
                /**
                 * @description Model name, which is 'Part'
                 * @example Part
                 */
                objectName: string;
            };
            /**
             * @description Quantity of the article/part
             * @example 1
             */
            quantity?: number | null;
            /**
             * @description Price of the article/part. Is either gross or net, depending on the sevdesk account setting.
             * @example 100
             */
            price?: number | null;
            /** @description Net price of the part */
            readonly priceNet?: number | null;
            /** @description Tax on the price of the part */
            priceTax?: number | null;
            /** @description Gross price of the part */
            priceGross?: number | null;
            /**
             * @description Name of the article/part.
             * @example Dragonglass
             */
            name?: string | null;
            /** @description The unit in which the positions part is measured */
            unity?: {
                /** @description Unique identifier of the unit */
                id: number;
                /**
                 * @description Model name, which is 'Unity'
                 * @example Unity
                 */
                objectName: string;
            };
            /** @description Client to which order position belongs. Will be filled automatically */
            readonly sevClient?: {
                /** @description Unique identifier of the client */
                id: number;
                /** @description Model name, which is 'SevClient' */
                objectName: string;
            };
            /**
             * @description Position number of your position. Can be used to order multiple positions.
             * @example 1
             */
            positionNumber?: number | null;
            /** @description A text describing your position. */
            text?: string | null;
            /** @description An optional discount of the position. */
            discount?: number | null;
            /** @description Defines if the position is optional. */
            optional?: boolean | null;
            /**
             * @description Tax rate of the position.
             * @example 19
             */
            taxRate?: number | null;
            /** @description Discount sum of the position */
            readonly sumDiscount?: number | null;
        };
        /**
         * Voucher model
         * @description Voucher model
         */
        Model_Voucher: {
            /** @description The voucher id */
            readonly id?: number;
            /** @description The voucher object name */
            objectName: string;
            /** @example true */
            mapAll: boolean;
            /**
             * Format: date-time
             * @description Date of voucher creation
             * @example 01.01.2020
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last voucher update
             * @example 01.01.2020
             */
            readonly update?: string;
            /** @description Client to which voucher belongs. Will be filled automatically */
            readonly sevClient?: {
                /** @description Unique identifier of the client */
                id: number;
                /**
                 * @description Model name, which is 'SevClient'
                 * @example SevClient
                 */
                objectName: string;
            };
            /** @description User who created the voucher. Will be filled automatically. */
            readonly createUser?: {
                /** @description Unique identifier of the user */
                id: number;
                /**
                 * @description Model name, which is 'SevUser'
                 * @example SevUser
                 */
                objectName: string;
            };
            /**
             * Format: date-time
             * @description Needs to be provided as timestamp or dd.mm.yyyy
             * @example 01.01.2022
             */
            voucherDate?: string | null;
            /** @description The contact used in the voucher as a supplier.<br>
             *     If you don't have a contact as a supplier, you can set this object to null. */
            supplier?: {
                /** @description Unique identifier of the contact */
                id: number;
                /**
                 * @description Model name, which is 'Contact'
                 * @example Contact
                 */
                objectName: string;
            } | null;
            /**
             * @description The supplier name.<br>
             *          The value you provide here will determine what supplier name is shown for the voucher in case you did not provide a supplier.
             * @example John Snow
             */
            supplierName?: string | null;
            /**
             * @description The description of the voucher. Essentially the voucher number.
             * @example Voucher-1000
             */
            description?: string | null;
            /**
             * Format: date-time
             * @description Needs to be timestamp or dd.mm.yyyy
             * @example 01.01.2022
             */
            payDate?: string | null;
            /**
             * @description Please have a look in
             *         <a href='#tag/Voucher/Types-and-status-of-vouchers'>status of vouchers</a>
             *         to see what the different status codes mean
             * @example 50
             * @enum {number}
             */
            status: 50 | 100 | 1000;
            /**
             * Format: float
             * @description Net sum of the voucher
             */
            readonly sumNet?: number;
            /**
             * Format: float
             * @description Tax sum of the voucher
             */
            readonly sumTax?: number;
            /**
             * Format: float
             * @description Gross sum of the voucher
             */
            readonly sumGross?: number;
            /**
             * Format: float
             * @description Net accounting sum of the voucher. Is usually the same as sumNet
             */
            readonly sumNetAccounting?: number;
            /**
             * Format: float
             * @description Tax accounting sum of the voucher. Is usually the same as sumTax
             */
            readonly sumTaxAccounting?: number;
            /**
             * Format: float
             * @description Gross accounting sum of the voucher. Is usually the same as sumGross
             */
            readonly sumGrossAccounting?: number;
            /**
             * Format: float
             * @description Sum of all discounts in the voucher
             */
            readonly sumDiscounts?: number;
            /**
             * Format: float
             * @description Discounts sum of the voucher in the foreign currency
             */
            readonly sumDiscountsForeignCurrency?: number;
            /**
             * Format: float
             * @description Amount which has already been paid for this voucher by the customer
             */
            readonly paidAmount?: number | null;
            /** @description **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).** */
            taxRule: {
                /**
                 * @description **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
                 *
                 *     Defines the vat-regulation.
                 *     For "Regelbesteuerung" it can be one of:
                 *       - `1` - Umsatzsteuerpflichtige Umsätze (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "default"`
                 *       - `2` - Ausfuhren (tax rates: 0.0)
                 *       - `3` - Innergemeinschaftliche Lieferungen (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "eu"`
                 *       - `4` - Steuerfreie Umsätze §4 UStG (tax rates: 0.0)
                 *       - `5` - Reverse Charge gem. §13b UStG (tax rates: 0.0)
                 *
                 *     For small business owner ("Kleinunternehmer") it can be:
                 *       - `11` - Steuer nicht erhoben nach §19UStG (tax rates: 0.0) - replaces `"taxType": "ss"`
                 * @enum {string}
                 */
                id: "1" | "2" | "3" | "4" | "5" | "11";
                /**
                 * @description Name of the object. Must always be TaxRule`
                 * @enum {string}
                 */
                objectName: "TaxRule";
            };
            /**
             * @description **Use this in sevdesk-Update 1.0 (instead of taxRule).**
             *
             *     Tax type of the voucher.
             *     There are four tax types:
             *     1. default - Umsatzsteuer ausweisen
             *     2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
             *     3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
             *     4. custom - Using custom tax set
             *     5. ss - Not subject to VAT according to §19 1 UStG
             *     Tax rates are heavily connected to the tax type used.
             * @example default
             */
            taxType: string;
            /**
             * @description Defines if your voucher is a credit (C) or debit (D)
             * @example C
             * @enum {string}
             */
            creditDebit: "C" | "D";
            /**
             * @description Type of the voucher. For more information on the different types, check
             *          <a href='#tag/Voucher/Types-and-status-of-vouchers'>this</a>
             *
             * @example VOU
             * @enum {string}
             */
            voucherType: "VOU" | "RV";
            /**
             * @description specifies which currency the voucher should have. Attention: If the currency differs from the default currency stored in the account, then either the "propertyForeignCurrencyDeadline" or "propertyExchangeRate" parameter must be specified. If both parameters are specified, then the "propertyForeignCurrencyDeadline" parameter is preferred
             * @example EUR
             */
            currency?: string | null;
            /**
             * Format: date-time
             * @description Defines the exchange rate day and and then the exchange rate is set from sevdesk. Needs to be provided as timestamp or dd.mm.yyyy
             * @example 01.01.2022
             */
            propertyForeignCurrencyDeadline?: string | null;
            /**
             * Format: float
             * @description Defines the exchange rate
             * @example 0.8912
             */
            propertyExchangeRate?: number | null;
            /**
             * @description The DateInterval in which recurring vouchers are generated.<br>
             *          Necessary attribute for all recurring vouchers.
             * @enum {string|null}
             */
            readonly recurringInterval?: "P0Y0M1W" | "P0Y0M2W" | "P0Y1M0W" | "P0Y3M0W" | "P0Y6M0W" | "P1Y0M0W" | "P2Y0M0W" | "P3Y0M0W" | "P4Y0M0W" | "P5Y0M0W" | null;
            /**
             * Format: date-time
             * @description The date when the recurring vouchers start being generated.<br>
             *          Necessary attribute for all recurring vouchers.
             * @example 01.01.2020
             */
            readonly recurringStartDate?: string | null;
            /**
             * Format: date-time
             * @description The date when the next voucher should be generated.<br>
             *          Necessary attribute for all recurring vouchers.
             * @example 01.02.2020
             */
            readonly recurringNextVoucher?: string | null;
            /**
             * Format: date-time
             * @description The date when the last voucher was generated.
             * @example 01.01.2021
             */
            readonly recurringLastVoucher?: string | null;
            /**
             * Format: date-time
             * @description The date when the recurring vouchers end being generated.<br>
             *         Necessary attribute for all recurring vouchers.
             * @example 01.01.2021
             */
            readonly recurringEndDate?: string | null;
            /**
             * Format: date-time
             * @description Enshrined vouchers cannot be changed. Can only be set via [Voucher/{voucherId}/enshrine](#tag/Voucher/operation/voucherEnshrine). This operation cannot be undone.
             * @example 2024-04-08T00:00:00+02:00
             */
            readonly enshrined?: string;
            /**
             * @description ** Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
             *
             *     Tax set of the voucher. Needs to be added if you chose the taxType=custom.
             * @example null
             */
            taxSet?: {
                /** @description Unique identifier of the object */
                id: number;
                /**
                 * @description Model name, which is 'TaxSet'
                 * @example TaxSet
                 */
                objectName: string;
            } | null;
            /**
             * Format: date-time
             * @description Payment deadline of the voucher.
             * @example 01.01.2022
             */
            paymentDeadline?: string | null;
            /**
             * Format: date-time
             * @description Needs to be provided as timestamp or dd.mm.yyyy
             * @example 01.01.2022
             */
            deliveryDate?: string;
            /**
             * Format: date-time
             * @description Needs to be provided as timestamp or dd.mm.yyyy
             * @example 22.02.2022
             */
            deliveryDateUntil?: string | null;
            /**
             * @description The document of the voucher.
             * @example null
             */
            document?: {
                /** @description Unique identifier of the document */
                id: number;
                /**
                 * @description Model name, which is 'Document'
                 * @example Document
                 */
                objectName: string;
            } | null;
            /**
             * @description Cost centre for the voucher
             * @example null
             */
            costCentre?: {
                /** @description Unique identifier of the cost centre */
                id: number;
                /**
                 * @description Model name, which is 'CostCentre'
                 * @example CostCentre
                 */
                objectName: string;
            };
        };
        /**
         * VoucherPos model
         * @description Voucher position model
         */
        Model_VoucherPos: {
            /** @description The voucher position id */
            readonly id?: number;
            /** @description The voucher position object name */
            objectName: string;
            mapAll: boolean;
            /**
             * @description Date of voucher position creation
             * @example 01.01.2020
             */
            readonly create?: string;
            /**
             * @description Date of last voucher position update
             * @example 01.01.2020
             */
            readonly update?: string;
            /** @description Client to which voucher position belongs. Will be filled automatically */
            readonly sevClient?: {
                /** @description Unique identifier of the client */
                id: number;
                /** @description Model name, which is 'SevClient' */
                objectName: string;
            };
            /** @description The voucher to which the position belongs. */
            readonly voucher: {
                /** @description Unique identifier of the voucher */
                id: number;
                /**
                 * @description Model name, which is 'Voucher'
                 * @example Voucher
                 */
                objectName: string;
            };
            /** @description <b>Use this in sevdesk-Update 2.0 (replaces accountingType).</b>
             *          The account datev to which the position belongs.<br>
             *          An account datev is the booking account to which the position belongs.<br>
             *          For more information, please refer to
             *      <a href='#tag/Voucher/Account-Datev'>this</a> section. */
            accountDatev: {
                /** @description Unique identifier of the account datev */
                id: number;
                /**
                 * @description Model name, which is 'AccountDatev'
                 * @example AccountDatev
                 */
                objectName: string;
            };
            /** @description The accounting type to which the position belongs.<br>
             *          An accounting type is the booking account to which the position belongs.<br>
             *          For more information, please refer to
             *      <a href='#tag/Voucher/Accounting-type'>this</a> section. */
            accountingType: {
                /** @description Unique identifier of the accounting type */
                id: number;
                /**
                 * @description Model name, which is 'AccountingType'
                 * @example AccountingType
                 */
                objectName: string;
            };
            /** @description The accounting type to which the position belongs estimated by our voucher recognition.<br>
             *         An accounting type is the booking account to which the position belongs.<br>
             *         For more information, please refer to
             *         <a href='#tag/Voucher/Accounting-type'>this</a> section. */
            readonly estimatedAccountingType?: {
                /** @description Unique identifier of the accounting type */
                id: number;
                /**
                 * @description Model name, which is 'AccountingType'
                 * @example AccountingType
                 */
                objectName: string;
            };
            /**
             * Format: float
             * @description Tax rate of the voucher position.
             * @example 19
             */
            taxRate: number;
            /**
             * @description Determines whether 'sumNet' or 'sumGross' is regarded.<br>
             *          If both are not given, 'sum' is regarded and treated as net or gross depending on 'net'.
             *      All positions must be either net or gross, a mixture of the two is not possible.
             * @example true
             */
            net: boolean;
            /**
             * @description Determines whether position is regarded as an asset which can be depreciated.
             * @example false
             */
            isAsset?: boolean;
            /**
             * Format: float
             * @description Net sum of the voucher position.<br>
             *         Only regarded if 'net' is 'true', otherwise its readOnly.
             * @example 100
             */
            sumNet: number;
            /**
             * Format: float
             * @description Tax sum of the voucher position.
             * @example 19
             */
            readonly sumTax?: number;
            /**
             * Format: float
             * @description Gross sum of the voucher position.<br>
             *         Only regarded if 'net' is 'false', otherwise its readOnly.
             * @example 119
             */
            sumGross: number;
            /**
             * Format: float
             * @description Net accounting sum. Is equal to sumNet.
             */
            readonly sumNetAccounting?: number;
            /**
             * Format: float
             * @description Tax accounting sum. Is equal to sumTax.
             */
            readonly sumTaxAccounting?: number;
            /**
             * Format: float
             * @description Gross accounting sum. Is equal to sumGross.
             */
            readonly sumGrossAccounting?: number;
            /** @description Comment for the voucher position. */
            comment?: string | null;
        };
        saveVoucher: {
            voucher: components["schemas"]["Model_Voucher"];
            voucherPosSave?: components["schemas"]["Model_VoucherPos"][];
            /** @default null */
            voucherPosDelete: {
                /** @description Id of voucher position */
                id: number;
                /** @description Object name of voucher position */
                objectName: string;
            };
            /**
             * Format: binary
             * @description Filename of a previously upload file which should be attached.
             */
            filename?: string;
        };
        /**
         * Voucher model
         * @description Voucher model
         */
        Model_VoucherResponse: {
            /**
             * @description The voucher id
             * @example 0
             */
            readonly id?: string;
            /** @description The voucher object name */
            readonly objectName?: string;
            /** @example true */
            mapAll?: boolean;
            /**
             * Format: date-time
             * @description Date of voucher creation
             * @example 01.01.2020
             */
            readonly create?: string;
            /**
             * Format: date-time
             * @description Date of last voucher update
             * @example 01.01.2020
             */
            readonly update?: string;
            /** @description Client to which voucher belongs. Will be filled automatically */
            readonly sevClient?: {
                /**
                 * @description Unique identifier of the client
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'SevClient'
                 * @example SevClient
                 */
                objectName: string;
            };
            /** @description User who created the voucher. Will be filled automatically. */
            readonly createUser?: {
                /**
                 * @description Unique identifier of the user
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'SevUser'
                 * @example SevUser
                 */
                objectName: string;
            };
            /**
             * Format: date-time
             * @description Needs to be provided as timestamp or dd.mm.yyyy
             * @example 01.01.2020
             */
            voucherDate?: string | null;
            /** @description The contact used in the voucher as a supplier.<br>
             *     If you don't have a contact as a supplier, you can set this object to null. */
            supplier?: {
                /**
                 * @description Unique identifier of the contact
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'Contact'
                 * @example Contact
                 */
                objectName: string;
            } | null;
            /**
             * @description The supplier name.<br>
             *          The value you provide here will determine what supplier name is shown for the voucher in case you did not provide a supplier.
             * @example John Snow
             */
            supplierName?: string | null;
            /**
             * @description The description of the voucher. Essentially the voucher number.
             * @example Voucher-1000
             */
            description?: string | null;
            /** @description The document of the voucher. */
            document?: {
                /**
                 * @description Unique identifier of the document
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'Document'
                 * @example Document
                 */
                objectName: string;
            } | null;
            /**
             * Format: date-time
             * @description Needs to be timestamp or dd.mm.yyyy
             * @example 01.01.2020
             */
            payDate?: string | null;
            /**
             * @description Please have a look in
             *         <a href='#tag/Voucher/Types-and-status-of-vouchers'>status of vouchers</a>
             *         to see what the different status codes mean
             * @example 50
             * @enum {string|null}
             */
            status?: "50" | "100" | "1000" | null;
            /**
             * @description Net sum of the voucher
             * @example 0
             */
            readonly sumNet?: string;
            /**
             * @description Tax sum of the voucher
             * @example 0
             */
            readonly sumTax?: string;
            /**
             * @description Gross sum of the voucher
             * @example 0
             */
            readonly sumGross?: string;
            /**
             * @description Net accounting sum of the voucher. Is usually the same as sumNet
             * @example 0
             */
            readonly sumNetAccounting?: string;
            /**
             * @description Tax accounting sum of the voucher. Is usually the same as sumTax
             * @example 0
             */
            readonly sumTaxAccounting?: string;
            /**
             * @description Gross accounting sum of the voucher. Is usually the same as sumGross
             * @example 0
             */
            readonly sumGrossAccounting?: string;
            /**
             * @description Sum of all discounts in the voucher
             * @example 0
             */
            readonly sumDiscounts?: string;
            /**
             * @description Discounts sum of the voucher in the foreign currency
             * @example 0
             */
            readonly sumDiscountsForeignCurrency?: string;
            /**
             * @description Amount which has already been paid for this voucher by the customer
             * @example 0
             */
            readonly paidAmount?: number | null;
            /** @description **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).** */
            taxRule?: {
                /**
                 * @description **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
                 *
                 *     Defines the vat-regulation.
                 *     For "Regelbesteuerung" it can be one of:
                 *       - `1` - Umsatzsteuerpflichtige Umsätze (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "default"`
                 *       - `2` - Ausfuhren (tax rates: 0.0)
                 *       - `3` - Innergemeinschaftliche Lieferungen (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "eu"`
                 *       - `4` - Steuerfreie Umsätze §4 UStG (tax rates: 0.0)
                 *       - `5` - Reverse Charge gem. §13b UStG (tax rates: 0.0)
                 *
                 *     For small business owner ("Kleinunternehmer") it can be:
                 *       - `11` - Steuer nicht erhoben nach §19UStG (tax rates: 0.0) - replaces `"taxType": "ss"`
                 * @enum {string}
                 */
                id: "1" | "2" | "3" | "4" | "5" | "11";
                /**
                 * @description Name of the object. Must always be TaxRule`
                 * @enum {string}
                 */
                objectName: "TaxRule";
            };
            /**
             * @description **Use this in sevdesk-Update 1.0 (instead of taxRule).**
             *
             *     Tax type of the voucher.
             *     There are four tax types:
             *     1. default - Umsatzsteuer ausweisen
             *     2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
             *     3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
             *     4. custom - Using custom tax set
             *     5. ss - Not subject to VAT according to §19 1 UStG
             *     Tax rates are heavily connected to the tax type used.
             * @example default
             */
            taxType?: string | null;
            /**
             * @description Defines if your voucher is a credit (C) or debit (D)
             * @example C
             * @enum {string|null}
             */
            creditDebit?: "C" | "D" | null;
            /** @description Cost centre for the voucher */
            costCentre?: {
                /**
                 * @description Unique identifier of the cost centre
                 * @example 0
                 */
                id: string;
                /** @description Model name, which is 'CostCentre' */
                objectName: string;
            };
            /**
             * @description Type of the voucher. For more information on the different types, check
             *          <a href='#tag/Voucher/Types-and-status-of-vouchers'>this</a>
             *
             * @example VOU
             * @enum {string|null}
             */
            voucherType?: "VOU" | "RV" | null;
            /**
             * @description specifies which currency the voucher should have. Attention: If the currency differs from the default currency stored in the account, then either the "propertyForeignCurrencyDeadline" or "propertyExchangeRate" parameter must be specified. If both parameters are specified, then the "propertyForeignCurrencyDeadline" parameter is preferred
             * @example EUR
             */
            currency?: string | null;
            /**
             * Format: date-time
             * @description Defines the exchange rate day and and then the exchange rate is set from sevdesk. Needs to be provided as timestamp or dd.mm.yyyy
             * @example 01.01.2022
             */
            propertyForeignCurrencyDeadline?: string | null;
            /**
             * @description Defines the exchange rate
             * @example 0.8912
             */
            propertyExchangeRate?: string | null;
            /**
             * @description The DateInterval in which recurring vouchers are generated.<br>
             *          Necessary attribute for all recurring vouchers.
             * @enum {string|null}
             */
            recurringInterval?: "P0Y0M1W" | "P0Y0M2W" | "P0Y1M0W" | "P0Y3M0W" | "P0Y6M0W" | "P1Y0M0W" | "P2Y0M0W" | "P3Y0M0W" | "P4Y0M0W" | "P5Y0M0W" | null;
            /**
             * Format: date-time
             * @description The date when the recurring vouchers start being generated.<br>
             *          Necessary attribute for all recurring vouchers.
             * @example 01.01.2020
             */
            recurringStartDate?: string | null;
            /**
             * Format: date-time
             * @description The date when the next voucher should be generated.<br>
             *          Necessary attribute for all recurring vouchers.
             * @example 01.02.2020
             */
            recurringNextVoucher?: string | null;
            /**
             * Format: date-time
             * @description The date when the last voucher was generated.
             * @example 01.01.2021
             */
            recurringLastVoucher?: string | null;
            /**
             * Format: date-time
             * @description The date when the recurring vouchers end being generated.<br>
             *         Necessary attribute for all recurring vouchers.
             * @example 01.01.2021
             */
            recurringEndDate?: string | null;
            /**
             * Format: date-time
             * @description Enshrined vouchers cannot be changed. Can only be set via [Voucher/{voucherId}/enshrine](#tag/Voucher/operation/voucherEnshrine). This operation cannot be undone.
             * @example 2024-04-08T00:00:00+02:00
             */
            readonly enshrined?: string;
            /** @description **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
             *
             *     Tax set of the voucher. Needs to be added if you chose the taxType=custom. */
            taxSet?: {
                /**
                 * @description Unique identifier of the object
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'TaxSet'
                 * @example TaxSet
                 */
                objectName: string;
            } | null;
            /**
             * Format: date-time
             * @description Payment deadline of the voucher.
             * @example 01.01.2020
             */
            paymentDeadline?: string | null;
            /**
             * Format: date-time
             * @description Needs to be provided as timestamp or dd.mm.yyyy
             * @example 01.01.2020
             */
            deliveryDate?: string;
            /**
             * Format: date-time
             * @description Needs to be provided as timestamp or dd.mm.yyyy
             * @example 01.01.2020
             */
            deliveryDateUntil?: string | null;
        };
        /**
         * VoucherPos model
         * @description Voucher position model
         */
        Model_VoucherPosResponse: {
            /**
             * @description The voucher position id
             * @example 0
             */
            readonly id?: string;
            /** @description The voucher position object name */
            readonly objectName?: string;
            /**
             * @description Date of voucher position creation
             * @example 01.01.2020
             */
            readonly create?: string;
            /**
             * @description Date of last voucher position update
             * @example 01.01.2020
             */
            readonly update?: string;
            /** @description Client to which voucher position belongs. Will be filled automatically */
            readonly sevClient?: {
                /**
                 * @description Unique identifier of the client
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'SevClient'
                 * @example SevClient
                 */
                objectName: string;
            };
            /** @description The voucher to which the position belongs. */
            readonly voucher: {
                /**
                 * @description Unique identifier of the voucher
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'Voucher'
                 * @example Voucher
                 */
                objectName: string;
            };
            /** @description <b>Use this in sevdesk-Update 2.0 (replaces accountingType).</b>
             *          The account datev to which the position belongs.<br>
             *          An account datev is the booking account to which the position belongs.<br>
             *          For more information, please refer to
             *      <a href='#tag/Voucher/Account-Datev'>this</a> section. */
            accountDatev: {
                /** @description Unique identifier of the account datev */
                id: number;
                /**
                 * @description Model name, which is 'AccountDatev'
                 * @example AccountDatev
                 */
                objectName: string;
            };
            /** @description The accounting type to which the position belongs.<br>
             *          An accounting type is the booking account to which the position belongs.<br>
             *          For more information, please refer to
             *      <a href='#tag/Voucher/Accounting-type'>this</a> section. */
            accountingType: {
                /**
                 * @description Unique identifier of the accounting type
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'AccountingType'
                 * @example AccountingType
                 */
                objectName: string;
            };
            /** @description The accounting type to which the position belongs estimated by our voucher recognition.<br>
             *         An accounting type is the booking account to which the position belongs.<br>
             *         For more information, please refer to
             *         <a href='#tag/Voucher/Accounting-type'>this</a> section. */
            readonly estimatedAccountingType?: {
                /**
                 * @description Unique identifier of the accounting type
                 * @example 0
                 */
                id: string;
                /**
                 * @description Model name, which is 'AccountingType'
                 * @example AccountingType
                 */
                objectName: string;
            };
            /**
             * @description Tax rate of the voucher position.
             * @example 19
             */
            taxRate: string;
            /**
             * @description Determines whether 'sumNet' or 'sumGross' is regarded.<br>
             *          If both are not given, 'sum' is regarded and treated as net or gross depending on 'net'.
             *      All positions must be either net or gross, a mixture of the two is not possible.
             * @example true
             */
            net: boolean;
            /**
             * @description Determines whether position is regarded as an asset which can be depreciated.
             * @example false
             */
            isAsset?: boolean;
            /**
             * @description Net sum of the voucher position.<br>
             *         Only regarded if 'net' is 'true', otherwise its readOnly.
             * @example 100
             */
            sumNet: string;
            /**
             * @description Tax sum of the voucher position.
             * @example 19
             */
            readonly sumTax?: string;
            /**
             * @description Gross sum of the voucher position.<br>
             *         Only regarded if 'net' is 'false', otherwise its readOnly.
             * @example 119
             */
            sumGross: string;
            /**
             * @description Net accounting sum. Is equal to sumNet.
             * @example 0
             */
            readonly sumNetAccounting?: string;
            /**
             * @description Tax accounting sum. Is equal to sumTax.
             * @example 0
             */
            readonly sumTaxAccounting?: string;
            /**
             * @description Gross accounting sum. Is equal to sumGross.
             * @example 0
             */
            readonly sumGrossAccounting?: string;
            /** @description Comment for the voucher position. */
            comment?: string | null;
        };
        saveVoucherResponse: {
            voucher?: components["schemas"]["Model_VoucherResponse"];
            voucherPos?: components["schemas"]["Model_VoucherPosResponse"][];
            /**
             * Format: binary
             * @description Filename of a previously upload file which should be attached.
             */
            filename?: string;
        };
        /**
         * Voucher model
         * @description Voucher model
         */
        Model_VoucherUpdate: {
            /**
             * Format: date-time
             * @description Needs to be provided as timestamp or dd.mm.yyyy
             * @example 01.01.2022
             */
            voucherDate?: string | null;
            /** @description The contact used in the voucher as a supplier.<br>
             *     If you don't have a contact as a supplier, you can set this object to null. */
            supplier?: {
                /** @description Unique identifier of the contact */
                id: number;
                /**
                 * @description Model name, which is 'Contact'
                 * @default Contact
                 */
                objectName: string;
            } | null;
            /**
             * @description The supplier name.<br>
             *          The value you provide here will determine what supplier name is shown for the voucher in case you did not provide a supplier.
             * @example John Snow
             */
            supplierName?: string | null;
            /**
             * @description The description of the voucher. Essentially the voucher number.
             * @example Voucher-1000
             */
            description?: string | null;
            /**
             * Format: date-time
             * @description Needs to be timestamp or dd.mm.yyyy
             * @example 01.01.2022
             */
            payDate?: string | null;
            /**
             * @description <b>Not supported in sevdesk-Update 2.0.</b><br><br>    Please have a look in <a href='#tag/Voucher/Types-and-status-of-vouchers'>status of vouchers</a>    to see what the different status codes mean
             * @example 50
             * @enum {number}
             */
            status?: 50 | 100 | 1000;
            /**
             * Format: float
             * @description Amount which has already been paid for this voucher by the customer
             */
            readonly paidAmount?: number | null;
            /** @description **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).** */
            taxRule?: {
                /**
                 * @description **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
                 *
                 *     Defines the vat-regulation.
                 *     For "Regelbesteuerung" it can be one of:
                 *       - `1` - Umsatzsteuerpflichtige Umsätze (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "default"`
                 *       - `2` - Ausfuhren (tax rates: 0.0)
                 *       - `3` - Innergemeinschaftliche Lieferungen (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "eu"`
                 *       - `4` - Steuerfreie Umsätze §4 UStG (tax rates: 0.0)
                 *       - `5` - Reverse Charge gem. §13b UStG (tax rates: 0.0)
                 *
                 *     For small business owner ("Kleinunternehmer") it can be:
                 *       - `11` - Steuer nicht erhoben nach §19UStG (tax rates: 0.0) - replaces `"taxType": "ss"`
                 * @enum {string}
                 */
                id: "1" | "2" | "3" | "4" | "5" | "11";
                /**
                 * @description Name of the object. Must always be TaxRule`
                 * @enum {string}
                 */
                objectName: "TaxRule";
            };
            /**
             * @description **Use this in sevdesk-Update 1.0 (instead of taxRule).**
             *
             *     Tax type of the voucher.
             *     There are four tax types:
             *     1. default - Umsatzsteuer ausweisen
             *     2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
             *     3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
             *     4. custom - Using custom tax set
             *     5. ss - Not subject to VAT according to §19 1 UStG
             *     Tax rates are heavily connected to the tax type used.
             * @example default
             */
            taxType?: string;
            /**
             * @description Defines if your voucher is a credit (C) or debit (D)
             * @example C
             * @enum {string}
             */
            creditDebit?: "C" | "D";
            /**
             * @description Type of the voucher. For more information on the different types, check
             *      <a href='#tag/Voucher/Types-and-status-of-vouchers'>this</a>
             *
             * @example VOU
             * @enum {string}
             */
            voucherType?: "VOU" | "RV";
            /**
             * @description specifies which currency the voucher should have. Attention: If the currency differs from the default currency stored in the account, then either the "propertyForeignCurrencyDeadline" or "propertyExchangeRate" parameter must be specified. If both parameters are specified, then the "propertyForeignCurrencyDeadline" parameter is preferred
             * @example EUR
             */
            currency?: string | null;
            /**
             * Format: date-time
             * @description Defines the exchange rate day and and then the exchange rate is set from sevdesk. Needs to be provided as timestamp or dd.mm.yyyy
             * @example 01.01.2022
             */
            propertyForeignCurrencyDeadline?: string | null;
            /**
             * Format: float
             * @description Defines the exchange rate
             * @example 0.8912
             */
            propertyExchangeRate?: number | null;
            /**
             * @description **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
             *
             *     Tax set of the voucher. Needs to be added if you chose the taxType=custom.
             * @example null
             */
            taxSet?: {
                /** @description Unique identifier of the object */
                id: number;
                /**
                 * @description Model name, which is 'TaxSet'
                 * @example TaxSet
                 */
                objectName: string;
            } | null;
            /**
             * Format: date-time
             * @description Payment deadline of the voucher.
             * @example 01.01.2022
             */
            paymentDeadline?: string | null;
            /**
             * Format: date-time
             * @description Needs to be provided as timestamp or dd.mm.yyyy
             * @example 01.01.2022
             */
            deliveryDate?: string;
            /**
             * Format: date-time
             * @description Needs to be provided as timestamp or dd.mm.yyyy
             * @example 22.02.2022
             */
            deliveryDateUntil?: string | null;
            /**
             * @description The document of the voucher.
             * @example null
             */
            document?: {
                /** @description Unique identifier of the document */
                id: number;
                /**
                 * @description Model name, which is 'Document'
                 * @example Document
                 */
                objectName: string;
            } | null;
            /**
             * @description Cost centre for the voucher
             * @example null
             */
            costCentre?: {
                /** @description Unique identifier of the cost centre */
                id: number;
                /**
                 * @description Model name, which is 'CostCentre'
                 * @example CostCentre
                 */
                objectName: string;
            };
        };
        /**
         * ReceiptGuide Data Transfer Object
         * @description Model holds data about a single selectable account with additional information matching to that account.
         */
        ReceiptGuideDto: {
            /** @description The ID of the matching account datev */
            accountDatevId?: number;
            /**
             * @description The account number of the account datev (dependent on the active accounting system of the client)
             * @example 4000
             */
            accountNumber?: string;
            /**
             * @description The name of the account
             * @example Umsatzerlöse
             */
            accountName?: string;
            /**
             * @description The description of the account and/or what the account is used for
             * @example Einnahmen aus dem Verkauf von Waren und Dienstleistungen
             */
            description?: string;
            /** @description An array that holds all possible tax rules for this account */
            allowedTaxRules?: {
                /**
                 * @description The name of the tax rule
                 * @example USTPFL_UMS_EINN
                 */
                name?: string;
                /**
                 * @description A readable description of the tax rule
                 * @example Umsatzsteuerpflichtige Umsätze
                 */
                description?: string;
                /**
                 * @description The id of the tax rule to use in different scenarios
                 * @example 1
                 */
                id?: number;
                /**
                 * @description An array of tax rates which are combinable with this tax rule
                 * @example [
                 *       "ZERO",
                 *       "SEVEN",
                 *       "NINETEEN"
                 *     ]
                 */
                taxRates?: string[];
            }[];
            /**
             * @description An array that holds the viable receipt types for this account
             * @example [
             *       "EXPENSE"
             *     ]
             */
            allowedReceiptTypes?: string[];
        };
        /**
         * Tag model
         * @description tag model
         */
        Model_TagResponse: {
            /**
             * @description Id of the tag
             * @example 1
             */
            readonly id?: string;
            /**
             * @description Internal object name which is 'Tag'.
             * @example Tag
             */
            readonly objectName?: string;
            /** @default null */
            additionalInformation: string;
            /**
             * Format: date-time
             * @description Date of tag creation
             */
            readonly create?: string;
            /** @description name of the tag */
            readonly name?: string;
            /** @description Client to which invoice belongs. Will be filled automatically */
            sevClient?: {
                /**
                 * @description Unique identifier of the client
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'SevClient'
                 * @example SevClient
                 */
                objectName: string;
            };
        };
        /**
         * Tag model
         * @description tag model
         */
        Model_TagCreateResponse: {
            /**
             * @description Id of the tag
             * @example 1
             */
            readonly id?: string;
            /**
             * @description Internal object name which is 'TagRelation'.
             * @example TagRelation
             */
            readonly objectName?: string;
            /** @default null */
            additionalInformation: string;
            /**
             * Format: date-time
             * @description Date of tag creation
             */
            readonly create?: string;
            /** @description The tag information */
            tag?: {
                /**
                 * @description Unique identifier of the tag
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'Tag'
                 * @example Tag
                 */
                objectName: string;
            };
            object?: {
                /**
                 * @description Id of the invoice/order/voucher/creditNote
                 * @example 1
                 */
                id: number;
                /**
                 * @description Model name
                 * @example Invoice
                 * @enum {string}
                 */
                objectName: "Invoice" | "Voucher" | "Order" | "CreditNote";
            };
            /** @description Client to which invoice belongs. Will be filled automatically */
            sevClient?: {
                /**
                 * @description Unique identifier of the client
                 * @example 1
                 */
                id: string;
                /**
                 * @description Model name, which is 'SevClient'
                 * @example SevClient
                 */
                objectName: string;
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    bookkeepingSystemVersion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: {
                            /** @enum {string} */
                            version?: "1.0" | "2.0";
                        };
                    };
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCheckAccounts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_CheckAccountResponse"][];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createCheckAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Creation data. Please be aware, that you need to provide at least all required parameter
         *         of the CheckAccount model! */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_CheckAccount"];
            };
        };
        responses: {
            /** @description Created - Returns created check account */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_CheckAccountResponse"][];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createFileImportAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Data to create a file import account */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["createFileImportAccount"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["createFileImportAccountResponse"];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid value given */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createClearingAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Data to create a clearning account */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["createClearingAccount"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["createClearingAccountResponse"];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid value given */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCheckAccountById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of check account */
                checkAccountId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_CheckAccountResponse"][];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateCheckAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of check account to update */
                checkAccountId: number;
            };
            cookie?: never;
        };
        /** @description Update data */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_CheckAccountUpdate"];
            };
        };
        responses: {
            /** @description Successful operation - Returns changed check account resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_CheckAccountResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteCheckAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of check account to delete */
                checkAccountId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation - check account deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: unknown[];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBalanceAtDate: {
        parameters: {
            query: {
                /** @description Only consider transactions up to this date at 23:59:59 */
                date: string;
            };
            header?: never;
            path: {
                /** @description ID of check account */
                checkAccountId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * Format: float
                         * @example 105.56
                         */
                        objects?: string;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTransactions: {
        parameters: {
            query?: {
                /** @description Retrieve all transactions on this check account. Must be provided with checkAccount[objectName] */
                "checkAccount[id]"?: number;
                /** @description Only required if checkAccount[id] was provided. 'CheckAccount' should be used as value. */
                "checkAccount[objectName]"?: string;
                /** @description Only retrieve booked transactions */
                isBooked?: boolean;
                /** @description Only retrieve transactions with this payment purpose */
                paymtPurpose?: string;
                /** @description Only retrieve transactions from this date on */
                startDate?: string;
                /** @description Only retrieve transactions up to this date */
                endDate?: string;
                /** @description Only retrieve transactions with this payee / payer */
                payeePayerName?: string;
                /** @description Only retrieve credit transactions */
                onlyCredit?: boolean;
                /** @description Only retrieve debit transactions */
                onlyDebit?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_CheckAccountTransactionResponse"][];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createTransaction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Creation data. Please be aware, that you need to provide at least all required parameter
         *         of the CheckAccountTransaction model! */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_CheckAccountTransaction"];
            };
        };
        responses: {
            /** @description Created - Returns created transaction */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_CheckAccountTransactionResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCheckAccountTransactionById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of check account transaction */
                checkAccountTransactionId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_CheckAccountTransactionResponse"][];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateCheckAccountTransaction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of check account to update transaction */
                checkAccountTransactionId: number;
            };
            cookie?: never;
        };
        /** @description Update data */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_CheckAccountTransactionUpdate"];
            };
        };
        responses: {
            /** @description Successful operation - Returns changed check account resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_CheckAccountTransactionResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteCheckAccountTransaction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of check account transaction to delete */
                checkAccountTransactionId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation - check account transaction deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: unknown[];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    checkAccountTransactionEnshrine: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the transaction to enshrine */
                checkAccountTransactionId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default null */
                        objects: unknown;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["validationError"];
                };
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getNextCustomerNumber: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns next available customer number */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Next available customer number */
                        objects?: string;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findContactsByCustomFieldValue: {
        parameters: {
            query: {
                /** @description The value to be checked. */
                value: string;
                /** @description ID of ContactCustomFieldSetting for which the value has to be checked. */
                "customFieldSetting[id]"?: string;
                /** @description Object name. Only needed if you also defined the ID of a ContactCustomFieldSetting. */
                "customFieldSetting[objectName]"?: string;
                /** @description The ContactCustomFieldSetting name, if no ContactCustomFieldSetting is provided. */
                customFieldName: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Array of contacts having a certain custom field value set. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_ContactResponse"][];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    contactCustomerNumberAvailabilityCheck: {
        parameters: {
            query?: {
                /** @description The customer number to be checked. */
                customerNumber?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns whether given customer number is available. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: boolean;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getContacts: {
        parameters: {
            query?: {
                /** @description Defines if both organizations <b>and</b> persons should be returned.<br>
                 *          '0' -> only organizations, '1' -> organizations and persons */
                depth?: "0" | "1";
                /** @description Retrieve all contacts with this customer number */
                customerNumber?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_ContactResponse"][];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createContact: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Creation data */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_Contact"];
            };
        };
        responses: {
            /** @description Created - Returns created contact */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_ContactResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getContactById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of contact to return */
                contactId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_ContactResponse"][];
                    };
                };
            };
            /** @description Bad request. Contact was not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateContact: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of contact to update */
                contactId: number;
            };
            cookie?: never;
        };
        /** @description Update data */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_ContactUpdate"];
            };
        };
        responses: {
            /** @description Successful operation - Returns changed contact resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_ContactResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteContact: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of contact resource to delete */
                contactId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation - contact deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: unknown[];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getContactTabsItemCountById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of contact to return */
                contactId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        orders?: number;
                        invoices?: number;
                        creditNotes?: number;
                        documents?: number;
                        persons?: number;
                        vouchers?: number;
                        letters?: number;
                        /** @example 0 */
                        parts?: string;
                        invoicePos?: number;
                    };
                };
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getContactAddresses: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_ContactAddressResponse"][];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createContactAddress: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Creation data */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_ContactAddress"];
            };
        };
        responses: {
            /** @description Created - Returns created contact address */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_ContactAddressResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    contactAddressId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of contact address to return */
                contactAddressId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_ContactAddressResponse"][];
                    };
                };
            };
            /** @description Bad request. Contact address was not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateContactAddress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of contact address to return */
                contactAddressId: number;
            };
            cookie?: never;
        };
        /** @description Creation data */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_ContactAddressUpdate"];
            };
        };
        responses: {
            /** @description Created - Returns created contact address */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_ContactAddressResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteContactAddress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of contact address resource to delete */
                contactAddressId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation - contact address deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: unknown[];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCommunicationWays: {
        parameters: {
            query?: {
                /** @description ID of contact for which you want the communication ways. */
                "contact[id]"?: string;
                /** @description Object name. Only needed if you also defined the ID of a contact. */
                "contact[objectName]"?: string;
                /** @description Type of the communication ways you want to get. */
                type?: "PHONE" | "EMAIL" | "WEB" | "MOBILE";
                /** @description Define if you only want the main communication way. */
                main?: "0" | "1";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_CommunicationWayResponse"][];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createCommunicationWay: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Creation data */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_CommunicationWay"];
            };
        };
        responses: {
            /** @description Created - Returns created contact communication way */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_CommunicationWayResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCommunicationWayById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of communication way to return */
                communicationWayId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_CommunicationWayResponse"][];
                    };
                };
            };
            /** @description Bad request. communication way was not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UpdateCommunicationWay: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of CommunicationWay to update */
                communicationWayId: number;
            };
            cookie?: never;
        };
        /** @description Update data */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_CommunicationWayUpdate"];
            };
        };
        responses: {
            /** @description Successful operation - Returns changed CommunicationWay resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_CommunicationWayResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteCommunicationWay: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of communication way resource to delete */
                communicationWayId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation - Communication way deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: unknown[];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCommunicationWayKeys: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: {
                            /**
                             * @description The id of the communication way key
                             *     1. ID: 1 - Privat
                             *     2. ID: 2 - Arbeit
                             *     3. ID: 3 - Fax
                             *     4. ID: 4 - Mobil
                             *     5. ID: 5 - " "
                             *     6. ID: 6 - Autobox
                             *     7. ID: 7 - Newsletter
                             *     8. ID: 8 - Rechnungsadresse
                             * @example 2
                             */
                            id?: string;
                            /**
                             * @description object name which is 'CommunicationWayKey'.
                             * @example CommunicationWayKey
                             */
                            objectName?: string;
                            /**
                             * Format: date-time
                             * @description Date the communication way key was created
                             */
                            create?: string;
                            /**
                             * Format: date-time
                             * @description Date the communication way key was last updated
                             */
                            upadate?: string;
                            /**
                             * @description Name of the communication way key
                             * @example Arbeit
                             * @enum {string}
                             */
                            name?: "Arbeit" | "Autobox" | "Fax" | "Mobil" | "Newsletter" | "Privat" | "Rechnungsadresse" | " ";
                            /** @example COMM_WAY_KEY_WORK */
                            translationCode?: string;
                        }[];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAccountingContact: {
        parameters: {
            query?: {
                /** @description ID of contact for which you want the accounting contact. */
                "contact[id]"?: string;
                /** @description Object name. Only needed if you also defined the ID of a contact. */
                "contact[objectName]"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_AccountingContactResponse"][];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createAccountingContact: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Creation data */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_AccountingContact"];
            };
        };
        responses: {
            /** @description Created - Returns created accounting contact */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_AccountingContactResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAccountingContactById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of accounting contact to return */
                accountingContactId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_AccountingContactResponse"][];
                    };
                };
            };
            /** @description Bad request. Accounting contact was not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateAccountingContact: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of accounting contact to update */
                accountingContactId: number;
            };
            cookie?: never;
        };
        /** @description Update data */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_AccountingContactUpdate"];
            };
        };
        responses: {
            /** @description Successful operation - Returns changed accounting contact resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_AccountingContactResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteAccountingContact: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of accounting contact resource to delete */
                accountingContactId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation - accounting contact deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: unknown[];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPlaceholder: {
        parameters: {
            query: {
                /** @description Model name */
                objectName: "Invoice" | "CreditNote" | "Order" | "Contact" | "Letter" | "Email";
                /** @description Sub model name, required if you have "Email" at objectName */
                subObjectName?: "Invoice" | "CreditNote" | "Order" | "Contact" | "Letter";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_Textparser_fetchDictionaryEntriesByType_response"][];
                    };
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getContactFields: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_ContactCustomFieldResponse"][];
                    };
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createContactField: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_ContactCustomField"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_ContactCustomFieldResponse"];
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getContactFieldsById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id of the contact field */
                contactCustomFieldId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_ContactCustomFieldResponse"][];
                    };
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateContactfield: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id of the contact field */
                contactCustomFieldId: number;
            };
            cookie?: never;
        };
        /** @description Update data */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_ContactCustomFieldUpdate"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_ContactCustomFieldResponse"];
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteContactCustomFieldId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of contact field */
                contactCustomFieldId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: unknown[];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getContactFieldSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_ContactCustomFieldSettingResponse"][];
                    };
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createContactFieldSetting: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_ContactCustomFieldSetting"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_ContactCustomFieldSettingResponse"][];
                    };
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getContactFieldSettingById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of contact field to return */
                contactCustomFieldSettingId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_ContactCustomFieldSettingResponse"][];
                    };
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateContactFieldSetting: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of contact field setting you want to update */
                contactCustomFieldSettingId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_ContactCustomFieldSettingUpdate"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_ContactCustomFieldSettingResponse"];
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteContactFieldSetting: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of contact field to delete */
                contactCustomFieldSettingId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation - contact field deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: unknown[];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getReferenceCount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of contact field you want to get the reference count */
                contactCustomFieldSettingId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation - contact field deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description the count of all references
                         * @example 1
                         */
                        objects?: number;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCreditNotes: {
        parameters: {
            query?: {
                /** @description Status of the CreditNote */
                status?: "100" | "200" | "300" | "500" | "750" | "1000";
                /** @description Retrieve all CreditNotes with this creditNote number */
                creditNoteNumber?: string;
                /**
                 * @description Retrieve all CreditNotes with a date equal or higher
                 * @example 01.01.2020
                 */
                startDate?: number;
                /**
                 * @description Retrieve all CreditNotes with a date equal or lower
                 * @example 01.01.2021
                 */
                endDate?: number;
                /** @description Retrieve all CreditNotes with this contact. Must be provided with contact[objectName] */
                "contact[id]"?: number;
                /** @description Only required if contact[id] was provided. 'Contact' should be used as value. */
                "contact[objectName]"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_creditNoteResponse"][];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createcreditNote: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Creation data. Please be aware, that you need to provide at least all required parameter
         *         of the credit note model! */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["saveCreditNote"];
            };
        };
        responses: {
            /** @description Created - Returns created credit note */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["saveCreditNoteResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createCreditNoteFromInvoice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    invoice: {
                        /**
                         * @description The id of the existing invoice
                         * @example 1234
                         */
                        id: number;
                        /**
                         * @description The objectName must be 'Invoice'
                         * @example Invoice
                         */
                        objectName: string;
                    };
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: {
                            creditNote?: components["schemas"]["Model_creditNoteResponse"];
                            /** @description An array of creditNote positions */
                            creditNotePos?: components["schemas"]["Model_creditNotePosResponse"][];
                            /** @description An array of discounts (can be empty) */
                            discount?: components["schemas"]["Model_discountsResponse"][];
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createCreditNoteFromVoucher: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    voucher: {
                        /**
                         * @description The id of the existing Voucher
                         * @example 1234
                         */
                        id: number;
                        /**
                         * @description The objectName must be 'Voucher'
                         * @example Voucher
                         */
                        objectName: string;
                    };
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: {
                            creditNote?: components["schemas"]["Model_creditNoteResponse"];
                            /** @description An array of creditNote positions */
                            creditNotePos?: components["schemas"]["Model_creditNotePosResponse"][];
                            /** @description An array of discounts (can be empty) */
                            discount?: components["schemas"]["Model_discountsResponse"][];
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getcreditNoteById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of creditNote to return */
                creditNoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_creditNoteResponse"][];
                    };
                };
            };
            /** @description Bad request. creditNote was not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updatecreditNote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of creditNote to update */
                creditNoteId: number;
            };
            cookie?: never;
        };
        /** @description Update data */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_creditNoteUpdate"];
            };
        };
        responses: {
            /** @description Successful operation - Returns changed creditNote resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_creditNoteResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deletecreditNote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of creditNote resource to delete */
                creditNoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation - creditNote deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: unknown[];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict - f.e occurs if the creditNote is not a draft */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sendCreditNoteByPrinting: {
        parameters: {
            query: {
                /**
                 * @description the type you want to print.
                 * @example PRN
                 */
                sendType: string;
            };
            header?: never;
            path: {
                /** @description ID of creditNote to return */
                creditNoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_CreditNote_sendByWithRender"];
                };
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    creditNoteSendBy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of credit note to mark as sent */
                creditNoteId: number;
            };
            cookie?: never;
        };
        /** @description Specify the send type */
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Specifies the way in which the credit note was sent to the customer.<br>
                     *          Accepts 'VPR' (print), 'VP' (postal), 'VM' (mail) and 'VPDF' (downloaded pfd).
                     * @example VPDF
                     * @enum {string}
                     */
                    sendType: "VPR" | "VP" | "VM" | "VPDF";
                    /**
                     * @description To create a draft of a credit note for internal use. This operation will not alter the status of the credit note or create bookings for reports.
                     * @example false
                     */
                    sendDraft: boolean;
                };
            };
        };
        responses: {
            /** @description Successful operation - Returns changed credit note log entry */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_creditNoteResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    creditNoteEnshrine: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the credit note to enshrine */
                creditNoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default null */
                        objects: unknown;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["validationError"];
                };
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    creditNoteGetPdf: {
        parameters: {
            query?: {
                /**
                 * @description If u want to download the pdf of the credit note.
                 * @example true
                 */
                download?: boolean;
                /**
                 * @description Defines if u want to send the credit note.
                 * @example true
                 */
                preventSendBy?: boolean;
            };
            header?: never;
            path: {
                /** @description ID of credit note from which you want the pdf */
                creditNoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A pdf file */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example GU-1001.pdf */
                        filename?: string;
                        /** @example application/pdf */
                        mimeType?: string;
                        /** @example true */
                        base64encoded?: boolean;
                        /** Format: binary */
                        content?: string;
                    };
                };
            };
            /** @description Bad request. Invoice was not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sendCreditNoteViaEMail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of credit note to be sent via email */
                creditNoteId: number;
            };
            cookie?: never;
        };
        /** @description Mail data */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The recipient of the email. */
                    toEmail: string;
                    /** @description The subject of the email. */
                    subject: string;
                    /** @description The text of the email. Can contain html. */
                    text: string;
                    /** @description Should a copy of this email be sent to you? */
                    copy?: boolean;
                    /** @description Additional attachments to the mail. String of IDs of existing documents in your
                     *          *                      sevdesk account separated by ',' */
                    additionalAttachments?: string;
                    /** @description String of mail addresses to be put as cc separated by ',' */
                    ccEmail?: string;
                    /** @description String of mail addresses to be put as bcc separated by ',' */
                    bccEmail?: string;
                };
            };
        };
        responses: {
            /** @description Created - Returns created mail object */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_creditNote_mailResponse"][];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    bookCreditNote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of credit note to book */
                creditNoteId: number;
            };
            cookie?: never;
        };
        /** @description Booking data */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Amount which should be booked. Can also be a partial amount. */
                    amount: number;
                    /** @description The booking date. Most likely the current date. */
                    date: number;
                    /**
                     * @description Define a type for the booking.<br>
                     *         The following type abbreviations are available (abbreviation <-> meaning).<br>
                     *         <ul>
                     *     <li>FULL_PAYMENT <-> Normal booking</li><li>N <-> Partial booking (historically used for normal booking)</li>
                     *         <li>CB <-> Reduced amount due to discount (skonto)</li>
                     *         <li>CF <-> Reduced/Higher amount due to currency fluctuations (deprecated)</li>
                     *         <li>O <-> Reduced/Higher amount due to other reasons</li>
                     *         <li>OF <-> Higher amount due to reminder charges</li>
                     *         <li>MTC <-> Reduced amount due to the monetary traffic costs</li>
                     *         </ul>
                     * @enum {string}
                     */
                    type: "FULL_PAYMENT" | "N" | "CB" | "CF" | "O" | "OF" | "MTC";
                    /** @description The check account on which should be booked. */
                    checkAccount: {
                        /** @description The id of the check account on which should be booked. */
                        id: number;
                        /**
                         * @description Internal object name which is 'CheckAccount'.
                         * @example CheckAccount
                         */
                        objectName: string;
                    };
                    /** @description The check account transaction on which should be booked.<br>
                     *         The transaction will be linked to the credit note. */
                    checkAccountTransaction?: {
                        /** @description The id of the check account transaction on which should be booked. */
                        id: number;
                        /**
                         * @description Internal object name which is 'CheckAccountTransaction'.
                         * @example CheckAccountTransaction
                         */
                        objectName: string;
                    };
                    /** @description Determines if a feed is created for the booking process. */
                    createFeed?: boolean;
                };
            };
        };
        responses: {
            /** @description Successful operation - Returns changed invoice log entry */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 2 */
                        id?: string;
                        /** @example CreditNoteLog */
                        objectName?: string;
                        /** @default null */
                        additionalInformation: string;
                        /**
                         * Format: date-time
                         * @description Date of email creation
                         * @example 2023-04-18T15:45:38+02:00
                         */
                        create?: string;
                        creditNote?: {
                            /**
                             * @description The id of the credit note
                             * @example 2
                             */
                            id: number;
                            /**
                             * @description Internal object name which is 'CreditNote'.
                             * @example CreditNote
                             */
                            objectName: string;
                        };
                        /** @example 200 */
                        fromStatus?: string;
                        /** @example 1000 */
                        toStatus?: string;
                        /** @example 0 */
                        ammountPayed?: string;
                        /**
                         * Format: date-time
                         * @example 2023-04-18T15:45:38+02:00
                         */
                        bookingDate?: string;
                        /** @description Client to which creditNote belongs. Will be filled automatically */
                        sevClient?: {
                            /**
                             * @description Unique identifier of the client
                             * @example 1
                             */
                            id: number;
                            /**
                             * @description Model name, which is 'SevClient'
                             * @example SevClient
                             */
                            objectName: string;
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    creditNoteResetToOpen: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the credit note to reset */
                creditNoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation - Returns changed credit note */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_creditNoteResponse"] & {
                            /** @example 200 */
                            status?: unknown;
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["validationError"];
                };
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    creditNoteResetToDraft: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the credit note to reset */
                creditNoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation - Returns changed credit note */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_creditNoteResponse"] & {
                            /** @example null */
                            taxText?: unknown;
                            /** @example null */
                            customerInternalNote?: unknown;
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["validationError"];
                };
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getcreditNotePositions: {
        parameters: {
            query?: {
                /** @description Retrieve all creditNote positions belonging to this creditNote. Must be provided with creditNote[objectName] */
                "creditNote[id]"?: number;
                /** @description Only required if creditNote[id] was provided. 'creditNote' should be used as value. */
                "creditNote[objectName]"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_creditNotePosResponse"][];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateExportConfig: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id of sevClient */
                SevClientId: number;
            };
            cookie?: never;
        };
        /** @description Specify the update */
        requestBody?: {
            content: {
                "application/json": {
                    /** @example 1324124 */
                    accountantNumber: number;
                    /** @example 1234152 */
                    accountantClientNumber: number;
                    /**
                     * Format: timestamp
                     * @example 1681907569
                     */
                    accountingYearBegin: number;
                };
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default null */
                        objects: unknown;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    exportDatev: {
        parameters: {
            query: {
                /**
                 * @description Specifies if the document is downloaded
                 * @example true
                 */
                Download?: boolean;
                /**
                 * @description the start date of the export as timestamp
                 * @example 1641032867
                 */
                startDate: number;
                /**
                 * @description the end date of the export as timestamp
                 * @example 1648805267
                 */
                endDate: number;
                /**
                 * @description Define what you want to include in the datev export. This parameter takes a string of 5 letters. Each stands for a model that should be included. Possible letters are: ‘E’ (Earnings), ‘X’ (Expenditure), ‘T’ (Transactions), ‘C’ (Cashregister), ‘D’ (Assets). By providing one of those letter you specify that it should be included in the datev export. Some combinations are: ‘EXTCD’, ‘EXTD’ …
                 * @example EXTCD
                 */
                scope: string;
                /**
                 * @description include unpaid documents
                 * @example true
                 */
                withUnpaidDocuments?: boolean;
                /**
                 * @description include enshrined documents
                 * @example true
                 */
                withEnshrinedDocuments?: boolean;
                /**
                 * @description Specify if you want to enshrine all models which were included in the export
                 * @example false
                 */
                enshrine?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    exportInvoice: {
        parameters: {
            query: {
                download?: boolean;
                sevQuery: {
                    /**
                     * @description Limit export
                     * @example 999999
                     */
                    limit?: number;
                    /**
                     * @description Model name, which is 'Invoice'
                     * @example Invoice
                     */
                    modelName: unknown;
                    /**
                     * @description Model name, which is 'SevQuery'
                     * @example SevQuery
                     */
                    objectName: unknown;
                    filter?: {
                        /** @description Type of invoices you want to export
                         *     1. RE - Rechnung
                         *     2. SR - Stornorechnung
                         *     3. TR - Teilrechnung
                         *     4. AR - Abschlagsrechnung
                         *     5. ER - Endrechnung
                         *     6. WKR - Wiederkehrende Rechnung
                         *     7. MA - Mahnung */
                        invoiceType?: ("Re" | "SR" | "TR" | "AR" | "ER" | "WKR" | "MA")[];
                        /**
                         * Format: date-time
                         * @description Start date of the invoice
                         */
                        startDate?: string;
                        /**
                         * Format: date-time
                         * @description End date of the invoice
                         */
                        endDate?: string;
                        /** @description filters the invoices by contact */
                        contact?: {
                            /** @description ID of the contact */
                            id: number;
                            /**
                             * @description Model name, which is 'Contact'
                             * @example Contact
                             */
                            objectName: string;
                        };
                        /**
                         * @description filters the invoices by amount
                         * @example 100
                         */
                        startAmount?: number;
                        /**
                         * @description filters the invoices by amount
                         * @example 150
                         */
                        endAmount?: number;
                    };
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation without download */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: {
                            /** @example invoices.csv */
                            filename?: string;
                            /** @example text/csv */
                            mimetype?: string;
                            /** @example true */
                            base64Encoded?: boolean;
                            content?: string;
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    exportInvoiceZip: {
        parameters: {
            query: {
                download?: boolean;
                sevQuery: {
                    /**
                     * @description Limit export
                     * @example 999999
                     */
                    limit?: number;
                    /** @description Model name, which is 'Invoice' */
                    modelName: unknown;
                    /**
                     * @description Model name, which is 'SevQuery'
                     * @example SevQuery
                     */
                    objectName: unknown;
                    filter?: {
                        /** @description Type of invoices you want to export
                         *     1. RE - Rechnung
                         *     2. SR - Stornorechnung
                         *     3. TR - Teilrechnung
                         *     4. AR - Abschlagsrechnung
                         *     5. ER - Endrechnung
                         *     6. WKR - Wiederkehrende Rechnung
                         *     7. MA - Mahnung */
                        invoiceType?: ("Re" | "SR" | "TR" | "AR" | "ER" | "WKR" | "MA")[];
                        /**
                         * Format: date-time
                         * @description Start date of the invoice
                         */
                        startDate?: string;
                        /**
                         * Format: date-time
                         * @description End date of the invoice
                         */
                        endDate?: string;
                        /** @description filters the invoices by contact */
                        contact?: {
                            /** @description ID of the contact */
                            id: number;
                            /**
                             * @description Model name, which is 'Contact'
                             * @example Contact
                             */
                            objectName: string;
                        };
                        /**
                         * @description filters the invoices by amount
                         * @example 100
                         */
                        startAmount?: number;
                        /**
                         * @description filters the invoices by amount
                         * @example 150
                         */
                        endAmount?: number;
                    };
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation without download */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: {
                            /** @example Rechnungen_19.04.23.zip */
                            filename?: string;
                            /** @example application/zip */
                            mimetype?: string;
                            /** @example true */
                            base64Encoded?: boolean;
                            /** @default null */
                            content: string;
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    exportCreditNote: {
        parameters: {
            query: {
                download?: boolean;
                sevQuery: {
                    /**
                     * @description Limit export
                     * @example 999999
                     */
                    limit?: number;
                    /**
                     * @description Model name, which is 'CreditNote'
                     * @example CreditNote
                     */
                    modelName: unknown;
                    /**
                     * @description Model name, which is 'SevQuery'
                     * @example SevQuery
                     */
                    objectName: unknown;
                    filter?: {
                        /**
                         * Format: date-time
                         * @description Start date of the credit note
                         */
                        startDate?: string;
                        /**
                         * Format: date-time
                         * @description End date of the credit note
                         */
                        endDate?: string;
                        /** @description filters the credit notes by contact */
                        contact?: {
                            /** @description ID of the contact */
                            id: number;
                            /**
                             * @description Model name, which is 'Contact'
                             * @example Contact
                             */
                            objectName: string;
                        };
                        /**
                         * @description filters the credit notes by amount
                         * @example 100
                         */
                        startAmount?: number;
                        /**
                         * @description filters the credit notes by amount
                         * @example 150
                         */
                        endAmount?: number;
                    };
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation with download */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: {
                            /** @example creditNote.csv */
                            filename?: string;
                            /** @example text/csv */
                            mimetype?: string;
                            /** @example true */
                            base64Encoded?: boolean;
                            content?: string;
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    exportVoucher: {
        parameters: {
            query: {
                download?: boolean;
                sevQuery: {
                    /**
                     * @description Limit export
                     * @example 999999
                     */
                    limit?: number;
                    /**
                     * @description Model name, which is 'Voucher'
                     * @example Voucher
                     */
                    modelName: unknown;
                    /**
                     * @description Model name, which is 'SevQuery'
                     * @example SevQuery
                     */
                    objectName: unknown;
                    filter?: {
                        /**
                         * Format: date-time
                         * @description Start date of the voucher
                         */
                        startDate?: string;
                        /**
                         * Format: date-time
                         * @description End date of the voucher
                         */
                        endDate?: string;
                        /**
                         * Format: date-time
                         * @description Start pay date of the voucher
                         */
                        startPayDate?: string;
                        /**
                         * Format: date-time
                         * @description End pay date of the voucher
                         */
                        endPayDate?: string;
                        /** @description filters the vouchers by contact */
                        contact?: {
                            /** @description ID of the contact */
                            id: number;
                            /**
                             * @description Model name, which is 'Contact'
                             * @example Contact
                             */
                            objectName: string;
                        };
                        /**
                         * @description filters the vouchers by amount
                         * @example 100
                         */
                        startAmount?: number;
                        /**
                         * @description filters the vouchers by amount
                         * @example 150
                         */
                        endAmount?: number;
                    };
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation without download */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Gutschrift_19.04.23.zip */
                        filename?: string;
                        /** @example application/zip */
                        mimetype?: string;
                        /** @example true */
                        base64Encoded?: boolean;
                        /** @default null */
                        content: string;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    exportTransactions: {
        parameters: {
            query: {
                download?: boolean;
                sevQuery: {
                    /**
                     * @description Limit export
                     * @example 999999
                     */
                    limit?: number;
                    /**
                     * @description Model name, which is 'CheckAccountTransaction'
                     * @example CheckAccountTransaction
                     */
                    modelName: unknown;
                    /**
                     * @description Model name, which is 'SevQuery'
                     * @example SevQuery
                     */
                    objectName: unknown;
                    filter?: {
                        /**
                         * @description the payment purpose
                         * @example salary
                         */
                        paymtPurpose?: string;
                        /**
                         * @description the name of the payee/payer
                         * @example Cercei Lannister
                         */
                        name?: string;
                        /**
                         * Format: date-time
                         * @description Start date of the transactions
                         */
                        startDate?: string;
                        /**
                         * Format: date-time
                         * @description End date of the transactions
                         */
                        endDate?: string;
                        /**
                         * @description filters the transactions by amount
                         * @example 100
                         */
                        startAmount?: number;
                        /**
                         * @description filters the transactions by amount
                         * @example 150
                         */
                        endAmount?: number;
                        checkAccount?: {
                            /**
                             * @description Id of the checkAccount
                             * @example 1
                             */
                            id: number;
                            /**
                             * @description Model name, which is 'CheckAccount'
                             * @example CheckAccount
                             */
                            objectName: string;
                        };
                    };
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: {
                            /** @example transaction.csv */
                            filename?: string;
                            /** @example text/csv */
                            mimetype?: string;
                            /** @example true */
                            base64Encoded?: boolean;
                            content?: string;
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    exportVoucherZip: {
        parameters: {
            query: {
                download?: boolean;
                sevQuery: {
                    /**
                     * @description Limit export
                     * @example 999999
                     */
                    limit?: number;
                    /**
                     * @description Model name, which is 'Voucher'
                     * @example Voucher
                     */
                    modelName: unknown;
                    /**
                     * @description Model name, which is 'SevQuery'
                     * @example SevQuery
                     */
                    objectName: unknown;
                    filter?: {
                        /**
                         * Format: date-time
                         * @description Start date of the voucher
                         */
                        startDate?: string;
                        /**
                         * Format: date-time
                         * @description End date of the voucher
                         */
                        endDate?: string;
                        /**
                         * Format: date-time
                         * @description Start pay date of the voucher
                         */
                        startPayDate?: string;
                        /**
                         * Format: date-time
                         * @description End pay date of the voucher
                         */
                        endPayDate?: string;
                        /** @description filters the vouchers by contact */
                        contact?: {
                            /**
                             * @description ID of the contact
                             * @example 1
                             */
                            id: number;
                            /**
                             * @description Model name, which is 'Contact'
                             * @example Contact
                             */
                            objectName: string;
                        };
                        /**
                         * @description filters the vouchers by amount
                         * @example 100
                         */
                        startAmount?: number;
                        /**
                         * @description filters the vouchers by amount
                         * @example 150
                         */
                        endAmount?: number;
                    };
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation without download */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: {
                            /** @example Belege_19.04.23.zip */
                            filename?: string;
                            /** @example application/zip */
                            mimetype?: string;
                            /** @example true */
                            base64Encoded?: boolean;
                            /** @default null */
                            content: string;
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    exportContact: {
        parameters: {
            query: {
                download?: boolean;
                sevQuery: {
                    /**
                     * @description Limit export
                     * @example 999999
                     */
                    limit?: number;
                    /**
                     * @description Model name, which is 'Contact'
                     * @example Contact
                     */
                    modelName: unknown;
                    /**
                     * @description Model name, which is 'SevQuery'
                     * @example SevQuery
                     */
                    objectName: unknown;
                    filter?: {
                        /**
                         * @description filters the contacts by zip code
                         * @example 77656
                         */
                        zip?: number;
                        /**
                         * @description filters the contacts by city
                         * @example Offenburg
                         */
                        city?: string;
                        country?: {
                            /**
                             * @description id of the country
                             * @example 1
                             */
                            id: number;
                            /**
                             * @description Model name, which is 'StaticCountry'
                             * @example StaticCountry
                             */
                            objectName: string;
                        };
                        /** @description export only organisations */
                        depth?: boolean;
                        /** @description export only people */
                        onlyPeople?: boolean;
                    };
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: {
                            /** @example contacts.csv */
                            filename?: string;
                            /** @example text/csv */
                            mimetype?: string;
                            /** @example true */
                            base64Encoded?: boolean;
                            content?: string;
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getParts: {
        parameters: {
            query?: {
                /** @description Retrieve all parts with this part number */
                partNumber?: string;
                /** @description Retrieve all parts with this name */
                name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_Part"][];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createPart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Creation data. Please be aware, that you need to provide at least all required parameter
         *         of the part model! */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_Part"];
            };
        };
        responses: {
            /** @description Created - Returns created part */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_Part"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPartById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of part to return */
                partId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_Part"][];
                    };
                };
            };
            /** @description Bad request. Part was not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updatePart: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of part to update */
                partId: number;
            };
            cookie?: never;
        };
        /** @description Update data */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_PartUpdate"];
            };
        };
        responses: {
            /** @description Successful operation - Returns changed part resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_Part"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    partGetStock: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of part for which you want the current stock. */
                partId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Stock amount
                         * @example 10
                         */
                        objects?: number;
                    };
                };
            };
            /** @description Bad request. Part was not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInvoices: {
        parameters: {
            query?: {
                /** @description Status of the invoices */
                status?: 100 | 200 | 1000;
                /** @description Retrieve all invoices with this invoice number */
                invoiceNumber?: string;
                /** @description Retrieve all invoices with a date equal or higher */
                startDate?: number;
                /** @description Retrieve all invoices with a date equal or lower */
                endDate?: number;
                /** @description Retrieve all invoices with this contact. Must be provided with contact[objectName] */
                "contact[id]"?: number;
                /** @description Only required if contact[id] was provided. 'Contact' should be used as value. */
                "contact[objectName]"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_InvoiceResponse"][];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createInvoiceByFactory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Creation data. Please be aware, that you need to provide at least all required parameter
         *         of the invoice model! */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["saveInvoice"];
            };
        };
        responses: {
            /** @description Created - Returns created invoice */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["saveInvoiceResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInvoiceById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of invoice to return */
                invoiceId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_InvoiceResponse"][];
                    };
                };
            };
            /** @description Bad request. Invoice was not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInvoicePositionsById: {
        parameters: {
            query?: {
                /** @description limits the number of entries returned */
                limit?: number;
                /** @description set the index where the returned entries start */
                offset?: number;
                /** @description Get some additional information. Embed can handle multiple values, they must be separated by comma. */
                embed?: string[];
            };
            header?: never;
            path: {
                /** @description ID of invoice to return the positions */
                invoiceId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_InvoicePosResponse"][];
                    };
                };
            };
            /** @description Bad request. Invoice was not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createInvoiceFromOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Create invoice */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_CreateInvoiceFromOrder"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_InvoiceResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createInvoiceReminder: {
        parameters: {
            query: {
                /** @description the id of the invoice */
                "invoice[id]": number;
                /**
                 * @description Model name, which is 'Invoice'
                 * @example Invoice
                 */
                "invoice[objectName]": string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Create invoice */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Invoice for the reminder */
                    invoice: {
                        /** @description Id of the invoice */
                        id: number;
                        /**
                         * @description Model name, which is 'Invoice'
                         * @example Invoice
                         */
                        objectName: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_InvoiceResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getIsInvoicePartiallyPaid: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of invoice to return */
                invoiceId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: boolean;
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    cancelInvoice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of invoice to be cancelled */
                invoiceId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created - Returns cancellation invoice */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_InvoiceResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    invoiceRender: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of invoice to render */
                invoiceId: number;
            };
            cookie?: never;
        };
        /** @description Define if the document should be forcefully re-rendered. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Define if a forceful re-render should occur. */
                    forceReload?: boolean;
                };
            };
        };
        responses: {
            /** @description Returns meta-data about pdf. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        thumbs?: unknown[];
                        /** @example 2 */
                        pages?: number;
                        /** @example d4605b19248ad176443b7cb382679b1f */
                        docId?: string;
                        parameters?: {
                            /** @example language */
                            key?: string;
                            /** @example Sprache */
                            name?: string;
                            values?: {
                                /** @example deutsch */
                                name?: string;
                                /** @example SEVDOC_LANG_DE_DE */
                                translationCade?: string;
                                /** @example de_DE */
                                value?: string;
                            }[];
                            /** @example true */
                            visible?: boolean;
                            /** @example de_DE */
                            value?: string;
                        }[];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sendInvoiceViaEMail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of invoice to be sent via email */
                invoiceId: number;
            };
            cookie?: never;
        };
        /** @description Mail data */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The recipient of the email. */
                    toEmail: string;
                    /** @description The subject of the email. */
                    subject: string;
                    /** @description The text of the email. Can contain html. */
                    text: string;
                    /** @description Should a copy of this email be sent to you? */
                    copy?: boolean;
                    /** @description Additional attachments to the mail. String of IDs of existing documents in your
                     *          *                      sevdesk account separated by ',' */
                    additionalAttachments?: string;
                    /** @description String of mail addresses to be put as cc separated by ',' */
                    ccEmail?: string;
                    /** @description String of mail addresses to be put as bcc separated by ',' */
                    bccEmail?: string;
                    /** @description If true, the XML of the e-invoice is attached to the email instead of the PDF */
                    sendXml?: boolean;
                };
            };
        };
        responses: {
            /** @description Created - Returns created mail object */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_Email"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    invoiceGetPdf: {
        parameters: {
            query?: {
                /**
                 * @description If u want to download the pdf of the invoice.
                 * @example true
                 */
                download?: boolean;
                /**
                 * @description Defines if u want to send the invoice.
                 * @example true
                 */
                preventSendBy?: boolean;
            };
            header?: never;
            path: {
                /** @description ID of invoice from which you want the pdf */
                invoiceId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A pdf file */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example RE-101.pdf */
                        filename?: string;
                        /** @example application/pdf */
                        mimeType?: string;
                        /** @example true */
                        base64encoded?: boolean;
                        /** Format: binary */
                        content?: string;
                    };
                };
            };
            /** @description Bad request. Invoice was not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    invoiceGetXml: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of invoice from which you want the XML */
                invoiceId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A xml file */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example <?xml version="1.0" encoding="UTF-8"?> */
                        object?: string;
                    };
                };
            };
            /** @description Bad request. Invoice was not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    invoiceSendBy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of invoice to mark as sent */
                invoiceId: number;
            };
            cookie?: never;
        };
        /** @description Specify the send type */
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Specifies the way in which the invoice was sent to the customer.<br>
                     *          Accepts 'VPR' (print), 'VP' (postal), 'VM' (mail) and 'VPDF' (downloaded pfd).
                     * @enum {string}
                     */
                    sendType: "VPR" | "VP" | "VM" | "VPDF";
                    /** @description To create a draft of an invoice for internal use. This operation will not alter the status of the invoice or create bookings for reports. */
                    sendDraft: boolean;
                };
            };
        };
        responses: {
            /** @description Successful operation - Returns changed invoice log entry */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_InvoiceResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    invoiceEnshrine: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the invoice to enshrine */
                invoiceId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default null */
                        objects: unknown;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["validationError"];
                };
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    bookInvoice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of invoice to book */
                invoiceId: number;
            };
            cookie?: never;
        };
        /** @description Booking data */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Amount which should be booked. Can also be a partial amount. */
                    amount: number;
                    /** @description The booking date. Most likely the current date. */
                    date: number;
                    /**
                     * @description Define a type for the booking.<br>
                     *         The following type abbreviations are available (abbreviation <-> meaning).<br>
                     *         <ul>
                     *     <li>FULL_PAYMENT <-> Normal booking</li><li>N <-> Partial booking (historically used for normal booking)</li>
                     *         <li>CB <-> Reduced amount due to discount (skonto)</li>
                     *         <li>CF <-> Reduced/Higher amount due to currency fluctuations (deprecated)</li>
                     *         <li>O <-> Reduced/Higher amount due to other reasons</li>
                     *         <li>OF <-> Higher amount due to reminder charges</li>
                     *         <li>MTC <-> Reduced amount due to the monetary traffic costs</li>
                     *         </ul>
                     * @enum {string}
                     */
                    type: "FULL_PAYMENT" | "N" | "CB" | "CF" | "O" | "OF" | "MTC";
                    /** @description The check account on which should be booked. */
                    checkAccount: {
                        /** @description The id of the check account on which should be booked. */
                        id: number;
                        /**
                         * @description Internal object name which is 'CheckAccount'.
                         * @example CheckAccount
                         */
                        objectName: string;
                    };
                    /** @description The check account transaction on which should be booked.<br>
                     *         The transaction will be linked to the invoice. */
                    checkAccountTransaction?: {
                        /** @description The id of the check account transaction on which should be booked. */
                        id: number;
                        /**
                         * @description Internal object name which is 'CheckAccountTransaction'.
                         * @example CheckAccountTransaction
                         */
                        objectName: string;
                    };
                    /** @description Determines if a feed is created for the booking process. */
                    createFeed?: boolean;
                };
            };
        };
        responses: {
            /** @description Successful operation - Returns changed invoice log entry */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 2 */
                        id?: string;
                        /** @example InvoiceLog */
                        objectName?: string;
                        /** @default null */
                        additionalInformation: string;
                        /**
                         * Format: date-time
                         * @description Date of email creation
                         * @example 2023-04-18T15:45:38+02:00
                         */
                        create?: string;
                        creditNote?: {
                            /**
                             * @description The id of the invoice
                             * @example 2
                             */
                            id: number;
                            /**
                             * @description Internal object name which is 'Invoice'.
                             * @example Invoice
                             */
                            objectName: string;
                        };
                        /** @example 200 */
                        fromStatus?: string;
                        /** @example 1000 */
                        toStatus?: string;
                        /** @example 0 */
                        ammountPayed?: string;
                        /**
                         * Format: date-time
                         * @example 2023-04-18T15:45:38+02:00
                         */
                        bookingDate?: string;
                        /** @description Client to which invoice belongs. Will be filled automatically */
                        sevClient?: {
                            /**
                             * @description Unique identifier of the client
                             * @example 1
                             */
                            id: number;
                            /**
                             * @description Model name, which is 'SevClient'
                             * @example SevClient
                             */
                            objectName: string;
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    invoiceResetToOpen: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the invoice to reset */
                invoiceId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation - Returns changed invoice */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_InvoiceResponse"] & {
                            /** @example 200 */
                            status?: unknown;
                            /** @example null */
                            payDate?: unknown;
                            /** @example null */
                            enshrined?: unknown;
                            /** @example null */
                            accountIntervall?: unknown;
                            /** @example null */
                            accountNextInvoice?: unknown;
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["validationError"];
                };
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    invoiceResetToDraft: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the invoice to reset */
                invoiceId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation - Returns changed invoice */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_InvoiceResponse"] & {
                            /** @example null */
                            payDate?: unknown;
                            /** @example null */
                            enshrined?: unknown;
                            /** @example null */
                            accountIntervall?: unknown;
                            /** @example null */
                            accountNextInvoice?: unknown;
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["validationError"];
                };
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInvoicePos: {
        parameters: {
            query?: {
                /** @description Retrieve all InvoicePos with this InvoicePos id */
                id?: number;
                /** @description Retrieve all invoices positions with this invoice. Must be provided with invoice[objectName] */
                "invoice[id]"?: number;
                /** @description Only required if invoice[id] was provided. 'Invoice' should be used as value. */
                "invoice[objectName]"?: string;
                /** @description Retrieve all invoices positions with this part. Must be provided with part[objectName] */
                "part[id]"?: number;
                /** @description Only required if part[id] was provided. 'Part' should be used as value. */
                "part[objectName]"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_InvoicePosResponse"][];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLetterpapersWithThumb: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 1 */
                        result?: string;
                        letterpapers?: {
                            /** @example 57d7ff34f23ada297d265f21 */
                            id?: string;
                            pdf?: string;
                            /** @example 0 */
                            sevClient?: string;
                            /** @example Blanko */
                            name?: string;
                            default?: number;
                            img?: string;
                        }[];
                    };
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTemplates: {
        parameters: {
            query?: {
                /** @description Type of the templates you want to get. */
                type?: "Invoice" | "invoicereminder" | "Order" | "Contractnote" | "Packinglist" | "Letter" | "Creditnote";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 1 */
                        result?: string;
                        templates?: {
                            /** @example 57986aee6bd2d53306068da1 */
                            id?: string;
                            /** @example SEVDOC_TEMPLATE_STANDARD */
                            name?: string;
                            /** @example SEVDOC_TEMPLATE_STANDARD */
                            translationCode?: string;
                            /** @example 0 */
                            sevClient?: string;
                            /** @example Invoice */
                            type?: string;
                            html?: string;
                            default?: number;
                            /** @example false */
                            premium?: boolean;
                        }[];
                    };
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateInvoiceTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of invoice to update */
                invoiceId: number;
            };
            cookie?: never;
        };
        /** @description Change Layout */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_ChangeLayout"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_ChangeLayoutResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateOrderTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of order to update */
                orderId: number;
            };
            cookie?: never;
        };
        /** @description Change Layout */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_ChangeLayout"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_ChangeLayoutResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateCreditNoteTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of credit note to update */
                creditNoteId: number;
            };
            cookie?: never;
        };
        /** @description Change Layout */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_ChangeLayout"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_ChangeLayoutResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOrders: {
        parameters: {
            query?: {
                /** @description Status of the order */
                status?: 100 | 200 | 300 | 500 | 750 | 1000;
                /** @description Retrieve all orders with this order number */
                orderNumber?: string;
                /** @description Retrieve all orders with a date equal or higher */
                startDate?: number;
                /** @description Retrieve all orders with a date equal or lower */
                endDate?: number;
                /** @description Retrieve all orders with this contact. Must be provided with contact[objectName] */
                "contact[id]"?: number;
                /** @description Only required if contact[id] was provided. 'Contact' should be used as value. */
                "contact[objectName]"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_OrderResponse"][];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Creation data. Please be aware, that you need to provide at least all required parameter
         *         of the order model! */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["saveOrder"];
            };
        };
        responses: {
            /** @description Created - Returns created voucher */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["saveOrderResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOrderById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of order to return */
                orderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_OrderResponse"][];
                    };
                };
            };
            /** @description Bad request. Order was not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of order to update */
                orderId: number;
            };
            cookie?: never;
        };
        /** @description Update data */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_OrderUpdate"];
            };
        };
        responses: {
            /** @description Successful operation - Returns changed order resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_OrderResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of order resource to delete */
                orderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation - Order deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: unknown[];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict - f.e occurs if the order is not a draft */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOrderPositionsById: {
        parameters: {
            query?: {
                /** @description limits the number of entries returned */
                limit?: number;
                /** @description set the index where the returned entries start */
                offset?: number;
                /** @description Get some additional information. Embed can handle multiple values, they must be separated by comma. */
                embed?: string[];
            };
            header?: never;
            path: {
                /** @description ID of order to return the positions */
                orderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_OrderPosResponse"][];
                    };
                };
            };
            /** @description Bad request. order was not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDiscounts: {
        parameters: {
            query?: {
                /** @description limits the number of entries returned */
                limit?: number;
                /** @description set the index where the returned entries start */
                offset?: number;
                /** @description Get some additional information. Embed can handle multiple values, they must be separated by comma. */
                embed?: string[];
            };
            header?: never;
            path: {
                /** @description ID of order to return the positions */
                orderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_Discount"][];
                    };
                };
            };
            /** @description Bad request. order was not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRelatedObjects: {
        parameters: {
            query?: {
                /** @description Define if the related objects include the order itself */
                includeItself?: boolean;
                /** @description Define if you want the related objects sorted by type */
                sortByType?: boolean;
                /** @description Get some additional information. Embed can handle multiple values, they must be separated by comma. */
                embed?: string[];
            };
            header?: never;
            path: {
                /** @description ID of order to return the positions */
                orderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_OrderPosResponse"][];
                    };
                };
            };
            /** @description Bad request. order was not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sendorderViaEMail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of order to be sent via email */
                orderId: number;
            };
            cookie?: never;
        };
        /** @description Mail data */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The recipient of the email. */
                    toEmail: string;
                    /** @description The subject of the email. */
                    subject: string;
                    /** @description The text of the email. Can contain html. */
                    text: string;
                    /** @description Should a copy of this email be sent to you? */
                    copy?: boolean;
                    /** @description Additional attachments to the mail. String of IDs of existing documents in your
                     *          *                      sevdesk account separated by ',' */
                    additionalAttachments?: string;
                    /** @description String of mail addresses to be put as cc separated by ',' */
                    ccEmail?: string;
                    /** @description String of mail addresses to be put as bcc separated by ',' */
                    bccEmail?: string;
                };
            };
        };
        responses: {
            /** @description Created - Returns created mail object */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_EmailOrder"][];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createPackingListFromOrder: {
        parameters: {
            query: {
                /** @description the id of the order */
                "order[id]": number;
                /**
                 * @description Model name, which is 'Order'
                 * @example Order
                 */
                "order[objectName]": string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Create packing list */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_CreatePackingListFromOrder"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_OrderResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createContractNoteFromOrder: {
        parameters: {
            query: {
                /** @description the id of the order */
                "order[id]": number;
                /**
                 * @description Model name, which is 'Order'
                 * @example Order
                 */
                "order[objectName]": string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Create contract note */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_CreatePackingListFromOrder"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_OrderResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    orderGetPdf: {
        parameters: {
            query?: {
                /**
                 * @description If u want to download the pdf of the order.
                 * @example true
                 */
                download?: boolean;
                /**
                 * @description Defines if u want to send the order.
                 * @example true
                 */
                preventSendBy?: boolean;
            };
            header?: never;
            path: {
                /** @description ID of order from which you want the pdf */
                orderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A pdf file */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example OR-1001.pdf */
                        filename?: string;
                        /** @example application/pdf */
                        mimeType?: string;
                        /** @example true */
                        base64encoded?: boolean;
                        /** Format: binary */
                        content?: string;
                    };
                };
            };
            /** @description Bad request. order was not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    orderSendBy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of order to mark as sent */
                orderId: number;
            };
            cookie?: never;
        };
        /** @description Specify the send type */
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Specifies the way in which the order was sent to the customer.<br>
                     *          Accepts 'VPR' (print), 'VP' (postal), 'VM' (mail) and 'VPDF' (downloaded pfd).
                     * @enum {string}
                     */
                    sendType: "VPR" | "VP" | "VM" | "VPDF";
                    /** @description To create a draft of an order for internal use. This operation will not alter the status of the order. */
                    sendDraft: boolean;
                };
            };
        };
        responses: {
            /** @description Successful operation - Returns changed order log entry */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_OrderResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOrderPositions: {
        parameters: {
            query?: {
                /** @description Retrieve all order positions belonging to this order. Must be provided with voucher[objectName] */
                "order[id]"?: number;
                /** @description Only required if order[id] was provided. 'Order' should be used as value. */
                "order[objectName]"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_OrderPosResponse"][];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOrderPositionById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of order position to return */
                orderPosId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_OrderPosResponse"][];
                    };
                };
            };
            /** @description Bad request. Order position was not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateOrderPosition: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of order position to update */
                orderPosId: number;
            };
            cookie?: never;
        };
        /** @description Update data */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_OrderPosUpdate"];
            };
        };
        responses: {
            /** @description Successful operation - Returns changed order position resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_OrderPosResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteOrderPos: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of order position resource to delete */
                orderPosId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation - order position deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: unknown[];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict - f.e occurs if the order is not a draft */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    voucherFactorySaveVoucher: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Creation data. Please be aware, that you need to provide at least all required parameters of the voucher and voucher position model! */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["saveVoucher"];
            };
        };
        responses: {
            /** @description Created - Returns created voucher */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["saveVoucherResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["validationError"];
                };
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    voucherUploadFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description File to upload */
        requestBody?: {
            content: {
                "form-data": {
                    /**
                     * Format: binary
                     * @description The file to upload
                     */
                    file?: string;
                };
            };
        };
        responses: {
            /** @description A pdf file */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: {
                            /** @example 1 */
                            pages?: number;
                            /** @example image/jpg */
                            mimeType?: string;
                            /** @example application/pdf */
                            originMimeType?: string;
                            /** @example f019bec36c65f5a0e7d2c63cc33f0681.pdf */
                            filename?: string;
                            /** @example 1998dea8c6e9e489139caf896690641c0ea065ce5770b51cf2a4d10797f99685 */
                            contentHash?: string;
                            content?: unknown[];
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getVouchers: {
        parameters: {
            query?: {
                /** @description Status of the vouchers to retrieve. */
                status?: 50 | 100 | 1000;
                /** @description Define if you only want credit or debit vouchers. */
                creditDebit?: "C" | "D";
                /** @description Retrieve all vouchers with a description like this. */
                descriptionLike?: string;
                /**
                 * @description Retrieve all vouchers with a date equal or higher
                 * @example 01.01.2020
                 */
                startDate?: number;
                /**
                 * @description Retrieve all vouchers with a date equal or lower
                 * @example 01.01.2020
                 */
                endDate?: number;
                /** @description Retrieve all vouchers with this contact. Must be provided with contact[objectName] */
                "contact[id]"?: number;
                /** @description Only required if contact[id] was provided. 'Contact' should be used as value. */
                "contact[objectName]"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_VoucherResponse"][];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getVoucherById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of voucher to return */
                voucherId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_VoucherResponse"][];
                    };
                };
            };
            /** @description Bad request. Voucher was not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateVoucher: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of voucher to update */
                voucherId: number;
            };
            cookie?: never;
        };
        /** @description Update data */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Model_VoucherUpdate"];
            };
        };
        responses: {
            /** @description Successful operation - Returns changed voucher resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_VoucherResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    voucherEnshrine: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the voucher to enshrine */
                voucherId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default null */
                        objects: unknown;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["validationError"];
                };
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    bookVoucher: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of voucher to book */
                voucherId: number;
            };
            cookie?: never;
        };
        /** @description Booking data */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Amount which should be booked. Can also be a partial amount. */
                    amount: number;
                    /**
                     * Format: date-time
                     * @description The booking date. Most likely the current date.
                     */
                    date: string;
                    /**
                     * @description Define a type for the booking.<br>
                     *         The following type abbreviations are available (abbreviation <-> meaning).<br>
                     *         <ul>
                     *     <li>FULL_PAYMENT <-> Normal booking</li><li>N <-> Partial booking (historically used for normal booking)</li>
                     *         <li>CB <-> Reduced amount due to discount (skonto)</li>
                     *         <li>CF <-> Reduced/Higher amount due to currency fluctuations (deprecated)</li>
                     *         <li>O <-> Reduced/Higher amount due to other reasons</li>
                     *         <li>OF <-> Higher amount due to reminder charges</li>
                     *         <li>MTC <-> Reduced amount due to the monetary traffic costs</li>
                     *         </ul>
                     * @enum {string}
                     */
                    type: "FULL_PAYMENT" | "N" | "CB" | "CF" | "O" | "OF" | "MTC";
                    /** @description The check account on which should be booked. */
                    checkAccount: {
                        /** @description The id of the check account on which should be booked. */
                        id: number;
                        /**
                         * @description Internal object name which is 'CheckAccount'.
                         * @example CheckAccount
                         */
                        objectName: string;
                    };
                    /** @description The check account transaction on which should be booked.<br>
                     *         The transaction will be linked to the voucher. */
                    checkAccountTransaction?: {
                        /** @description The id of the check account transaction on which should be booked. */
                        id: number;
                        /**
                         * @description Internal object name which is 'CheckAccountTransaction'.
                         * @example CheckAccountTransaction
                         */
                        objectName: string;
                    };
                    /** @description Determines if a feed is created for the booking process. */
                    createFeed?: boolean;
                };
            };
        };
        responses: {
            /** @description Successful operation - Returns changed voucher log entry */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 2 */
                        id?: string;
                        /** @example VoucherLog */
                        objectName?: string;
                        /** @default null */
                        additionalInformation: string;
                        /**
                         * Format: date-time
                         * @description Date of email creation
                         * @example 2023-04-18T15:45:38+02:00
                         */
                        create?: string;
                        creditNote?: {
                            /**
                             * @description The id of the voucher
                             * @example 2
                             */
                            id: number;
                            /**
                             * @description Internal object name which is 'Voucher'.
                             * @example Voucher
                             */
                            objectName: string;
                        };
                        /** @example 200 */
                        fromStatus?: string;
                        /** @example 1000 */
                        toStatus?: string;
                        /** @example 0 */
                        ammountPayed?: string;
                        /**
                         * Format: date-time
                         * @example 2023-04-18T15:45:38+02:00
                         */
                        bookingDate?: string;
                        /** @description Client to which invoice belongs. Will be filled automatically */
                        sevClient?: {
                            /**
                             * @description Unique identifier of the client
                             * @example 1
                             */
                            id: number;
                            /**
                             * @description Model name, which is 'SevClient'
                             * @example SevClient
                             */
                            objectName: string;
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    voucherResetToOpen: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the voucher to reset */
                voucherId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation - Returns changed voucher */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_VoucherResponse"] & {
                            /** @example 200 */
                            status?: unknown;
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["validationError"];
                };
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    voucherResetToDraft: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the voucher to reset */
                voucherId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation - Returns changed voucher */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_VoucherResponse"] & {
                            /** @example 200 */
                            status?: unknown;
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["validationError"];
                };
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getVoucherPositions: {
        parameters: {
            query?: {
                /** @description Retrieve all vouchers positions belonging to this voucher. Must be provided with voucher[objectName] */
                "voucher[id]"?: number;
                /** @description Only required if voucher[id] was provided. 'Voucher' should be used as value. */
                "voucher[objectName]"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_VoucherPosResponse"][];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    forAllAccounts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["ReceiptGuideDto"][];
                    };
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    forAccountNumber: {
        parameters: {
            query: {
                /** @description The datev account number you want to get additional information of */
                accountNumber: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["ReceiptGuideDto"][];
                    };
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The account you requested could not be found. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    forTaxRule: {
        parameters: {
            query: {
                /**
                 * @description The code of the tax rule you want to get guidance for.
                 * @example USTPFL_UMS_EINN
                 */
                taxRule: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["ReceiptGuideDto"][];
                    };
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No account guides were found for the requested tax rule. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    forRevenue: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["ReceiptGuideDto"][];
                    };
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    forExpense: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["ReceiptGuideDto"][];
                    };
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    reportInvoice: {
        parameters: {
            query: {
                download?: boolean;
                /** @example all */
                view: string;
                sevQuery: {
                    /**
                     * @description Limit export
                     * @example 999999
                     */
                    limit?: number;
                    /**
                     * @description Model name which is exported
                     * @example Invoice
                     */
                    modelName: unknown;
                    /**
                     * @description SevQuery object name
                     * @example SevQuery
                     */
                    objectName: unknown;
                    filter?: {
                        /** @description Type of invoices you want to export
                         *     1. RE - Rechnung
                         *     2. SR - Stornorechnung
                         *     3. TR - Teilrechnung
                         *     4. AR - Abschlagsrechnung
                         *     5. ER - Endrechnung
                         *     6. WKR - Wiederkehrende Rechnung
                         *     7. MA - Mahnung */
                        invoiceType?: ("Re" | "SR" | "TR" | "AR" | "ER" | "WKR" | "MA")[];
                        /**
                         * Format: date-time
                         * @description Start date of the invoice
                         */
                        startDate?: string;
                        /**
                         * Format: date-time
                         * @description End date of the invoice
                         */
                        endDate?: string;
                        /** @description filters the invoices by contact */
                        contact?: {
                            /** @description ID of the contact */
                            id: number;
                            /**
                             * @description Model name, which is 'Contact'
                             * @example Contact
                             */
                            objectName: string;
                        };
                        /**
                         * @description filters the invoices by amount
                         * @example 100
                         */
                        startAmount?: number;
                        /**
                         * @description filters the invoices by amount
                         * @example 150
                         */
                        endAmount?: number;
                    };
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: {
                            /** @example invoice.pdf */
                            filename?: string;
                            /** @example application/pdf */
                            mimetype?: string;
                            /** @example true */
                            base64Encoded?: boolean;
                            content?: string;
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    reportOrder: {
        parameters: {
            query: {
                download?: boolean;
                /** @example all */
                view: string;
                sevQuery: {
                    /**
                     * @description Limit export
                     * @example 999999
                     */
                    limit?: number;
                    /**
                     * @description Model name which is exported
                     * @example Order
                     */
                    modelName: unknown;
                    /**
                     * @description SevQuery object name
                     * @example SevQuery
                     */
                    objectName: unknown;
                    filter?: {
                        /**
                         * @description Type of orders you want to export
                         *     1. AN - Angebote
                         *     2. AB - Aufträge
                         *     3. LI - Lieferscheine
                         * @enum {string}
                         */
                        orderType?: "AN" | "AB" | "LI";
                        /**
                         * Format: date-time
                         * @description Start date of the order
                         */
                        startDate?: string;
                        /**
                         * Format: date-time
                         * @description End date of the order
                         */
                        endDate?: string;
                        /** @description filters the orders by contact */
                        contact?: {
                            /** @description ID of the contact */
                            id: number;
                            /**
                             * @description Model name, which is 'Contact'
                             * @example Contact
                             */
                            objectName: string;
                        };
                        /**
                         * @description filters the orders by amount
                         * @example 100
                         */
                        startAmount?: number;
                        /**
                         * @description filters the orders by amount
                         * @example 150
                         */
                        endAmount?: number;
                    };
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: {
                            /** @example order.pdf */
                            filename?: string;
                            /** @example application/pdf */
                            mimetype?: string;
                            /** @example true */
                            base64Encoded?: boolean;
                            content?: string;
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    reportContact: {
        parameters: {
            query: {
                download?: boolean;
                sevQuery: {
                    /**
                     * @description Limit export
                     * @example 999999
                     */
                    limit?: number;
                    /**
                     * @description Model name which is exported
                     * @example Contact
                     */
                    modelName: unknown;
                    /**
                     * @description SevQuery object name
                     * @example SevQuery
                     */
                    objectName: unknown;
                    filter?: {
                        /**
                         * @description filters the contacts by zip code
                         * @example 77656
                         */
                        zip?: number;
                        /**
                         * @description filters the contacts by city
                         * @example Offenburg
                         */
                        city?: string;
                        country?: {
                            /**
                             * @description id of the country
                             * @example 1
                             */
                            id: number;
                            /**
                             * @description Model name, which is 'StaticCountry'
                             * @example StaticCountry
                             */
                            objectName: string;
                        };
                        /** @description export only organisations */
                        depth?: boolean;
                        /** @description export only people */
                        onlyPeople?: boolean;
                    };
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: {
                            /** @example contact.pdf */
                            filename?: string;
                            /** @example application/pdf */
                            mimetype?: string;
                            /** @example true */
                            base64Encoded?: boolean;
                            content?: string;
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    reportVoucher: {
        parameters: {
            query: {
                download?: boolean;
                sevQuery: {
                    /**
                     * @description Limit export
                     * @example 999999
                     */
                    limit?: number;
                    /**
                     * @description Model name which is exported
                     * @example Voucher
                     */
                    modelName: unknown;
                    /**
                     * @description SevQuery object name
                     * @example SevQuery
                     */
                    objectName: unknown;
                    filter?: {
                        /**
                         * Format: date-time
                         * @description Start date of the voucher
                         */
                        startDate?: string;
                        /**
                         * Format: date-time
                         * @description End date of the voucher
                         */
                        endDate?: string;
                        /**
                         * Format: date-time
                         * @description Start pay date of the voucher
                         */
                        startPayDate?: string;
                        /**
                         * Format: date-time
                         * @description End pay date of the voucher
                         */
                        endPayDate?: string;
                        /** @description filters the vouchers by contact */
                        contact?: {
                            /** @description ID of the contact */
                            id: number;
                            /**
                             * @description Model name, which is 'Contact'
                             * @example Contact
                             */
                            objectName: string;
                        };
                        /**
                         * @description filters the vouchers by amount
                         * @example 100
                         */
                        startAmount?: number;
                        /**
                         * @description filters the vouchers by amount
                         * @example 150
                         */
                        endAmount?: number;
                    };
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: {
                            /** @example voucher.pdf */
                            filename?: string;
                            /** @example application/pdf */
                            mimetype?: string;
                            /** @example true */
                            base64Encoded?: boolean;
                            content?: string;
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTags: {
        parameters: {
            query?: {
                /** @description ID of the Tag */
                id?: number;
                /** @description Name of the Tag */
                name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_TagResponse"][];
                    };
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTagById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of tag to return */
                tagId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_TagResponse"][];
                    };
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of tag you want to update */
                tagId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The name of the tag u want to update */
                    name?: string;
                };
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_TagResponse"];
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of tag to delete */
                tagId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation - tag deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: unknown[];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Name of the tag */
                    name?: string;
                    object: {
                        /**
                         * @description Id of the invoice/order/voucher/creditNote
                         * @example 1
                         */
                        id: number;
                        /**
                         * @description Model name
                         * @example Invoice
                         * @enum {string}
                         */
                        objectName: "Invoice" | "Voucher" | "Order" | "CreditNote";
                    };
                };
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model_TagCreateResponse"];
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTagRelations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objects?: components["schemas"]["Model_TagCreateResponse"][];
                    };
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
